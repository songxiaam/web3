// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newMultiSign(db *gorm.DB, opts ...gen.DOOption) multiSign {
	_multiSign := multiSign{}

	_multiSign.multiSignDo.UseDB(db, opts...)
	_multiSign.multiSignDo.UseModel(&model.MultiSign{})

	tableName := _multiSign.multiSignDo.TableName()
	_multiSign.ALL = field.NewAsterisk(tableName)
	_multiSign.ID = field.NewInt32(tableName, "id")
	_multiSign.SpName = field.NewString(tableName, "sp_name")
	_multiSign.SpToken = field.NewString(tableName, "sp_token")
	_multiSign.JpName = field.NewString(tableName, "jp_name")
	_multiSign.JpToken = field.NewString(tableName, "jp_token")
	_multiSign.SpAddress = field.NewString(tableName, "sp_address")
	_multiSign.JpAddress = field.NewString(tableName, "jp_address")
	_multiSign.SpHash = field.NewString(tableName, "sp_hash")
	_multiSign.JpHash = field.NewString(tableName, "jp_hash")
	_multiSign.MultiSignAccount = field.NewString(tableName, "multi_sign_account")
	_multiSign.ChainID = field.NewInt32(tableName, "chain_id")
	_multiSign.CreatedAt = field.NewTime(tableName, "created_at")
	_multiSign.UpdatedAt = field.NewTime(tableName, "updated_at")

	_multiSign.fillFieldMap()

	return _multiSign
}

type multiSign struct {
	multiSignDo

	ALL              field.Asterisk
	ID               field.Int32
	SpName           field.String
	SpToken          field.String
	JpName           field.String
	JpToken          field.String
	SpAddress        field.String
	JpAddress        field.String
	SpHash           field.String
	JpHash           field.String
	MultiSignAccount field.String
	ChainID          field.Int32
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (m multiSign) Table(newTableName string) *multiSign {
	m.multiSignDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m multiSign) As(alias string) *multiSign {
	m.multiSignDo.DO = *(m.multiSignDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *multiSign) updateTableName(table string) *multiSign {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.SpName = field.NewString(table, "sp_name")
	m.SpToken = field.NewString(table, "sp_token")
	m.JpName = field.NewString(table, "jp_name")
	m.JpToken = field.NewString(table, "jp_token")
	m.SpAddress = field.NewString(table, "sp_address")
	m.JpAddress = field.NewString(table, "jp_address")
	m.SpHash = field.NewString(table, "sp_hash")
	m.JpHash = field.NewString(table, "jp_hash")
	m.MultiSignAccount = field.NewString(table, "multi_sign_account")
	m.ChainID = field.NewInt32(table, "chain_id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *multiSign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *multiSign) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["id"] = m.ID
	m.fieldMap["sp_name"] = m.SpName
	m.fieldMap["sp_token"] = m.SpToken
	m.fieldMap["jp_name"] = m.JpName
	m.fieldMap["jp_token"] = m.JpToken
	m.fieldMap["sp_address"] = m.SpAddress
	m.fieldMap["jp_address"] = m.JpAddress
	m.fieldMap["sp_hash"] = m.SpHash
	m.fieldMap["jp_hash"] = m.JpHash
	m.fieldMap["multi_sign_account"] = m.MultiSignAccount
	m.fieldMap["chain_id"] = m.ChainID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m multiSign) clone(db *gorm.DB) multiSign {
	m.multiSignDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m multiSign) replaceDB(db *gorm.DB) multiSign {
	m.multiSignDo.ReplaceDB(db)
	return m
}

type multiSignDo struct{ gen.DO }

type IMultiSignDo interface {
	gen.SubQuery
	Debug() IMultiSignDo
	WithContext(ctx context.Context) IMultiSignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMultiSignDo
	WriteDB() IMultiSignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMultiSignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMultiSignDo
	Not(conds ...gen.Condition) IMultiSignDo
	Or(conds ...gen.Condition) IMultiSignDo
	Select(conds ...field.Expr) IMultiSignDo
	Where(conds ...gen.Condition) IMultiSignDo
	Order(conds ...field.Expr) IMultiSignDo
	Distinct(cols ...field.Expr) IMultiSignDo
	Omit(cols ...field.Expr) IMultiSignDo
	Join(table schema.Tabler, on ...field.Expr) IMultiSignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMultiSignDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMultiSignDo
	Group(cols ...field.Expr) IMultiSignDo
	Having(conds ...gen.Condition) IMultiSignDo
	Limit(limit int) IMultiSignDo
	Offset(offset int) IMultiSignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMultiSignDo
	Unscoped() IMultiSignDo
	Create(values ...*model.MultiSign) error
	CreateInBatches(values []*model.MultiSign, batchSize int) error
	Save(values ...*model.MultiSign) error
	First() (*model.MultiSign, error)
	Take() (*model.MultiSign, error)
	Last() (*model.MultiSign, error)
	Find() ([]*model.MultiSign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MultiSign, err error)
	FindInBatches(result *[]*model.MultiSign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MultiSign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMultiSignDo
	Assign(attrs ...field.AssignExpr) IMultiSignDo
	Joins(fields ...field.RelationField) IMultiSignDo
	Preload(fields ...field.RelationField) IMultiSignDo
	FirstOrInit() (*model.MultiSign, error)
	FirstOrCreate() (*model.MultiSign, error)
	FindByPage(offset int, limit int) (result []*model.MultiSign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMultiSignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m multiSignDo) Debug() IMultiSignDo {
	return m.withDO(m.DO.Debug())
}

func (m multiSignDo) WithContext(ctx context.Context) IMultiSignDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m multiSignDo) ReadDB() IMultiSignDo {
	return m.Clauses(dbresolver.Read)
}

func (m multiSignDo) WriteDB() IMultiSignDo {
	return m.Clauses(dbresolver.Write)
}

func (m multiSignDo) Session(config *gorm.Session) IMultiSignDo {
	return m.withDO(m.DO.Session(config))
}

func (m multiSignDo) Clauses(conds ...clause.Expression) IMultiSignDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m multiSignDo) Returning(value interface{}, columns ...string) IMultiSignDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m multiSignDo) Not(conds ...gen.Condition) IMultiSignDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m multiSignDo) Or(conds ...gen.Condition) IMultiSignDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m multiSignDo) Select(conds ...field.Expr) IMultiSignDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m multiSignDo) Where(conds ...gen.Condition) IMultiSignDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m multiSignDo) Order(conds ...field.Expr) IMultiSignDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m multiSignDo) Distinct(cols ...field.Expr) IMultiSignDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m multiSignDo) Omit(cols ...field.Expr) IMultiSignDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m multiSignDo) Join(table schema.Tabler, on ...field.Expr) IMultiSignDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m multiSignDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMultiSignDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m multiSignDo) RightJoin(table schema.Tabler, on ...field.Expr) IMultiSignDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m multiSignDo) Group(cols ...field.Expr) IMultiSignDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m multiSignDo) Having(conds ...gen.Condition) IMultiSignDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m multiSignDo) Limit(limit int) IMultiSignDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m multiSignDo) Offset(offset int) IMultiSignDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m multiSignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMultiSignDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m multiSignDo) Unscoped() IMultiSignDo {
	return m.withDO(m.DO.Unscoped())
}

func (m multiSignDo) Create(values ...*model.MultiSign) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m multiSignDo) CreateInBatches(values []*model.MultiSign, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m multiSignDo) Save(values ...*model.MultiSign) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m multiSignDo) First() (*model.MultiSign, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultiSign), nil
	}
}

func (m multiSignDo) Take() (*model.MultiSign, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultiSign), nil
	}
}

func (m multiSignDo) Last() (*model.MultiSign, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultiSign), nil
	}
}

func (m multiSignDo) Find() ([]*model.MultiSign, error) {
	result, err := m.DO.Find()
	return result.([]*model.MultiSign), err
}

func (m multiSignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MultiSign, err error) {
	buf := make([]*model.MultiSign, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m multiSignDo) FindInBatches(result *[]*model.MultiSign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m multiSignDo) Attrs(attrs ...field.AssignExpr) IMultiSignDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m multiSignDo) Assign(attrs ...field.AssignExpr) IMultiSignDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m multiSignDo) Joins(fields ...field.RelationField) IMultiSignDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m multiSignDo) Preload(fields ...field.RelationField) IMultiSignDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m multiSignDo) FirstOrInit() (*model.MultiSign, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultiSign), nil
	}
}

func (m multiSignDo) FirstOrCreate() (*model.MultiSign, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MultiSign), nil
	}
}

func (m multiSignDo) FindByPage(offset int, limit int) (result []*model.MultiSign, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m multiSignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m multiSignDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m multiSignDo) Delete(models ...*model.MultiSign) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *multiSignDo) withDO(do gen.Dao) *multiSignDo {
	m.DO = *do.(*gen.DO)
	return m
}
