// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newPoolBase(db *gorm.DB, opts ...gen.DOOption) poolBase {
	_poolBase := poolBase{}

	_poolBase.poolBaseDo.UseDB(db, opts...)
	_poolBase.poolBaseDo.UseModel(&model.PoolBase{})

	tableName := _poolBase.poolBaseDo.TableName()
	_poolBase.ALL = field.NewAsterisk(tableName)
	_poolBase.ID = field.NewInt32(tableName, "id")
	_poolBase.SettleTime = field.NewString(tableName, "settle_time")
	_poolBase.EndTime = field.NewString(tableName, "end_time")
	_poolBase.InterestRate = field.NewString(tableName, "interest_rate")
	_poolBase.MaxSupply = field.NewString(tableName, "max_supply")
	_poolBase.LendSupply = field.NewString(tableName, "lend_supply")
	_poolBase.BorrowSupply = field.NewString(tableName, "borrow_supply")
	_poolBase.MartgageRate = field.NewString(tableName, "martgage_rate")
	_poolBase.LendToken = field.NewString(tableName, "lend_token")
	_poolBase.BorrowToken = field.NewString(tableName, "borrow_token")
	_poolBase.State = field.NewString(tableName, "state")
	_poolBase.JpCoin = field.NewString(tableName, "jp_coin")
	_poolBase.SpCoin = field.NewString(tableName, "sp_coin")
	_poolBase.AutoLiquidateThreshold = field.NewString(tableName, "auto_liquidate_threshold")
	_poolBase.CreatedAt = field.NewTime(tableName, "created_at")
	_poolBase.UpdatedAt = field.NewTime(tableName, "updated_at")
	_poolBase.PoolID = field.NewInt32(tableName, "pool_id")
	_poolBase.BorrowTokenInfo = field.NewString(tableName, "borrow_token_info")
	_poolBase.LendTokenInfo = field.NewString(tableName, "lend_token_info")
	_poolBase.ChainID = field.NewString(tableName, "chain_id")
	_poolBase.LendTokenSymbol = field.NewString(tableName, "lend_token_symbol")
	_poolBase.BorrowTokenSymbol = field.NewString(tableName, "borrow_token_symbol")

	_poolBase.fillFieldMap()

	return _poolBase
}

// poolBase poolbase
type poolBase struct {
	poolBaseDo

	ALL                    field.Asterisk
	ID                     field.Int32
	SettleTime             field.String
	EndTime                field.String
	InterestRate           field.String
	MaxSupply              field.String
	LendSupply             field.String
	BorrowSupply           field.String
	MartgageRate           field.String
	LendToken              field.String
	BorrowToken            field.String
	State                  field.String
	JpCoin                 field.String
	SpCoin                 field.String
	AutoLiquidateThreshold field.String
	CreatedAt              field.Time
	UpdatedAt              field.Time
	PoolID                 field.Int32
	BorrowTokenInfo        field.String
	LendTokenInfo          field.String
	ChainID                field.String
	LendTokenSymbol        field.String
	BorrowTokenSymbol      field.String

	fieldMap map[string]field.Expr
}

func (p poolBase) Table(newTableName string) *poolBase {
	p.poolBaseDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p poolBase) As(alias string) *poolBase {
	p.poolBaseDo.DO = *(p.poolBaseDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *poolBase) updateTableName(table string) *poolBase {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.SettleTime = field.NewString(table, "settle_time")
	p.EndTime = field.NewString(table, "end_time")
	p.InterestRate = field.NewString(table, "interest_rate")
	p.MaxSupply = field.NewString(table, "max_supply")
	p.LendSupply = field.NewString(table, "lend_supply")
	p.BorrowSupply = field.NewString(table, "borrow_supply")
	p.MartgageRate = field.NewString(table, "martgage_rate")
	p.LendToken = field.NewString(table, "lend_token")
	p.BorrowToken = field.NewString(table, "borrow_token")
	p.State = field.NewString(table, "state")
	p.JpCoin = field.NewString(table, "jp_coin")
	p.SpCoin = field.NewString(table, "sp_coin")
	p.AutoLiquidateThreshold = field.NewString(table, "auto_liquidate_threshold")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.PoolID = field.NewInt32(table, "pool_id")
	p.BorrowTokenInfo = field.NewString(table, "borrow_token_info")
	p.LendTokenInfo = field.NewString(table, "lend_token_info")
	p.ChainID = field.NewString(table, "chain_id")
	p.LendTokenSymbol = field.NewString(table, "lend_token_symbol")
	p.BorrowTokenSymbol = field.NewString(table, "borrow_token_symbol")

	p.fillFieldMap()

	return p
}

func (p *poolBase) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *poolBase) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 22)
	p.fieldMap["id"] = p.ID
	p.fieldMap["settle_time"] = p.SettleTime
	p.fieldMap["end_time"] = p.EndTime
	p.fieldMap["interest_rate"] = p.InterestRate
	p.fieldMap["max_supply"] = p.MaxSupply
	p.fieldMap["lend_supply"] = p.LendSupply
	p.fieldMap["borrow_supply"] = p.BorrowSupply
	p.fieldMap["martgage_rate"] = p.MartgageRate
	p.fieldMap["lend_token"] = p.LendToken
	p.fieldMap["borrow_token"] = p.BorrowToken
	p.fieldMap["state"] = p.State
	p.fieldMap["jp_coin"] = p.JpCoin
	p.fieldMap["sp_coin"] = p.SpCoin
	p.fieldMap["auto_liquidate_threshold"] = p.AutoLiquidateThreshold
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["pool_id"] = p.PoolID
	p.fieldMap["borrow_token_info"] = p.BorrowTokenInfo
	p.fieldMap["lend_token_info"] = p.LendTokenInfo
	p.fieldMap["chain_id"] = p.ChainID
	p.fieldMap["lend_token_symbol"] = p.LendTokenSymbol
	p.fieldMap["borrow_token_symbol"] = p.BorrowTokenSymbol
}

func (p poolBase) clone(db *gorm.DB) poolBase {
	p.poolBaseDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p poolBase) replaceDB(db *gorm.DB) poolBase {
	p.poolBaseDo.ReplaceDB(db)
	return p
}

type poolBaseDo struct{ gen.DO }

type IPoolBaseDo interface {
	gen.SubQuery
	Debug() IPoolBaseDo
	WithContext(ctx context.Context) IPoolBaseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPoolBaseDo
	WriteDB() IPoolBaseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPoolBaseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPoolBaseDo
	Not(conds ...gen.Condition) IPoolBaseDo
	Or(conds ...gen.Condition) IPoolBaseDo
	Select(conds ...field.Expr) IPoolBaseDo
	Where(conds ...gen.Condition) IPoolBaseDo
	Order(conds ...field.Expr) IPoolBaseDo
	Distinct(cols ...field.Expr) IPoolBaseDo
	Omit(cols ...field.Expr) IPoolBaseDo
	Join(table schema.Tabler, on ...field.Expr) IPoolBaseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPoolBaseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPoolBaseDo
	Group(cols ...field.Expr) IPoolBaseDo
	Having(conds ...gen.Condition) IPoolBaseDo
	Limit(limit int) IPoolBaseDo
	Offset(offset int) IPoolBaseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPoolBaseDo
	Unscoped() IPoolBaseDo
	Create(values ...*model.PoolBase) error
	CreateInBatches(values []*model.PoolBase, batchSize int) error
	Save(values ...*model.PoolBase) error
	First() (*model.PoolBase, error)
	Take() (*model.PoolBase, error)
	Last() (*model.PoolBase, error)
	Find() ([]*model.PoolBase, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PoolBase, err error)
	FindInBatches(result *[]*model.PoolBase, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PoolBase) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPoolBaseDo
	Assign(attrs ...field.AssignExpr) IPoolBaseDo
	Joins(fields ...field.RelationField) IPoolBaseDo
	Preload(fields ...field.RelationField) IPoolBaseDo
	FirstOrInit() (*model.PoolBase, error)
	FirstOrCreate() (*model.PoolBase, error)
	FindByPage(offset int, limit int) (result []*model.PoolBase, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPoolBaseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p poolBaseDo) Debug() IPoolBaseDo {
	return p.withDO(p.DO.Debug())
}

func (p poolBaseDo) WithContext(ctx context.Context) IPoolBaseDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p poolBaseDo) ReadDB() IPoolBaseDo {
	return p.Clauses(dbresolver.Read)
}

func (p poolBaseDo) WriteDB() IPoolBaseDo {
	return p.Clauses(dbresolver.Write)
}

func (p poolBaseDo) Session(config *gorm.Session) IPoolBaseDo {
	return p.withDO(p.DO.Session(config))
}

func (p poolBaseDo) Clauses(conds ...clause.Expression) IPoolBaseDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p poolBaseDo) Returning(value interface{}, columns ...string) IPoolBaseDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p poolBaseDo) Not(conds ...gen.Condition) IPoolBaseDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p poolBaseDo) Or(conds ...gen.Condition) IPoolBaseDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p poolBaseDo) Select(conds ...field.Expr) IPoolBaseDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p poolBaseDo) Where(conds ...gen.Condition) IPoolBaseDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p poolBaseDo) Order(conds ...field.Expr) IPoolBaseDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p poolBaseDo) Distinct(cols ...field.Expr) IPoolBaseDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p poolBaseDo) Omit(cols ...field.Expr) IPoolBaseDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p poolBaseDo) Join(table schema.Tabler, on ...field.Expr) IPoolBaseDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p poolBaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPoolBaseDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p poolBaseDo) RightJoin(table schema.Tabler, on ...field.Expr) IPoolBaseDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p poolBaseDo) Group(cols ...field.Expr) IPoolBaseDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p poolBaseDo) Having(conds ...gen.Condition) IPoolBaseDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p poolBaseDo) Limit(limit int) IPoolBaseDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p poolBaseDo) Offset(offset int) IPoolBaseDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p poolBaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPoolBaseDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p poolBaseDo) Unscoped() IPoolBaseDo {
	return p.withDO(p.DO.Unscoped())
}

func (p poolBaseDo) Create(values ...*model.PoolBase) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p poolBaseDo) CreateInBatches(values []*model.PoolBase, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p poolBaseDo) Save(values ...*model.PoolBase) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p poolBaseDo) First() (*model.PoolBase, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolBase), nil
	}
}

func (p poolBaseDo) Take() (*model.PoolBase, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolBase), nil
	}
}

func (p poolBaseDo) Last() (*model.PoolBase, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolBase), nil
	}
}

func (p poolBaseDo) Find() ([]*model.PoolBase, error) {
	result, err := p.DO.Find()
	return result.([]*model.PoolBase), err
}

func (p poolBaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PoolBase, err error) {
	buf := make([]*model.PoolBase, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p poolBaseDo) FindInBatches(result *[]*model.PoolBase, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p poolBaseDo) Attrs(attrs ...field.AssignExpr) IPoolBaseDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p poolBaseDo) Assign(attrs ...field.AssignExpr) IPoolBaseDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p poolBaseDo) Joins(fields ...field.RelationField) IPoolBaseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p poolBaseDo) Preload(fields ...field.RelationField) IPoolBaseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p poolBaseDo) FirstOrInit() (*model.PoolBase, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolBase), nil
	}
}

func (p poolBaseDo) FirstOrCreate() (*model.PoolBase, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PoolBase), nil
	}
}

func (p poolBaseDo) FindByPage(offset int, limit int) (result []*model.PoolBase, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p poolBaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p poolBaseDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p poolBaseDo) Delete(models ...*model.PoolBase) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *poolBaseDo) withDO(do gen.Dao) *poolBaseDo {
	p.DO = *do.(*gen.DO)
	return p
}
