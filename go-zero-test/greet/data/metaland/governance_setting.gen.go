// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newGovernanceSetting(db *gorm.DB, opts ...gen.DOOption) governanceSetting {
	_governanceSetting := governanceSetting{}

	_governanceSetting.governanceSettingDo.UseDB(db, opts...)
	_governanceSetting.governanceSettingDo.UseModel(&model.GovernanceSetting{})

	tableName := _governanceSetting.governanceSettingDo.TableName()
	_governanceSetting.ALL = field.NewAsterisk(tableName)
	_governanceSetting.ID = field.NewInt64(tableName, "id")
	_governanceSetting.StartupID = field.NewInt64(tableName, "startup_id")
	_governanceSetting.ComerID = field.NewInt64(tableName, "comer_id")
	_governanceSetting.VoteSymbol = field.NewString(tableName, "vote_symbol")
	_governanceSetting.AllowMember = field.NewBool(tableName, "allow_member")
	_governanceSetting.ProposalThreshold = field.NewFloat64(tableName, "proposal_threshold")
	_governanceSetting.ProposalValidity = field.NewFloat64(tableName, "proposal_validity")
	_governanceSetting.CreatedAt = field.NewTime(tableName, "created_at")
	_governanceSetting.UpdatedAt = field.NewTime(tableName, "updated_at")
	_governanceSetting.IsDeleted = field.NewBool(tableName, "is_deleted")

	_governanceSetting.fillFieldMap()

	return _governanceSetting
}

type governanceSetting struct {
	governanceSettingDo

	ALL               field.Asterisk
	ID                field.Int64
	StartupID         field.Int64
	ComerID           field.Int64
	VoteSymbol        field.String
	AllowMember       field.Bool // 0:no  1:yes
	ProposalThreshold field.Float64
	ProposalValidity  field.Float64
	CreatedAt         field.Time
	UpdatedAt         field.Time
	IsDeleted         field.Bool

	fieldMap map[string]field.Expr
}

func (g governanceSetting) Table(newTableName string) *governanceSetting {
	g.governanceSettingDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g governanceSetting) As(alias string) *governanceSetting {
	g.governanceSettingDo.DO = *(g.governanceSettingDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *governanceSetting) updateTableName(table string) *governanceSetting {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.StartupID = field.NewInt64(table, "startup_id")
	g.ComerID = field.NewInt64(table, "comer_id")
	g.VoteSymbol = field.NewString(table, "vote_symbol")
	g.AllowMember = field.NewBool(table, "allow_member")
	g.ProposalThreshold = field.NewFloat64(table, "proposal_threshold")
	g.ProposalValidity = field.NewFloat64(table, "proposal_validity")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.IsDeleted = field.NewBool(table, "is_deleted")

	g.fillFieldMap()

	return g
}

func (g *governanceSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *governanceSetting) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 10)
	g.fieldMap["id"] = g.ID
	g.fieldMap["startup_id"] = g.StartupID
	g.fieldMap["comer_id"] = g.ComerID
	g.fieldMap["vote_symbol"] = g.VoteSymbol
	g.fieldMap["allow_member"] = g.AllowMember
	g.fieldMap["proposal_threshold"] = g.ProposalThreshold
	g.fieldMap["proposal_validity"] = g.ProposalValidity
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["is_deleted"] = g.IsDeleted
}

func (g governanceSetting) clone(db *gorm.DB) governanceSetting {
	g.governanceSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g governanceSetting) replaceDB(db *gorm.DB) governanceSetting {
	g.governanceSettingDo.ReplaceDB(db)
	return g
}

type governanceSettingDo struct{ gen.DO }

type IGovernanceSettingDo interface {
	gen.SubQuery
	Debug() IGovernanceSettingDo
	WithContext(ctx context.Context) IGovernanceSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGovernanceSettingDo
	WriteDB() IGovernanceSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGovernanceSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGovernanceSettingDo
	Not(conds ...gen.Condition) IGovernanceSettingDo
	Or(conds ...gen.Condition) IGovernanceSettingDo
	Select(conds ...field.Expr) IGovernanceSettingDo
	Where(conds ...gen.Condition) IGovernanceSettingDo
	Order(conds ...field.Expr) IGovernanceSettingDo
	Distinct(cols ...field.Expr) IGovernanceSettingDo
	Omit(cols ...field.Expr) IGovernanceSettingDo
	Join(table schema.Tabler, on ...field.Expr) IGovernanceSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceSettingDo
	Group(cols ...field.Expr) IGovernanceSettingDo
	Having(conds ...gen.Condition) IGovernanceSettingDo
	Limit(limit int) IGovernanceSettingDo
	Offset(offset int) IGovernanceSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceSettingDo
	Unscoped() IGovernanceSettingDo
	Create(values ...*model.GovernanceSetting) error
	CreateInBatches(values []*model.GovernanceSetting, batchSize int) error
	Save(values ...*model.GovernanceSetting) error
	First() (*model.GovernanceSetting, error)
	Take() (*model.GovernanceSetting, error)
	Last() (*model.GovernanceSetting, error)
	Find() ([]*model.GovernanceSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceSetting, err error)
	FindInBatches(result *[]*model.GovernanceSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GovernanceSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGovernanceSettingDo
	Assign(attrs ...field.AssignExpr) IGovernanceSettingDo
	Joins(fields ...field.RelationField) IGovernanceSettingDo
	Preload(fields ...field.RelationField) IGovernanceSettingDo
	FirstOrInit() (*model.GovernanceSetting, error)
	FirstOrCreate() (*model.GovernanceSetting, error)
	FindByPage(offset int, limit int) (result []*model.GovernanceSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGovernanceSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g governanceSettingDo) Debug() IGovernanceSettingDo {
	return g.withDO(g.DO.Debug())
}

func (g governanceSettingDo) WithContext(ctx context.Context) IGovernanceSettingDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g governanceSettingDo) ReadDB() IGovernanceSettingDo {
	return g.Clauses(dbresolver.Read)
}

func (g governanceSettingDo) WriteDB() IGovernanceSettingDo {
	return g.Clauses(dbresolver.Write)
}

func (g governanceSettingDo) Session(config *gorm.Session) IGovernanceSettingDo {
	return g.withDO(g.DO.Session(config))
}

func (g governanceSettingDo) Clauses(conds ...clause.Expression) IGovernanceSettingDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g governanceSettingDo) Returning(value interface{}, columns ...string) IGovernanceSettingDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g governanceSettingDo) Not(conds ...gen.Condition) IGovernanceSettingDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g governanceSettingDo) Or(conds ...gen.Condition) IGovernanceSettingDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g governanceSettingDo) Select(conds ...field.Expr) IGovernanceSettingDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g governanceSettingDo) Where(conds ...gen.Condition) IGovernanceSettingDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g governanceSettingDo) Order(conds ...field.Expr) IGovernanceSettingDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g governanceSettingDo) Distinct(cols ...field.Expr) IGovernanceSettingDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g governanceSettingDo) Omit(cols ...field.Expr) IGovernanceSettingDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g governanceSettingDo) Join(table schema.Tabler, on ...field.Expr) IGovernanceSettingDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g governanceSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceSettingDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g governanceSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceSettingDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g governanceSettingDo) Group(cols ...field.Expr) IGovernanceSettingDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g governanceSettingDo) Having(conds ...gen.Condition) IGovernanceSettingDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g governanceSettingDo) Limit(limit int) IGovernanceSettingDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g governanceSettingDo) Offset(offset int) IGovernanceSettingDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g governanceSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceSettingDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g governanceSettingDo) Unscoped() IGovernanceSettingDo {
	return g.withDO(g.DO.Unscoped())
}

func (g governanceSettingDo) Create(values ...*model.GovernanceSetting) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g governanceSettingDo) CreateInBatches(values []*model.GovernanceSetting, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g governanceSettingDo) Save(values ...*model.GovernanceSetting) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g governanceSettingDo) First() (*model.GovernanceSetting, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceSetting), nil
	}
}

func (g governanceSettingDo) Take() (*model.GovernanceSetting, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceSetting), nil
	}
}

func (g governanceSettingDo) Last() (*model.GovernanceSetting, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceSetting), nil
	}
}

func (g governanceSettingDo) Find() ([]*model.GovernanceSetting, error) {
	result, err := g.DO.Find()
	return result.([]*model.GovernanceSetting), err
}

func (g governanceSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceSetting, err error) {
	buf := make([]*model.GovernanceSetting, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g governanceSettingDo) FindInBatches(result *[]*model.GovernanceSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g governanceSettingDo) Attrs(attrs ...field.AssignExpr) IGovernanceSettingDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g governanceSettingDo) Assign(attrs ...field.AssignExpr) IGovernanceSettingDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g governanceSettingDo) Joins(fields ...field.RelationField) IGovernanceSettingDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g governanceSettingDo) Preload(fields ...field.RelationField) IGovernanceSettingDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g governanceSettingDo) FirstOrInit() (*model.GovernanceSetting, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceSetting), nil
	}
}

func (g governanceSettingDo) FirstOrCreate() (*model.GovernanceSetting, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceSetting), nil
	}
}

func (g governanceSettingDo) FindByPage(offset int, limit int) (result []*model.GovernanceSetting, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g governanceSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g governanceSettingDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g governanceSettingDo) Delete(models ...*model.GovernanceSetting) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *governanceSettingDo) withDO(do gen.Dao) *governanceSettingDo {
	g.DO = *do.(*gen.DO)
	return g
}
