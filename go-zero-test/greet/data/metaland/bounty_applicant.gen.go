// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newBountyApplicant(db *gorm.DB, opts ...gen.DOOption) bountyApplicant {
	_bountyApplicant := bountyApplicant{}

	_bountyApplicant.bountyApplicantDo.UseDB(db, opts...)
	_bountyApplicant.bountyApplicantDo.UseModel(&model.BountyApplicant{})

	tableName := _bountyApplicant.bountyApplicantDo.TableName()
	_bountyApplicant.ALL = field.NewAsterisk(tableName)
	_bountyApplicant.ID = field.NewInt64(tableName, "id")
	_bountyApplicant.BountyID = field.NewInt64(tableName, "bounty_id")
	_bountyApplicant.ComerID = field.NewInt64(tableName, "comer_id")
	_bountyApplicant.ApplyAt = field.NewTime(tableName, "apply_at")
	_bountyApplicant.RevokeAt = field.NewTime(tableName, "revoke_at")
	_bountyApplicant.ApproveAt = field.NewTime(tableName, "approve_at")
	_bountyApplicant.QuitAt = field.NewTime(tableName, "quit_at")
	_bountyApplicant.SubmitAt = field.NewTime(tableName, "submit_at")
	_bountyApplicant.Status = field.NewBool(tableName, "status")
	_bountyApplicant.Description = field.NewString(tableName, "description")
	_bountyApplicant.CreatedAt = field.NewTime(tableName, "created_at")
	_bountyApplicant.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bountyApplicant.IsDeleted = field.NewBool(tableName, "is_deleted")

	_bountyApplicant.fillFieldMap()

	return _bountyApplicant
}

type bountyApplicant struct {
	bountyApplicantDo

	ALL         field.Asterisk
	ID          field.Int64
	BountyID    field.Int64
	ComerID     field.Int64
	ApplyAt     field.Time
	RevokeAt    field.Time
	ApproveAt   field.Time
	QuitAt      field.Time
	SubmitAt    field.Time
	Status      field.Bool
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	IsDeleted   field.Bool

	fieldMap map[string]field.Expr
}

func (b bountyApplicant) Table(newTableName string) *bountyApplicant {
	b.bountyApplicantDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bountyApplicant) As(alias string) *bountyApplicant {
	b.bountyApplicantDo.DO = *(b.bountyApplicantDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bountyApplicant) updateTableName(table string) *bountyApplicant {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.BountyID = field.NewInt64(table, "bounty_id")
	b.ComerID = field.NewInt64(table, "comer_id")
	b.ApplyAt = field.NewTime(table, "apply_at")
	b.RevokeAt = field.NewTime(table, "revoke_at")
	b.ApproveAt = field.NewTime(table, "approve_at")
	b.QuitAt = field.NewTime(table, "quit_at")
	b.SubmitAt = field.NewTime(table, "submit_at")
	b.Status = field.NewBool(table, "status")
	b.Description = field.NewString(table, "description")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.IsDeleted = field.NewBool(table, "is_deleted")

	b.fillFieldMap()

	return b
}

func (b *bountyApplicant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bountyApplicant) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["id"] = b.ID
	b.fieldMap["bounty_id"] = b.BountyID
	b.fieldMap["comer_id"] = b.ComerID
	b.fieldMap["apply_at"] = b.ApplyAt
	b.fieldMap["revoke_at"] = b.RevokeAt
	b.fieldMap["approve_at"] = b.ApproveAt
	b.fieldMap["quit_at"] = b.QuitAt
	b.fieldMap["submit_at"] = b.SubmitAt
	b.fieldMap["status"] = b.Status
	b.fieldMap["description"] = b.Description
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["is_deleted"] = b.IsDeleted
}

func (b bountyApplicant) clone(db *gorm.DB) bountyApplicant {
	b.bountyApplicantDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bountyApplicant) replaceDB(db *gorm.DB) bountyApplicant {
	b.bountyApplicantDo.ReplaceDB(db)
	return b
}

type bountyApplicantDo struct{ gen.DO }

type IBountyApplicantDo interface {
	gen.SubQuery
	Debug() IBountyApplicantDo
	WithContext(ctx context.Context) IBountyApplicantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBountyApplicantDo
	WriteDB() IBountyApplicantDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBountyApplicantDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBountyApplicantDo
	Not(conds ...gen.Condition) IBountyApplicantDo
	Or(conds ...gen.Condition) IBountyApplicantDo
	Select(conds ...field.Expr) IBountyApplicantDo
	Where(conds ...gen.Condition) IBountyApplicantDo
	Order(conds ...field.Expr) IBountyApplicantDo
	Distinct(cols ...field.Expr) IBountyApplicantDo
	Omit(cols ...field.Expr) IBountyApplicantDo
	Join(table schema.Tabler, on ...field.Expr) IBountyApplicantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBountyApplicantDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBountyApplicantDo
	Group(cols ...field.Expr) IBountyApplicantDo
	Having(conds ...gen.Condition) IBountyApplicantDo
	Limit(limit int) IBountyApplicantDo
	Offset(offset int) IBountyApplicantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyApplicantDo
	Unscoped() IBountyApplicantDo
	Create(values ...*model.BountyApplicant) error
	CreateInBatches(values []*model.BountyApplicant, batchSize int) error
	Save(values ...*model.BountyApplicant) error
	First() (*model.BountyApplicant, error)
	Take() (*model.BountyApplicant, error)
	Last() (*model.BountyApplicant, error)
	Find() ([]*model.BountyApplicant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyApplicant, err error)
	FindInBatches(result *[]*model.BountyApplicant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BountyApplicant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBountyApplicantDo
	Assign(attrs ...field.AssignExpr) IBountyApplicantDo
	Joins(fields ...field.RelationField) IBountyApplicantDo
	Preload(fields ...field.RelationField) IBountyApplicantDo
	FirstOrInit() (*model.BountyApplicant, error)
	FirstOrCreate() (*model.BountyApplicant, error)
	FindByPage(offset int, limit int) (result []*model.BountyApplicant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBountyApplicantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bountyApplicantDo) Debug() IBountyApplicantDo {
	return b.withDO(b.DO.Debug())
}

func (b bountyApplicantDo) WithContext(ctx context.Context) IBountyApplicantDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bountyApplicantDo) ReadDB() IBountyApplicantDo {
	return b.Clauses(dbresolver.Read)
}

func (b bountyApplicantDo) WriteDB() IBountyApplicantDo {
	return b.Clauses(dbresolver.Write)
}

func (b bountyApplicantDo) Session(config *gorm.Session) IBountyApplicantDo {
	return b.withDO(b.DO.Session(config))
}

func (b bountyApplicantDo) Clauses(conds ...clause.Expression) IBountyApplicantDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bountyApplicantDo) Returning(value interface{}, columns ...string) IBountyApplicantDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bountyApplicantDo) Not(conds ...gen.Condition) IBountyApplicantDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bountyApplicantDo) Or(conds ...gen.Condition) IBountyApplicantDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bountyApplicantDo) Select(conds ...field.Expr) IBountyApplicantDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bountyApplicantDo) Where(conds ...gen.Condition) IBountyApplicantDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bountyApplicantDo) Order(conds ...field.Expr) IBountyApplicantDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bountyApplicantDo) Distinct(cols ...field.Expr) IBountyApplicantDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bountyApplicantDo) Omit(cols ...field.Expr) IBountyApplicantDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bountyApplicantDo) Join(table schema.Tabler, on ...field.Expr) IBountyApplicantDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bountyApplicantDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBountyApplicantDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bountyApplicantDo) RightJoin(table schema.Tabler, on ...field.Expr) IBountyApplicantDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bountyApplicantDo) Group(cols ...field.Expr) IBountyApplicantDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bountyApplicantDo) Having(conds ...gen.Condition) IBountyApplicantDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bountyApplicantDo) Limit(limit int) IBountyApplicantDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bountyApplicantDo) Offset(offset int) IBountyApplicantDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bountyApplicantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyApplicantDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bountyApplicantDo) Unscoped() IBountyApplicantDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bountyApplicantDo) Create(values ...*model.BountyApplicant) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bountyApplicantDo) CreateInBatches(values []*model.BountyApplicant, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bountyApplicantDo) Save(values ...*model.BountyApplicant) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bountyApplicantDo) First() (*model.BountyApplicant, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyApplicant), nil
	}
}

func (b bountyApplicantDo) Take() (*model.BountyApplicant, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyApplicant), nil
	}
}

func (b bountyApplicantDo) Last() (*model.BountyApplicant, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyApplicant), nil
	}
}

func (b bountyApplicantDo) Find() ([]*model.BountyApplicant, error) {
	result, err := b.DO.Find()
	return result.([]*model.BountyApplicant), err
}

func (b bountyApplicantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyApplicant, err error) {
	buf := make([]*model.BountyApplicant, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bountyApplicantDo) FindInBatches(result *[]*model.BountyApplicant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bountyApplicantDo) Attrs(attrs ...field.AssignExpr) IBountyApplicantDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bountyApplicantDo) Assign(attrs ...field.AssignExpr) IBountyApplicantDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bountyApplicantDo) Joins(fields ...field.RelationField) IBountyApplicantDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bountyApplicantDo) Preload(fields ...field.RelationField) IBountyApplicantDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bountyApplicantDo) FirstOrInit() (*model.BountyApplicant, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyApplicant), nil
	}
}

func (b bountyApplicantDo) FirstOrCreate() (*model.BountyApplicant, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyApplicant), nil
	}
}

func (b bountyApplicantDo) FindByPage(offset int, limit int) (result []*model.BountyApplicant, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bountyApplicantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bountyApplicantDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bountyApplicantDo) Delete(models ...*model.BountyApplicant) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bountyApplicantDo) withDO(do gen.Dao) *bountyApplicantDo {
	b.DO = *do.(*gen.DO)
	return b
}
