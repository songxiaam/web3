// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newBountyContact(db *gorm.DB, opts ...gen.DOOption) bountyContact {
	_bountyContact := bountyContact{}

	_bountyContact.bountyContactDo.UseDB(db, opts...)
	_bountyContact.bountyContactDo.UseModel(&model.BountyContact{})

	tableName := _bountyContact.bountyContactDo.TableName()
	_bountyContact.ALL = field.NewAsterisk(tableName)
	_bountyContact.ID = field.NewInt64(tableName, "id")
	_bountyContact.BountyID = field.NewInt64(tableName, "bounty_id")
	_bountyContact.ContactType = field.NewInt32(tableName, "contact_type")
	_bountyContact.ContactAddress = field.NewString(tableName, "contact_address")
	_bountyContact.CreatedAt = field.NewTime(tableName, "created_at")
	_bountyContact.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bountyContact.IsDeleted = field.NewBool(tableName, "is_deleted")

	_bountyContact.fillFieldMap()

	return _bountyContact
}

type bountyContact struct {
	bountyContactDo

	ALL            field.Asterisk
	ID             field.Int64
	BountyID       field.Int64
	ContactType    field.Int32
	ContactAddress field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	IsDeleted      field.Bool

	fieldMap map[string]field.Expr
}

func (b bountyContact) Table(newTableName string) *bountyContact {
	b.bountyContactDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bountyContact) As(alias string) *bountyContact {
	b.bountyContactDo.DO = *(b.bountyContactDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bountyContact) updateTableName(table string) *bountyContact {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.BountyID = field.NewInt64(table, "bounty_id")
	b.ContactType = field.NewInt32(table, "contact_type")
	b.ContactAddress = field.NewString(table, "contact_address")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.IsDeleted = field.NewBool(table, "is_deleted")

	b.fillFieldMap()

	return b
}

func (b *bountyContact) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bountyContact) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["id"] = b.ID
	b.fieldMap["bounty_id"] = b.BountyID
	b.fieldMap["contact_type"] = b.ContactType
	b.fieldMap["contact_address"] = b.ContactAddress
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["is_deleted"] = b.IsDeleted
}

func (b bountyContact) clone(db *gorm.DB) bountyContact {
	b.bountyContactDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bountyContact) replaceDB(db *gorm.DB) bountyContact {
	b.bountyContactDo.ReplaceDB(db)
	return b
}

type bountyContactDo struct{ gen.DO }

type IBountyContactDo interface {
	gen.SubQuery
	Debug() IBountyContactDo
	WithContext(ctx context.Context) IBountyContactDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBountyContactDo
	WriteDB() IBountyContactDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBountyContactDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBountyContactDo
	Not(conds ...gen.Condition) IBountyContactDo
	Or(conds ...gen.Condition) IBountyContactDo
	Select(conds ...field.Expr) IBountyContactDo
	Where(conds ...gen.Condition) IBountyContactDo
	Order(conds ...field.Expr) IBountyContactDo
	Distinct(cols ...field.Expr) IBountyContactDo
	Omit(cols ...field.Expr) IBountyContactDo
	Join(table schema.Tabler, on ...field.Expr) IBountyContactDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBountyContactDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBountyContactDo
	Group(cols ...field.Expr) IBountyContactDo
	Having(conds ...gen.Condition) IBountyContactDo
	Limit(limit int) IBountyContactDo
	Offset(offset int) IBountyContactDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyContactDo
	Unscoped() IBountyContactDo
	Create(values ...*model.BountyContact) error
	CreateInBatches(values []*model.BountyContact, batchSize int) error
	Save(values ...*model.BountyContact) error
	First() (*model.BountyContact, error)
	Take() (*model.BountyContact, error)
	Last() (*model.BountyContact, error)
	Find() ([]*model.BountyContact, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyContact, err error)
	FindInBatches(result *[]*model.BountyContact, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BountyContact) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBountyContactDo
	Assign(attrs ...field.AssignExpr) IBountyContactDo
	Joins(fields ...field.RelationField) IBountyContactDo
	Preload(fields ...field.RelationField) IBountyContactDo
	FirstOrInit() (*model.BountyContact, error)
	FirstOrCreate() (*model.BountyContact, error)
	FindByPage(offset int, limit int) (result []*model.BountyContact, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBountyContactDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bountyContactDo) Debug() IBountyContactDo {
	return b.withDO(b.DO.Debug())
}

func (b bountyContactDo) WithContext(ctx context.Context) IBountyContactDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bountyContactDo) ReadDB() IBountyContactDo {
	return b.Clauses(dbresolver.Read)
}

func (b bountyContactDo) WriteDB() IBountyContactDo {
	return b.Clauses(dbresolver.Write)
}

func (b bountyContactDo) Session(config *gorm.Session) IBountyContactDo {
	return b.withDO(b.DO.Session(config))
}

func (b bountyContactDo) Clauses(conds ...clause.Expression) IBountyContactDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bountyContactDo) Returning(value interface{}, columns ...string) IBountyContactDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bountyContactDo) Not(conds ...gen.Condition) IBountyContactDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bountyContactDo) Or(conds ...gen.Condition) IBountyContactDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bountyContactDo) Select(conds ...field.Expr) IBountyContactDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bountyContactDo) Where(conds ...gen.Condition) IBountyContactDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bountyContactDo) Order(conds ...field.Expr) IBountyContactDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bountyContactDo) Distinct(cols ...field.Expr) IBountyContactDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bountyContactDo) Omit(cols ...field.Expr) IBountyContactDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bountyContactDo) Join(table schema.Tabler, on ...field.Expr) IBountyContactDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bountyContactDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBountyContactDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bountyContactDo) RightJoin(table schema.Tabler, on ...field.Expr) IBountyContactDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bountyContactDo) Group(cols ...field.Expr) IBountyContactDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bountyContactDo) Having(conds ...gen.Condition) IBountyContactDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bountyContactDo) Limit(limit int) IBountyContactDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bountyContactDo) Offset(offset int) IBountyContactDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bountyContactDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyContactDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bountyContactDo) Unscoped() IBountyContactDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bountyContactDo) Create(values ...*model.BountyContact) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bountyContactDo) CreateInBatches(values []*model.BountyContact, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bountyContactDo) Save(values ...*model.BountyContact) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bountyContactDo) First() (*model.BountyContact, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyContact), nil
	}
}

func (b bountyContactDo) Take() (*model.BountyContact, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyContact), nil
	}
}

func (b bountyContactDo) Last() (*model.BountyContact, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyContact), nil
	}
}

func (b bountyContactDo) Find() ([]*model.BountyContact, error) {
	result, err := b.DO.Find()
	return result.([]*model.BountyContact), err
}

func (b bountyContactDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyContact, err error) {
	buf := make([]*model.BountyContact, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bountyContactDo) FindInBatches(result *[]*model.BountyContact, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bountyContactDo) Attrs(attrs ...field.AssignExpr) IBountyContactDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bountyContactDo) Assign(attrs ...field.AssignExpr) IBountyContactDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bountyContactDo) Joins(fields ...field.RelationField) IBountyContactDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bountyContactDo) Preload(fields ...field.RelationField) IBountyContactDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bountyContactDo) FirstOrInit() (*model.BountyContact, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyContact), nil
	}
}

func (b bountyContactDo) FirstOrCreate() (*model.BountyContact, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyContact), nil
	}
}

func (b bountyContactDo) FindByPage(offset int, limit int) (result []*model.BountyContact, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bountyContactDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bountyContactDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bountyContactDo) Delete(models ...*model.BountyContact) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bountyContactDo) withDO(do gen.Dao) *bountyContactDo {
	b.DO = *do.(*gen.DO)
	return b
}
