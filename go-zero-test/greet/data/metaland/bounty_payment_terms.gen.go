// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newBountyPaymentTerm(db *gorm.DB, opts ...gen.DOOption) bountyPaymentTerm {
	_bountyPaymentTerm := bountyPaymentTerm{}

	_bountyPaymentTerm.bountyPaymentTermDo.UseDB(db, opts...)
	_bountyPaymentTerm.bountyPaymentTermDo.UseModel(&model.BountyPaymentTerm{})

	tableName := _bountyPaymentTerm.bountyPaymentTermDo.TableName()
	_bountyPaymentTerm.ALL = field.NewAsterisk(tableName)
	_bountyPaymentTerm.ID = field.NewInt64(tableName, "id")
	_bountyPaymentTerm.BountyID = field.NewInt64(tableName, "bounty_id")
	_bountyPaymentTerm.PaymentMode = field.NewBool(tableName, "payment_mode")
	_bountyPaymentTerm.Token1Symbol = field.NewString(tableName, "token1_symbol")
	_bountyPaymentTerm.Token1Amount = field.NewInt32(tableName, "token1_amount")
	_bountyPaymentTerm.Token2Symbol = field.NewString(tableName, "token2_symbol")
	_bountyPaymentTerm.Token2Amount = field.NewInt32(tableName, "token2_amount")
	_bountyPaymentTerm.Terms = field.NewString(tableName, "terms")
	_bountyPaymentTerm.SeqNum = field.NewInt32(tableName, "seq_num")
	_bountyPaymentTerm.Status = field.NewInt32(tableName, "status")
	_bountyPaymentTerm.CreatedAt = field.NewTime(tableName, "created_at")
	_bountyPaymentTerm.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bountyPaymentTerm.IsDeleted = field.NewBool(tableName, "is_deleted")

	_bountyPaymentTerm.fillFieldMap()

	return _bountyPaymentTerm
}

type bountyPaymentTerm struct {
	bountyPaymentTermDo

	ALL          field.Asterisk
	ID           field.Int64
	BountyID     field.Int64
	PaymentMode  field.Bool
	Token1Symbol field.String
	Token1Amount field.Int32
	Token2Symbol field.String
	Token2Amount field.Int32
	Terms        field.String
	SeqNum       field.Int32
	Status       field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time
	IsDeleted    field.Bool

	fieldMap map[string]field.Expr
}

func (b bountyPaymentTerm) Table(newTableName string) *bountyPaymentTerm {
	b.bountyPaymentTermDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bountyPaymentTerm) As(alias string) *bountyPaymentTerm {
	b.bountyPaymentTermDo.DO = *(b.bountyPaymentTermDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bountyPaymentTerm) updateTableName(table string) *bountyPaymentTerm {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.BountyID = field.NewInt64(table, "bounty_id")
	b.PaymentMode = field.NewBool(table, "payment_mode")
	b.Token1Symbol = field.NewString(table, "token1_symbol")
	b.Token1Amount = field.NewInt32(table, "token1_amount")
	b.Token2Symbol = field.NewString(table, "token2_symbol")
	b.Token2Amount = field.NewInt32(table, "token2_amount")
	b.Terms = field.NewString(table, "terms")
	b.SeqNum = field.NewInt32(table, "seq_num")
	b.Status = field.NewInt32(table, "status")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.IsDeleted = field.NewBool(table, "is_deleted")

	b.fillFieldMap()

	return b
}

func (b *bountyPaymentTerm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bountyPaymentTerm) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["id"] = b.ID
	b.fieldMap["bounty_id"] = b.BountyID
	b.fieldMap["payment_mode"] = b.PaymentMode
	b.fieldMap["token1_symbol"] = b.Token1Symbol
	b.fieldMap["token1_amount"] = b.Token1Amount
	b.fieldMap["token2_symbol"] = b.Token2Symbol
	b.fieldMap["token2_amount"] = b.Token2Amount
	b.fieldMap["terms"] = b.Terms
	b.fieldMap["seq_num"] = b.SeqNum
	b.fieldMap["status"] = b.Status
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["is_deleted"] = b.IsDeleted
}

func (b bountyPaymentTerm) clone(db *gorm.DB) bountyPaymentTerm {
	b.bountyPaymentTermDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bountyPaymentTerm) replaceDB(db *gorm.DB) bountyPaymentTerm {
	b.bountyPaymentTermDo.ReplaceDB(db)
	return b
}

type bountyPaymentTermDo struct{ gen.DO }

type IBountyPaymentTermDo interface {
	gen.SubQuery
	Debug() IBountyPaymentTermDo
	WithContext(ctx context.Context) IBountyPaymentTermDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBountyPaymentTermDo
	WriteDB() IBountyPaymentTermDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBountyPaymentTermDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBountyPaymentTermDo
	Not(conds ...gen.Condition) IBountyPaymentTermDo
	Or(conds ...gen.Condition) IBountyPaymentTermDo
	Select(conds ...field.Expr) IBountyPaymentTermDo
	Where(conds ...gen.Condition) IBountyPaymentTermDo
	Order(conds ...field.Expr) IBountyPaymentTermDo
	Distinct(cols ...field.Expr) IBountyPaymentTermDo
	Omit(cols ...field.Expr) IBountyPaymentTermDo
	Join(table schema.Tabler, on ...field.Expr) IBountyPaymentTermDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBountyPaymentTermDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBountyPaymentTermDo
	Group(cols ...field.Expr) IBountyPaymentTermDo
	Having(conds ...gen.Condition) IBountyPaymentTermDo
	Limit(limit int) IBountyPaymentTermDo
	Offset(offset int) IBountyPaymentTermDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyPaymentTermDo
	Unscoped() IBountyPaymentTermDo
	Create(values ...*model.BountyPaymentTerm) error
	CreateInBatches(values []*model.BountyPaymentTerm, batchSize int) error
	Save(values ...*model.BountyPaymentTerm) error
	First() (*model.BountyPaymentTerm, error)
	Take() (*model.BountyPaymentTerm, error)
	Last() (*model.BountyPaymentTerm, error)
	Find() ([]*model.BountyPaymentTerm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyPaymentTerm, err error)
	FindInBatches(result *[]*model.BountyPaymentTerm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BountyPaymentTerm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBountyPaymentTermDo
	Assign(attrs ...field.AssignExpr) IBountyPaymentTermDo
	Joins(fields ...field.RelationField) IBountyPaymentTermDo
	Preload(fields ...field.RelationField) IBountyPaymentTermDo
	FirstOrInit() (*model.BountyPaymentTerm, error)
	FirstOrCreate() (*model.BountyPaymentTerm, error)
	FindByPage(offset int, limit int) (result []*model.BountyPaymentTerm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBountyPaymentTermDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bountyPaymentTermDo) Debug() IBountyPaymentTermDo {
	return b.withDO(b.DO.Debug())
}

func (b bountyPaymentTermDo) WithContext(ctx context.Context) IBountyPaymentTermDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bountyPaymentTermDo) ReadDB() IBountyPaymentTermDo {
	return b.Clauses(dbresolver.Read)
}

func (b bountyPaymentTermDo) WriteDB() IBountyPaymentTermDo {
	return b.Clauses(dbresolver.Write)
}

func (b bountyPaymentTermDo) Session(config *gorm.Session) IBountyPaymentTermDo {
	return b.withDO(b.DO.Session(config))
}

func (b bountyPaymentTermDo) Clauses(conds ...clause.Expression) IBountyPaymentTermDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bountyPaymentTermDo) Returning(value interface{}, columns ...string) IBountyPaymentTermDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bountyPaymentTermDo) Not(conds ...gen.Condition) IBountyPaymentTermDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bountyPaymentTermDo) Or(conds ...gen.Condition) IBountyPaymentTermDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bountyPaymentTermDo) Select(conds ...field.Expr) IBountyPaymentTermDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bountyPaymentTermDo) Where(conds ...gen.Condition) IBountyPaymentTermDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bountyPaymentTermDo) Order(conds ...field.Expr) IBountyPaymentTermDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bountyPaymentTermDo) Distinct(cols ...field.Expr) IBountyPaymentTermDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bountyPaymentTermDo) Omit(cols ...field.Expr) IBountyPaymentTermDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bountyPaymentTermDo) Join(table schema.Tabler, on ...field.Expr) IBountyPaymentTermDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bountyPaymentTermDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBountyPaymentTermDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bountyPaymentTermDo) RightJoin(table schema.Tabler, on ...field.Expr) IBountyPaymentTermDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bountyPaymentTermDo) Group(cols ...field.Expr) IBountyPaymentTermDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bountyPaymentTermDo) Having(conds ...gen.Condition) IBountyPaymentTermDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bountyPaymentTermDo) Limit(limit int) IBountyPaymentTermDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bountyPaymentTermDo) Offset(offset int) IBountyPaymentTermDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bountyPaymentTermDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyPaymentTermDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bountyPaymentTermDo) Unscoped() IBountyPaymentTermDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bountyPaymentTermDo) Create(values ...*model.BountyPaymentTerm) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bountyPaymentTermDo) CreateInBatches(values []*model.BountyPaymentTerm, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bountyPaymentTermDo) Save(values ...*model.BountyPaymentTerm) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bountyPaymentTermDo) First() (*model.BountyPaymentTerm, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentTerm), nil
	}
}

func (b bountyPaymentTermDo) Take() (*model.BountyPaymentTerm, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentTerm), nil
	}
}

func (b bountyPaymentTermDo) Last() (*model.BountyPaymentTerm, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentTerm), nil
	}
}

func (b bountyPaymentTermDo) Find() ([]*model.BountyPaymentTerm, error) {
	result, err := b.DO.Find()
	return result.([]*model.BountyPaymentTerm), err
}

func (b bountyPaymentTermDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyPaymentTerm, err error) {
	buf := make([]*model.BountyPaymentTerm, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bountyPaymentTermDo) FindInBatches(result *[]*model.BountyPaymentTerm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bountyPaymentTermDo) Attrs(attrs ...field.AssignExpr) IBountyPaymentTermDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bountyPaymentTermDo) Assign(attrs ...field.AssignExpr) IBountyPaymentTermDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bountyPaymentTermDo) Joins(fields ...field.RelationField) IBountyPaymentTermDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bountyPaymentTermDo) Preload(fields ...field.RelationField) IBountyPaymentTermDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bountyPaymentTermDo) FirstOrInit() (*model.BountyPaymentTerm, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentTerm), nil
	}
}

func (b bountyPaymentTermDo) FirstOrCreate() (*model.BountyPaymentTerm, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentTerm), nil
	}
}

func (b bountyPaymentTermDo) FindByPage(offset int, limit int) (result []*model.BountyPaymentTerm, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bountyPaymentTermDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bountyPaymentTermDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bountyPaymentTermDo) Delete(models ...*model.BountyPaymentTerm) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bountyPaymentTermDo) withDO(do gen.Dao) *bountyPaymentTermDo {
	b.DO = *do.(*gen.DO)
	return b
}
