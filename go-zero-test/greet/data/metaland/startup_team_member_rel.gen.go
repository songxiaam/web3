// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newStartupTeamMemberRel(db *gorm.DB, opts ...gen.DOOption) startupTeamMemberRel {
	_startupTeamMemberRel := startupTeamMemberRel{}

	_startupTeamMemberRel.startupTeamMemberRelDo.UseDB(db, opts...)
	_startupTeamMemberRel.startupTeamMemberRelDo.UseModel(&model.StartupTeamMemberRel{})

	tableName := _startupTeamMemberRel.startupTeamMemberRelDo.TableName()
	_startupTeamMemberRel.ALL = field.NewAsterisk(tableName)
	_startupTeamMemberRel.ID = field.NewInt64(tableName, "id")
	_startupTeamMemberRel.ComerID = field.NewInt64(tableName, "comer_id")
	_startupTeamMemberRel.StartupID = field.NewInt64(tableName, "startup_id")
	_startupTeamMemberRel.Position = field.NewString(tableName, "position")
	_startupTeamMemberRel.CreatedAt = field.NewTime(tableName, "created_at")
	_startupTeamMemberRel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_startupTeamMemberRel.fillFieldMap()

	return _startupTeamMemberRel
}

type startupTeamMemberRel struct {
	startupTeamMemberRelDo

	ALL       field.Asterisk
	ID        field.Int64
	ComerID   field.Int64  // comer_id
	StartupID field.Int64  // startup_id
	Position  field.String // title
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s startupTeamMemberRel) Table(newTableName string) *startupTeamMemberRel {
	s.startupTeamMemberRelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s startupTeamMemberRel) As(alias string) *startupTeamMemberRel {
	s.startupTeamMemberRelDo.DO = *(s.startupTeamMemberRelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *startupTeamMemberRel) updateTableName(table string) *startupTeamMemberRel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ComerID = field.NewInt64(table, "comer_id")
	s.StartupID = field.NewInt64(table, "startup_id")
	s.Position = field.NewString(table, "position")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *startupTeamMemberRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *startupTeamMemberRel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["comer_id"] = s.ComerID
	s.fieldMap["startup_id"] = s.StartupID
	s.fieldMap["position"] = s.Position
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s startupTeamMemberRel) clone(db *gorm.DB) startupTeamMemberRel {
	s.startupTeamMemberRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s startupTeamMemberRel) replaceDB(db *gorm.DB) startupTeamMemberRel {
	s.startupTeamMemberRelDo.ReplaceDB(db)
	return s
}

type startupTeamMemberRelDo struct{ gen.DO }

type IStartupTeamMemberRelDo interface {
	gen.SubQuery
	Debug() IStartupTeamMemberRelDo
	WithContext(ctx context.Context) IStartupTeamMemberRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStartupTeamMemberRelDo
	WriteDB() IStartupTeamMemberRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStartupTeamMemberRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStartupTeamMemberRelDo
	Not(conds ...gen.Condition) IStartupTeamMemberRelDo
	Or(conds ...gen.Condition) IStartupTeamMemberRelDo
	Select(conds ...field.Expr) IStartupTeamMemberRelDo
	Where(conds ...gen.Condition) IStartupTeamMemberRelDo
	Order(conds ...field.Expr) IStartupTeamMemberRelDo
	Distinct(cols ...field.Expr) IStartupTeamMemberRelDo
	Omit(cols ...field.Expr) IStartupTeamMemberRelDo
	Join(table schema.Tabler, on ...field.Expr) IStartupTeamMemberRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStartupTeamMemberRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStartupTeamMemberRelDo
	Group(cols ...field.Expr) IStartupTeamMemberRelDo
	Having(conds ...gen.Condition) IStartupTeamMemberRelDo
	Limit(limit int) IStartupTeamMemberRelDo
	Offset(offset int) IStartupTeamMemberRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupTeamMemberRelDo
	Unscoped() IStartupTeamMemberRelDo
	Create(values ...*model.StartupTeamMemberRel) error
	CreateInBatches(values []*model.StartupTeamMemberRel, batchSize int) error
	Save(values ...*model.StartupTeamMemberRel) error
	First() (*model.StartupTeamMemberRel, error)
	Take() (*model.StartupTeamMemberRel, error)
	Last() (*model.StartupTeamMemberRel, error)
	Find() ([]*model.StartupTeamMemberRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupTeamMemberRel, err error)
	FindInBatches(result *[]*model.StartupTeamMemberRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StartupTeamMemberRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStartupTeamMemberRelDo
	Assign(attrs ...field.AssignExpr) IStartupTeamMemberRelDo
	Joins(fields ...field.RelationField) IStartupTeamMemberRelDo
	Preload(fields ...field.RelationField) IStartupTeamMemberRelDo
	FirstOrInit() (*model.StartupTeamMemberRel, error)
	FirstOrCreate() (*model.StartupTeamMemberRel, error)
	FindByPage(offset int, limit int) (result []*model.StartupTeamMemberRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStartupTeamMemberRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s startupTeamMemberRelDo) Debug() IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Debug())
}

func (s startupTeamMemberRelDo) WithContext(ctx context.Context) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s startupTeamMemberRelDo) ReadDB() IStartupTeamMemberRelDo {
	return s.Clauses(dbresolver.Read)
}

func (s startupTeamMemberRelDo) WriteDB() IStartupTeamMemberRelDo {
	return s.Clauses(dbresolver.Write)
}

func (s startupTeamMemberRelDo) Session(config *gorm.Session) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Session(config))
}

func (s startupTeamMemberRelDo) Clauses(conds ...clause.Expression) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s startupTeamMemberRelDo) Returning(value interface{}, columns ...string) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s startupTeamMemberRelDo) Not(conds ...gen.Condition) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s startupTeamMemberRelDo) Or(conds ...gen.Condition) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s startupTeamMemberRelDo) Select(conds ...field.Expr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s startupTeamMemberRelDo) Where(conds ...gen.Condition) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s startupTeamMemberRelDo) Order(conds ...field.Expr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s startupTeamMemberRelDo) Distinct(cols ...field.Expr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s startupTeamMemberRelDo) Omit(cols ...field.Expr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s startupTeamMemberRelDo) Join(table schema.Tabler, on ...field.Expr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s startupTeamMemberRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s startupTeamMemberRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s startupTeamMemberRelDo) Group(cols ...field.Expr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s startupTeamMemberRelDo) Having(conds ...gen.Condition) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s startupTeamMemberRelDo) Limit(limit int) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s startupTeamMemberRelDo) Offset(offset int) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s startupTeamMemberRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s startupTeamMemberRelDo) Unscoped() IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s startupTeamMemberRelDo) Create(values ...*model.StartupTeamMemberRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s startupTeamMemberRelDo) CreateInBatches(values []*model.StartupTeamMemberRel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s startupTeamMemberRelDo) Save(values ...*model.StartupTeamMemberRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s startupTeamMemberRelDo) First() (*model.StartupTeamMemberRel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupTeamMemberRel), nil
	}
}

func (s startupTeamMemberRelDo) Take() (*model.StartupTeamMemberRel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupTeamMemberRel), nil
	}
}

func (s startupTeamMemberRelDo) Last() (*model.StartupTeamMemberRel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupTeamMemberRel), nil
	}
}

func (s startupTeamMemberRelDo) Find() ([]*model.StartupTeamMemberRel, error) {
	result, err := s.DO.Find()
	return result.([]*model.StartupTeamMemberRel), err
}

func (s startupTeamMemberRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupTeamMemberRel, err error) {
	buf := make([]*model.StartupTeamMemberRel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s startupTeamMemberRelDo) FindInBatches(result *[]*model.StartupTeamMemberRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s startupTeamMemberRelDo) Attrs(attrs ...field.AssignExpr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s startupTeamMemberRelDo) Assign(attrs ...field.AssignExpr) IStartupTeamMemberRelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s startupTeamMemberRelDo) Joins(fields ...field.RelationField) IStartupTeamMemberRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s startupTeamMemberRelDo) Preload(fields ...field.RelationField) IStartupTeamMemberRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s startupTeamMemberRelDo) FirstOrInit() (*model.StartupTeamMemberRel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupTeamMemberRel), nil
	}
}

func (s startupTeamMemberRelDo) FirstOrCreate() (*model.StartupTeamMemberRel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupTeamMemberRel), nil
	}
}

func (s startupTeamMemberRelDo) FindByPage(offset int, limit int) (result []*model.StartupTeamMemberRel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s startupTeamMemberRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s startupTeamMemberRelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s startupTeamMemberRelDo) Delete(models ...*model.StartupTeamMemberRel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *startupTeamMemberRelDo) withDO(do gen.Dao) *startupTeamMemberRelDo {
	s.DO = *do.(*gen.DO)
	return s
}
