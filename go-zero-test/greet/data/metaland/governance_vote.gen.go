// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newGovernanceVote(db *gorm.DB, opts ...gen.DOOption) governanceVote {
	_governanceVote := governanceVote{}

	_governanceVote.governanceVoteDo.UseDB(db, opts...)
	_governanceVote.governanceVoteDo.UseModel(&model.GovernanceVote{})

	tableName := _governanceVote.governanceVoteDo.TableName()
	_governanceVote.ALL = field.NewAsterisk(tableName)
	_governanceVote.ID = field.NewInt64(tableName, "id")
	_governanceVote.ProposalID = field.NewInt64(tableName, "proposal_id")
	_governanceVote.VoterComerID = field.NewInt64(tableName, "voter_comer_id")
	_governanceVote.VoterWalletAddress = field.NewString(tableName, "voter_wallet_address")
	_governanceVote.ChoiceItemID = field.NewInt64(tableName, "choice_item_id")
	_governanceVote.ChoiceItemName = field.NewString(tableName, "choice_item_name")
	_governanceVote.Votes = field.NewFloat64(tableName, "votes")
	_governanceVote.IpfsHash = field.NewString(tableName, "ipfs_hash")
	_governanceVote.CreatedAt = field.NewTime(tableName, "created_at")
	_governanceVote.UpdatedAt = field.NewTime(tableName, "updated_at")
	_governanceVote.IsDeleted = field.NewBool(tableName, "is_deleted")

	_governanceVote.fillFieldMap()

	return _governanceVote
}

type governanceVote struct {
	governanceVoteDo

	ALL                field.Asterisk
	ID                 field.Int64
	ProposalID         field.Int64
	VoterComerID       field.Int64
	VoterWalletAddress field.String
	ChoiceItemID       field.Int64
	ChoiceItemName     field.String
	Votes              field.Float64
	IpfsHash           field.String
	CreatedAt          field.Time
	UpdatedAt          field.Time
	IsDeleted          field.Bool

	fieldMap map[string]field.Expr
}

func (g governanceVote) Table(newTableName string) *governanceVote {
	g.governanceVoteDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g governanceVote) As(alias string) *governanceVote {
	g.governanceVoteDo.DO = *(g.governanceVoteDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *governanceVote) updateTableName(table string) *governanceVote {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.ProposalID = field.NewInt64(table, "proposal_id")
	g.VoterComerID = field.NewInt64(table, "voter_comer_id")
	g.VoterWalletAddress = field.NewString(table, "voter_wallet_address")
	g.ChoiceItemID = field.NewInt64(table, "choice_item_id")
	g.ChoiceItemName = field.NewString(table, "choice_item_name")
	g.Votes = field.NewFloat64(table, "votes")
	g.IpfsHash = field.NewString(table, "ipfs_hash")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.IsDeleted = field.NewBool(table, "is_deleted")

	g.fillFieldMap()

	return g
}

func (g *governanceVote) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *governanceVote) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["proposal_id"] = g.ProposalID
	g.fieldMap["voter_comer_id"] = g.VoterComerID
	g.fieldMap["voter_wallet_address"] = g.VoterWalletAddress
	g.fieldMap["choice_item_id"] = g.ChoiceItemID
	g.fieldMap["choice_item_name"] = g.ChoiceItemName
	g.fieldMap["votes"] = g.Votes
	g.fieldMap["ipfs_hash"] = g.IpfsHash
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["is_deleted"] = g.IsDeleted
}

func (g governanceVote) clone(db *gorm.DB) governanceVote {
	g.governanceVoteDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g governanceVote) replaceDB(db *gorm.DB) governanceVote {
	g.governanceVoteDo.ReplaceDB(db)
	return g
}

type governanceVoteDo struct{ gen.DO }

type IGovernanceVoteDo interface {
	gen.SubQuery
	Debug() IGovernanceVoteDo
	WithContext(ctx context.Context) IGovernanceVoteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGovernanceVoteDo
	WriteDB() IGovernanceVoteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGovernanceVoteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGovernanceVoteDo
	Not(conds ...gen.Condition) IGovernanceVoteDo
	Or(conds ...gen.Condition) IGovernanceVoteDo
	Select(conds ...field.Expr) IGovernanceVoteDo
	Where(conds ...gen.Condition) IGovernanceVoteDo
	Order(conds ...field.Expr) IGovernanceVoteDo
	Distinct(cols ...field.Expr) IGovernanceVoteDo
	Omit(cols ...field.Expr) IGovernanceVoteDo
	Join(table schema.Tabler, on ...field.Expr) IGovernanceVoteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceVoteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceVoteDo
	Group(cols ...field.Expr) IGovernanceVoteDo
	Having(conds ...gen.Condition) IGovernanceVoteDo
	Limit(limit int) IGovernanceVoteDo
	Offset(offset int) IGovernanceVoteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceVoteDo
	Unscoped() IGovernanceVoteDo
	Create(values ...*model.GovernanceVote) error
	CreateInBatches(values []*model.GovernanceVote, batchSize int) error
	Save(values ...*model.GovernanceVote) error
	First() (*model.GovernanceVote, error)
	Take() (*model.GovernanceVote, error)
	Last() (*model.GovernanceVote, error)
	Find() ([]*model.GovernanceVote, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceVote, err error)
	FindInBatches(result *[]*model.GovernanceVote, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GovernanceVote) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGovernanceVoteDo
	Assign(attrs ...field.AssignExpr) IGovernanceVoteDo
	Joins(fields ...field.RelationField) IGovernanceVoteDo
	Preload(fields ...field.RelationField) IGovernanceVoteDo
	FirstOrInit() (*model.GovernanceVote, error)
	FirstOrCreate() (*model.GovernanceVote, error)
	FindByPage(offset int, limit int) (result []*model.GovernanceVote, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGovernanceVoteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g governanceVoteDo) Debug() IGovernanceVoteDo {
	return g.withDO(g.DO.Debug())
}

func (g governanceVoteDo) WithContext(ctx context.Context) IGovernanceVoteDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g governanceVoteDo) ReadDB() IGovernanceVoteDo {
	return g.Clauses(dbresolver.Read)
}

func (g governanceVoteDo) WriteDB() IGovernanceVoteDo {
	return g.Clauses(dbresolver.Write)
}

func (g governanceVoteDo) Session(config *gorm.Session) IGovernanceVoteDo {
	return g.withDO(g.DO.Session(config))
}

func (g governanceVoteDo) Clauses(conds ...clause.Expression) IGovernanceVoteDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g governanceVoteDo) Returning(value interface{}, columns ...string) IGovernanceVoteDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g governanceVoteDo) Not(conds ...gen.Condition) IGovernanceVoteDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g governanceVoteDo) Or(conds ...gen.Condition) IGovernanceVoteDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g governanceVoteDo) Select(conds ...field.Expr) IGovernanceVoteDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g governanceVoteDo) Where(conds ...gen.Condition) IGovernanceVoteDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g governanceVoteDo) Order(conds ...field.Expr) IGovernanceVoteDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g governanceVoteDo) Distinct(cols ...field.Expr) IGovernanceVoteDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g governanceVoteDo) Omit(cols ...field.Expr) IGovernanceVoteDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g governanceVoteDo) Join(table schema.Tabler, on ...field.Expr) IGovernanceVoteDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g governanceVoteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceVoteDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g governanceVoteDo) RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceVoteDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g governanceVoteDo) Group(cols ...field.Expr) IGovernanceVoteDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g governanceVoteDo) Having(conds ...gen.Condition) IGovernanceVoteDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g governanceVoteDo) Limit(limit int) IGovernanceVoteDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g governanceVoteDo) Offset(offset int) IGovernanceVoteDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g governanceVoteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceVoteDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g governanceVoteDo) Unscoped() IGovernanceVoteDo {
	return g.withDO(g.DO.Unscoped())
}

func (g governanceVoteDo) Create(values ...*model.GovernanceVote) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g governanceVoteDo) CreateInBatches(values []*model.GovernanceVote, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g governanceVoteDo) Save(values ...*model.GovernanceVote) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g governanceVoteDo) First() (*model.GovernanceVote, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceVote), nil
	}
}

func (g governanceVoteDo) Take() (*model.GovernanceVote, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceVote), nil
	}
}

func (g governanceVoteDo) Last() (*model.GovernanceVote, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceVote), nil
	}
}

func (g governanceVoteDo) Find() ([]*model.GovernanceVote, error) {
	result, err := g.DO.Find()
	return result.([]*model.GovernanceVote), err
}

func (g governanceVoteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceVote, err error) {
	buf := make([]*model.GovernanceVote, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g governanceVoteDo) FindInBatches(result *[]*model.GovernanceVote, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g governanceVoteDo) Attrs(attrs ...field.AssignExpr) IGovernanceVoteDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g governanceVoteDo) Assign(attrs ...field.AssignExpr) IGovernanceVoteDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g governanceVoteDo) Joins(fields ...field.RelationField) IGovernanceVoteDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g governanceVoteDo) Preload(fields ...field.RelationField) IGovernanceVoteDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g governanceVoteDo) FirstOrInit() (*model.GovernanceVote, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceVote), nil
	}
}

func (g governanceVoteDo) FirstOrCreate() (*model.GovernanceVote, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceVote), nil
	}
}

func (g governanceVoteDo) FindByPage(offset int, limit int) (result []*model.GovernanceVote, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g governanceVoteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g governanceVoteDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g governanceVoteDo) Delete(models ...*model.GovernanceVote) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *governanceVoteDo) withDO(do gen.Dao) *governanceVoteDo {
	g.DO = *do.(*gen.DO)
	return g
}
