// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newStartupGroup(db *gorm.DB, opts ...gen.DOOption) startupGroup {
	_startupGroup := startupGroup{}

	_startupGroup.startupGroupDo.UseDB(db, opts...)
	_startupGroup.startupGroupDo.UseModel(&model.StartupGroup{})

	tableName := _startupGroup.startupGroupDo.TableName()
	_startupGroup.ALL = field.NewAsterisk(tableName)
	_startupGroup.ID = field.NewInt64(tableName, "id")
	_startupGroup.ComerID = field.NewInt64(tableName, "comer_id")
	_startupGroup.StartupID = field.NewInt64(tableName, "startup_id")
	_startupGroup.Name = field.NewString(tableName, "name")
	_startupGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_startupGroup.UpdatedAt = field.NewTime(tableName, "updated_at")

	_startupGroup.fillFieldMap()

	return _startupGroup
}

type startupGroup struct {
	startupGroupDo

	ALL       field.Asterisk
	ID        field.Int64
	ComerID   field.Int64  // comer_id
	StartupID field.Int64  // startup_id
	Name      field.String // group name
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s startupGroup) Table(newTableName string) *startupGroup {
	s.startupGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s startupGroup) As(alias string) *startupGroup {
	s.startupGroupDo.DO = *(s.startupGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *startupGroup) updateTableName(table string) *startupGroup {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ComerID = field.NewInt64(table, "comer_id")
	s.StartupID = field.NewInt64(table, "startup_id")
	s.Name = field.NewString(table, "name")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *startupGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *startupGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["comer_id"] = s.ComerID
	s.fieldMap["startup_id"] = s.StartupID
	s.fieldMap["name"] = s.Name
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s startupGroup) clone(db *gorm.DB) startupGroup {
	s.startupGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s startupGroup) replaceDB(db *gorm.DB) startupGroup {
	s.startupGroupDo.ReplaceDB(db)
	return s
}

type startupGroupDo struct{ gen.DO }

type IStartupGroupDo interface {
	gen.SubQuery
	Debug() IStartupGroupDo
	WithContext(ctx context.Context) IStartupGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStartupGroupDo
	WriteDB() IStartupGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStartupGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStartupGroupDo
	Not(conds ...gen.Condition) IStartupGroupDo
	Or(conds ...gen.Condition) IStartupGroupDo
	Select(conds ...field.Expr) IStartupGroupDo
	Where(conds ...gen.Condition) IStartupGroupDo
	Order(conds ...field.Expr) IStartupGroupDo
	Distinct(cols ...field.Expr) IStartupGroupDo
	Omit(cols ...field.Expr) IStartupGroupDo
	Join(table schema.Tabler, on ...field.Expr) IStartupGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStartupGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStartupGroupDo
	Group(cols ...field.Expr) IStartupGroupDo
	Having(conds ...gen.Condition) IStartupGroupDo
	Limit(limit int) IStartupGroupDo
	Offset(offset int) IStartupGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupGroupDo
	Unscoped() IStartupGroupDo
	Create(values ...*model.StartupGroup) error
	CreateInBatches(values []*model.StartupGroup, batchSize int) error
	Save(values ...*model.StartupGroup) error
	First() (*model.StartupGroup, error)
	Take() (*model.StartupGroup, error)
	Last() (*model.StartupGroup, error)
	Find() ([]*model.StartupGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupGroup, err error)
	FindInBatches(result *[]*model.StartupGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StartupGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStartupGroupDo
	Assign(attrs ...field.AssignExpr) IStartupGroupDo
	Joins(fields ...field.RelationField) IStartupGroupDo
	Preload(fields ...field.RelationField) IStartupGroupDo
	FirstOrInit() (*model.StartupGroup, error)
	FirstOrCreate() (*model.StartupGroup, error)
	FindByPage(offset int, limit int) (result []*model.StartupGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStartupGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s startupGroupDo) Debug() IStartupGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s startupGroupDo) WithContext(ctx context.Context) IStartupGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s startupGroupDo) ReadDB() IStartupGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s startupGroupDo) WriteDB() IStartupGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s startupGroupDo) Session(config *gorm.Session) IStartupGroupDo {
	return s.withDO(s.DO.Session(config))
}

func (s startupGroupDo) Clauses(conds ...clause.Expression) IStartupGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s startupGroupDo) Returning(value interface{}, columns ...string) IStartupGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s startupGroupDo) Not(conds ...gen.Condition) IStartupGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s startupGroupDo) Or(conds ...gen.Condition) IStartupGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s startupGroupDo) Select(conds ...field.Expr) IStartupGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s startupGroupDo) Where(conds ...gen.Condition) IStartupGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s startupGroupDo) Order(conds ...field.Expr) IStartupGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s startupGroupDo) Distinct(cols ...field.Expr) IStartupGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s startupGroupDo) Omit(cols ...field.Expr) IStartupGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s startupGroupDo) Join(table schema.Tabler, on ...field.Expr) IStartupGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s startupGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStartupGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s startupGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IStartupGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s startupGroupDo) Group(cols ...field.Expr) IStartupGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s startupGroupDo) Having(conds ...gen.Condition) IStartupGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s startupGroupDo) Limit(limit int) IStartupGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s startupGroupDo) Offset(offset int) IStartupGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s startupGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s startupGroupDo) Unscoped() IStartupGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s startupGroupDo) Create(values ...*model.StartupGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s startupGroupDo) CreateInBatches(values []*model.StartupGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s startupGroupDo) Save(values ...*model.StartupGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s startupGroupDo) First() (*model.StartupGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroup), nil
	}
}

func (s startupGroupDo) Take() (*model.StartupGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroup), nil
	}
}

func (s startupGroupDo) Last() (*model.StartupGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroup), nil
	}
}

func (s startupGroupDo) Find() ([]*model.StartupGroup, error) {
	result, err := s.DO.Find()
	return result.([]*model.StartupGroup), err
}

func (s startupGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupGroup, err error) {
	buf := make([]*model.StartupGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s startupGroupDo) FindInBatches(result *[]*model.StartupGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s startupGroupDo) Attrs(attrs ...field.AssignExpr) IStartupGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s startupGroupDo) Assign(attrs ...field.AssignExpr) IStartupGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s startupGroupDo) Joins(fields ...field.RelationField) IStartupGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s startupGroupDo) Preload(fields ...field.RelationField) IStartupGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s startupGroupDo) FirstOrInit() (*model.StartupGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroup), nil
	}
}

func (s startupGroupDo) FirstOrCreate() (*model.StartupGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroup), nil
	}
}

func (s startupGroupDo) FindByPage(offset int, limit int) (result []*model.StartupGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s startupGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s startupGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s startupGroupDo) Delete(models ...*model.StartupGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *startupGroupDo) withDO(do gen.Dao) *startupGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
