// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newGovernanceChoice(db *gorm.DB, opts ...gen.DOOption) governanceChoice {
	_governanceChoice := governanceChoice{}

	_governanceChoice.governanceChoiceDo.UseDB(db, opts...)
	_governanceChoice.governanceChoiceDo.UseModel(&model.GovernanceChoice{})

	tableName := _governanceChoice.governanceChoiceDo.TableName()
	_governanceChoice.ALL = field.NewAsterisk(tableName)
	_governanceChoice.ID = field.NewInt64(tableName, "id")
	_governanceChoice.ProposalID = field.NewInt64(tableName, "proposal_id")
	_governanceChoice.ItemName = field.NewString(tableName, "item_name")
	_governanceChoice.SeqNum = field.NewInt32(tableName, "seq_num")
	_governanceChoice.CreatedAt = field.NewTime(tableName, "created_at")
	_governanceChoice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_governanceChoice.IsDeleted = field.NewBool(tableName, "is_deleted")

	_governanceChoice.fillFieldMap()

	return _governanceChoice
}

type governanceChoice struct {
	governanceChoiceDo

	ALL        field.Asterisk
	ID         field.Int64
	ProposalID field.Int64
	ItemName   field.String
	SeqNum     field.Int32
	CreatedAt  field.Time
	UpdatedAt  field.Time
	IsDeleted  field.Bool

	fieldMap map[string]field.Expr
}

func (g governanceChoice) Table(newTableName string) *governanceChoice {
	g.governanceChoiceDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g governanceChoice) As(alias string) *governanceChoice {
	g.governanceChoiceDo.DO = *(g.governanceChoiceDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *governanceChoice) updateTableName(table string) *governanceChoice {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.ProposalID = field.NewInt64(table, "proposal_id")
	g.ItemName = field.NewString(table, "item_name")
	g.SeqNum = field.NewInt32(table, "seq_num")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.IsDeleted = field.NewBool(table, "is_deleted")

	g.fillFieldMap()

	return g
}

func (g *governanceChoice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *governanceChoice) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["proposal_id"] = g.ProposalID
	g.fieldMap["item_name"] = g.ItemName
	g.fieldMap["seq_num"] = g.SeqNum
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["is_deleted"] = g.IsDeleted
}

func (g governanceChoice) clone(db *gorm.DB) governanceChoice {
	g.governanceChoiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g governanceChoice) replaceDB(db *gorm.DB) governanceChoice {
	g.governanceChoiceDo.ReplaceDB(db)
	return g
}

type governanceChoiceDo struct{ gen.DO }

type IGovernanceChoiceDo interface {
	gen.SubQuery
	Debug() IGovernanceChoiceDo
	WithContext(ctx context.Context) IGovernanceChoiceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGovernanceChoiceDo
	WriteDB() IGovernanceChoiceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGovernanceChoiceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGovernanceChoiceDo
	Not(conds ...gen.Condition) IGovernanceChoiceDo
	Or(conds ...gen.Condition) IGovernanceChoiceDo
	Select(conds ...field.Expr) IGovernanceChoiceDo
	Where(conds ...gen.Condition) IGovernanceChoiceDo
	Order(conds ...field.Expr) IGovernanceChoiceDo
	Distinct(cols ...field.Expr) IGovernanceChoiceDo
	Omit(cols ...field.Expr) IGovernanceChoiceDo
	Join(table schema.Tabler, on ...field.Expr) IGovernanceChoiceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceChoiceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceChoiceDo
	Group(cols ...field.Expr) IGovernanceChoiceDo
	Having(conds ...gen.Condition) IGovernanceChoiceDo
	Limit(limit int) IGovernanceChoiceDo
	Offset(offset int) IGovernanceChoiceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceChoiceDo
	Unscoped() IGovernanceChoiceDo
	Create(values ...*model.GovernanceChoice) error
	CreateInBatches(values []*model.GovernanceChoice, batchSize int) error
	Save(values ...*model.GovernanceChoice) error
	First() (*model.GovernanceChoice, error)
	Take() (*model.GovernanceChoice, error)
	Last() (*model.GovernanceChoice, error)
	Find() ([]*model.GovernanceChoice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceChoice, err error)
	FindInBatches(result *[]*model.GovernanceChoice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GovernanceChoice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGovernanceChoiceDo
	Assign(attrs ...field.AssignExpr) IGovernanceChoiceDo
	Joins(fields ...field.RelationField) IGovernanceChoiceDo
	Preload(fields ...field.RelationField) IGovernanceChoiceDo
	FirstOrInit() (*model.GovernanceChoice, error)
	FirstOrCreate() (*model.GovernanceChoice, error)
	FindByPage(offset int, limit int) (result []*model.GovernanceChoice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGovernanceChoiceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g governanceChoiceDo) Debug() IGovernanceChoiceDo {
	return g.withDO(g.DO.Debug())
}

func (g governanceChoiceDo) WithContext(ctx context.Context) IGovernanceChoiceDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g governanceChoiceDo) ReadDB() IGovernanceChoiceDo {
	return g.Clauses(dbresolver.Read)
}

func (g governanceChoiceDo) WriteDB() IGovernanceChoiceDo {
	return g.Clauses(dbresolver.Write)
}

func (g governanceChoiceDo) Session(config *gorm.Session) IGovernanceChoiceDo {
	return g.withDO(g.DO.Session(config))
}

func (g governanceChoiceDo) Clauses(conds ...clause.Expression) IGovernanceChoiceDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g governanceChoiceDo) Returning(value interface{}, columns ...string) IGovernanceChoiceDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g governanceChoiceDo) Not(conds ...gen.Condition) IGovernanceChoiceDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g governanceChoiceDo) Or(conds ...gen.Condition) IGovernanceChoiceDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g governanceChoiceDo) Select(conds ...field.Expr) IGovernanceChoiceDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g governanceChoiceDo) Where(conds ...gen.Condition) IGovernanceChoiceDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g governanceChoiceDo) Order(conds ...field.Expr) IGovernanceChoiceDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g governanceChoiceDo) Distinct(cols ...field.Expr) IGovernanceChoiceDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g governanceChoiceDo) Omit(cols ...field.Expr) IGovernanceChoiceDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g governanceChoiceDo) Join(table schema.Tabler, on ...field.Expr) IGovernanceChoiceDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g governanceChoiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceChoiceDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g governanceChoiceDo) RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceChoiceDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g governanceChoiceDo) Group(cols ...field.Expr) IGovernanceChoiceDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g governanceChoiceDo) Having(conds ...gen.Condition) IGovernanceChoiceDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g governanceChoiceDo) Limit(limit int) IGovernanceChoiceDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g governanceChoiceDo) Offset(offset int) IGovernanceChoiceDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g governanceChoiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceChoiceDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g governanceChoiceDo) Unscoped() IGovernanceChoiceDo {
	return g.withDO(g.DO.Unscoped())
}

func (g governanceChoiceDo) Create(values ...*model.GovernanceChoice) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g governanceChoiceDo) CreateInBatches(values []*model.GovernanceChoice, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g governanceChoiceDo) Save(values ...*model.GovernanceChoice) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g governanceChoiceDo) First() (*model.GovernanceChoice, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceChoice), nil
	}
}

func (g governanceChoiceDo) Take() (*model.GovernanceChoice, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceChoice), nil
	}
}

func (g governanceChoiceDo) Last() (*model.GovernanceChoice, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceChoice), nil
	}
}

func (g governanceChoiceDo) Find() ([]*model.GovernanceChoice, error) {
	result, err := g.DO.Find()
	return result.([]*model.GovernanceChoice), err
}

func (g governanceChoiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceChoice, err error) {
	buf := make([]*model.GovernanceChoice, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g governanceChoiceDo) FindInBatches(result *[]*model.GovernanceChoice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g governanceChoiceDo) Attrs(attrs ...field.AssignExpr) IGovernanceChoiceDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g governanceChoiceDo) Assign(attrs ...field.AssignExpr) IGovernanceChoiceDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g governanceChoiceDo) Joins(fields ...field.RelationField) IGovernanceChoiceDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g governanceChoiceDo) Preload(fields ...field.RelationField) IGovernanceChoiceDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g governanceChoiceDo) FirstOrInit() (*model.GovernanceChoice, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceChoice), nil
	}
}

func (g governanceChoiceDo) FirstOrCreate() (*model.GovernanceChoice, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceChoice), nil
	}
}

func (g governanceChoiceDo) FindByPage(offset int, limit int) (result []*model.GovernanceChoice, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g governanceChoiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g governanceChoiceDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g governanceChoiceDo) Delete(models ...*model.GovernanceChoice) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *governanceChoiceDo) withDO(do gen.Dao) *governanceChoiceDo {
	g.DO = *do.(*gen.DO)
	return g
}
