// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newCrowdfundingSwap(db *gorm.DB, opts ...gen.DOOption) crowdfundingSwap {
	_crowdfundingSwap := crowdfundingSwap{}

	_crowdfundingSwap.crowdfundingSwapDo.UseDB(db, opts...)
	_crowdfundingSwap.crowdfundingSwapDo.UseModel(&model.CrowdfundingSwap{})

	tableName := _crowdfundingSwap.crowdfundingSwapDo.TableName()
	_crowdfundingSwap.ALL = field.NewAsterisk(tableName)
	_crowdfundingSwap.ID = field.NewInt64(tableName, "id")
	_crowdfundingSwap.ChainID = field.NewInt64(tableName, "chain_id")
	_crowdfundingSwap.TxHash = field.NewString(tableName, "tx_hash")
	_crowdfundingSwap.Timestamp = field.NewTime(tableName, "timestamp")
	_crowdfundingSwap.Status = field.NewBool(tableName, "status")
	_crowdfundingSwap.CrowdfundingID = field.NewInt64(tableName, "crowdfunding_id")
	_crowdfundingSwap.ComerID = field.NewInt64(tableName, "comer_id")
	_crowdfundingSwap.Access = field.NewBool(tableName, "access")
	_crowdfundingSwap.BuyTokenSymbol = field.NewString(tableName, "buy_token_symbol")
	_crowdfundingSwap.BuyTokenAmount = field.NewFloat64(tableName, "buy_token_amount")
	_crowdfundingSwap.SellTokenSymbol = field.NewString(tableName, "sell_token_symbol")
	_crowdfundingSwap.SellTokenAmount = field.NewFloat64(tableName, "sell_token_amount")
	_crowdfundingSwap.Price = field.NewFloat64(tableName, "price")
	_crowdfundingSwap.CreatedAt = field.NewTime(tableName, "created_at")
	_crowdfundingSwap.UpdatedAt = field.NewTime(tableName, "updated_at")

	_crowdfundingSwap.fillFieldMap()

	return _crowdfundingSwap
}

type crowdfundingSwap struct {
	crowdfundingSwapDo

	ALL             field.Asterisk
	ID              field.Int64
	ChainID         field.Int64  // Chain id
	TxHash          field.String // Tx hash
	Timestamp       field.Time
	Status          field.Bool    // 0:Pending 1:Success 2:Failure
	CrowdfundingID  field.Int64   // Crowdfunding id
	ComerID         field.Int64   // Comer id
	Access          field.Bool    // 1:Invest 2:Withdraw
	BuyTokenSymbol  field.String  // Buy token symbol
	BuyTokenAmount  field.Float64 // Buy token amount
	SellTokenSymbol field.String  // Selling token symbol
	SellTokenAmount field.Float64 // Selling token amount
	Price           field.Float64 // Swap price
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (c crowdfundingSwap) Table(newTableName string) *crowdfundingSwap {
	c.crowdfundingSwapDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c crowdfundingSwap) As(alias string) *crowdfundingSwap {
	c.crowdfundingSwapDo.DO = *(c.crowdfundingSwapDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *crowdfundingSwap) updateTableName(table string) *crowdfundingSwap {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ChainID = field.NewInt64(table, "chain_id")
	c.TxHash = field.NewString(table, "tx_hash")
	c.Timestamp = field.NewTime(table, "timestamp")
	c.Status = field.NewBool(table, "status")
	c.CrowdfundingID = field.NewInt64(table, "crowdfunding_id")
	c.ComerID = field.NewInt64(table, "comer_id")
	c.Access = field.NewBool(table, "access")
	c.BuyTokenSymbol = field.NewString(table, "buy_token_symbol")
	c.BuyTokenAmount = field.NewFloat64(table, "buy_token_amount")
	c.SellTokenSymbol = field.NewString(table, "sell_token_symbol")
	c.SellTokenAmount = field.NewFloat64(table, "sell_token_amount")
	c.Price = field.NewFloat64(table, "price")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *crowdfundingSwap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *crowdfundingSwap) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["chain_id"] = c.ChainID
	c.fieldMap["tx_hash"] = c.TxHash
	c.fieldMap["timestamp"] = c.Timestamp
	c.fieldMap["status"] = c.Status
	c.fieldMap["crowdfunding_id"] = c.CrowdfundingID
	c.fieldMap["comer_id"] = c.ComerID
	c.fieldMap["access"] = c.Access
	c.fieldMap["buy_token_symbol"] = c.BuyTokenSymbol
	c.fieldMap["buy_token_amount"] = c.BuyTokenAmount
	c.fieldMap["sell_token_symbol"] = c.SellTokenSymbol
	c.fieldMap["sell_token_amount"] = c.SellTokenAmount
	c.fieldMap["price"] = c.Price
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c crowdfundingSwap) clone(db *gorm.DB) crowdfundingSwap {
	c.crowdfundingSwapDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c crowdfundingSwap) replaceDB(db *gorm.DB) crowdfundingSwap {
	c.crowdfundingSwapDo.ReplaceDB(db)
	return c
}

type crowdfundingSwapDo struct{ gen.DO }

type ICrowdfundingSwapDo interface {
	gen.SubQuery
	Debug() ICrowdfundingSwapDo
	WithContext(ctx context.Context) ICrowdfundingSwapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICrowdfundingSwapDo
	WriteDB() ICrowdfundingSwapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICrowdfundingSwapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICrowdfundingSwapDo
	Not(conds ...gen.Condition) ICrowdfundingSwapDo
	Or(conds ...gen.Condition) ICrowdfundingSwapDo
	Select(conds ...field.Expr) ICrowdfundingSwapDo
	Where(conds ...gen.Condition) ICrowdfundingSwapDo
	Order(conds ...field.Expr) ICrowdfundingSwapDo
	Distinct(cols ...field.Expr) ICrowdfundingSwapDo
	Omit(cols ...field.Expr) ICrowdfundingSwapDo
	Join(table schema.Tabler, on ...field.Expr) ICrowdfundingSwapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingSwapDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingSwapDo
	Group(cols ...field.Expr) ICrowdfundingSwapDo
	Having(conds ...gen.Condition) ICrowdfundingSwapDo
	Limit(limit int) ICrowdfundingSwapDo
	Offset(offset int) ICrowdfundingSwapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdfundingSwapDo
	Unscoped() ICrowdfundingSwapDo
	Create(values ...*model.CrowdfundingSwap) error
	CreateInBatches(values []*model.CrowdfundingSwap, batchSize int) error
	Save(values ...*model.CrowdfundingSwap) error
	First() (*model.CrowdfundingSwap, error)
	Take() (*model.CrowdfundingSwap, error)
	Last() (*model.CrowdfundingSwap, error)
	Find() ([]*model.CrowdfundingSwap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdfundingSwap, err error)
	FindInBatches(result *[]*model.CrowdfundingSwap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CrowdfundingSwap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICrowdfundingSwapDo
	Assign(attrs ...field.AssignExpr) ICrowdfundingSwapDo
	Joins(fields ...field.RelationField) ICrowdfundingSwapDo
	Preload(fields ...field.RelationField) ICrowdfundingSwapDo
	FirstOrInit() (*model.CrowdfundingSwap, error)
	FirstOrCreate() (*model.CrowdfundingSwap, error)
	FindByPage(offset int, limit int) (result []*model.CrowdfundingSwap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICrowdfundingSwapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c crowdfundingSwapDo) Debug() ICrowdfundingSwapDo {
	return c.withDO(c.DO.Debug())
}

func (c crowdfundingSwapDo) WithContext(ctx context.Context) ICrowdfundingSwapDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c crowdfundingSwapDo) ReadDB() ICrowdfundingSwapDo {
	return c.Clauses(dbresolver.Read)
}

func (c crowdfundingSwapDo) WriteDB() ICrowdfundingSwapDo {
	return c.Clauses(dbresolver.Write)
}

func (c crowdfundingSwapDo) Session(config *gorm.Session) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Session(config))
}

func (c crowdfundingSwapDo) Clauses(conds ...clause.Expression) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c crowdfundingSwapDo) Returning(value interface{}, columns ...string) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c crowdfundingSwapDo) Not(conds ...gen.Condition) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c crowdfundingSwapDo) Or(conds ...gen.Condition) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c crowdfundingSwapDo) Select(conds ...field.Expr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c crowdfundingSwapDo) Where(conds ...gen.Condition) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c crowdfundingSwapDo) Order(conds ...field.Expr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c crowdfundingSwapDo) Distinct(cols ...field.Expr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c crowdfundingSwapDo) Omit(cols ...field.Expr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c crowdfundingSwapDo) Join(table schema.Tabler, on ...field.Expr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c crowdfundingSwapDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c crowdfundingSwapDo) RightJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c crowdfundingSwapDo) Group(cols ...field.Expr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c crowdfundingSwapDo) Having(conds ...gen.Condition) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c crowdfundingSwapDo) Limit(limit int) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c crowdfundingSwapDo) Offset(offset int) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c crowdfundingSwapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c crowdfundingSwapDo) Unscoped() ICrowdfundingSwapDo {
	return c.withDO(c.DO.Unscoped())
}

func (c crowdfundingSwapDo) Create(values ...*model.CrowdfundingSwap) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c crowdfundingSwapDo) CreateInBatches(values []*model.CrowdfundingSwap, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c crowdfundingSwapDo) Save(values ...*model.CrowdfundingSwap) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c crowdfundingSwapDo) First() (*model.CrowdfundingSwap, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingSwap), nil
	}
}

func (c crowdfundingSwapDo) Take() (*model.CrowdfundingSwap, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingSwap), nil
	}
}

func (c crowdfundingSwapDo) Last() (*model.CrowdfundingSwap, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingSwap), nil
	}
}

func (c crowdfundingSwapDo) Find() ([]*model.CrowdfundingSwap, error) {
	result, err := c.DO.Find()
	return result.([]*model.CrowdfundingSwap), err
}

func (c crowdfundingSwapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdfundingSwap, err error) {
	buf := make([]*model.CrowdfundingSwap, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c crowdfundingSwapDo) FindInBatches(result *[]*model.CrowdfundingSwap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c crowdfundingSwapDo) Attrs(attrs ...field.AssignExpr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c crowdfundingSwapDo) Assign(attrs ...field.AssignExpr) ICrowdfundingSwapDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c crowdfundingSwapDo) Joins(fields ...field.RelationField) ICrowdfundingSwapDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c crowdfundingSwapDo) Preload(fields ...field.RelationField) ICrowdfundingSwapDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c crowdfundingSwapDo) FirstOrInit() (*model.CrowdfundingSwap, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingSwap), nil
	}
}

func (c crowdfundingSwapDo) FirstOrCreate() (*model.CrowdfundingSwap, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingSwap), nil
	}
}

func (c crowdfundingSwapDo) FindByPage(offset int, limit int) (result []*model.CrowdfundingSwap, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c crowdfundingSwapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c crowdfundingSwapDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c crowdfundingSwapDo) Delete(models ...*model.CrowdfundingSwap) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *crowdfundingSwapDo) withDO(do gen.Dao) *crowdfundingSwapDo {
	c.DO = *do.(*gen.DO)
	return c
}
