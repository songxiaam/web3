// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newChain(db *gorm.DB, opts ...gen.DOOption) chain {
	_chain := chain{}

	_chain.chainDo.UseDB(db, opts...)
	_chain.chainDo.UseModel(&model.Chain{})

	tableName := _chain.chainDo.TableName()
	_chain.ALL = field.NewAsterisk(tableName)
	_chain.ID = field.NewInt64(tableName, "id")
	_chain.ChainID = field.NewInt64(tableName, "chain_id")
	_chain.Name = field.NewString(tableName, "name")
	_chain.Logo = field.NewString(tableName, "logo")
	_chain.Status = field.NewBool(tableName, "status")
	_chain.CreatedAt = field.NewTime(tableName, "created_at")
	_chain.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chain.IsDeleted = field.NewBool(tableName, "is_deleted")

	_chain.fillFieldMap()

	return _chain
}

type chain struct {
	chainDo

	ALL       field.Asterisk
	ID        field.Int64
	ChainID   field.Int64  // Chain ID
	Name      field.String // Chain name
	Logo      field.String // Chain logo
	Status    field.Bool   // 1-normal, 2-disable
	CreatedAt field.Time
	UpdatedAt field.Time
	IsDeleted field.Bool // Is deleted

	fieldMap map[string]field.Expr
}

func (c chain) Table(newTableName string) *chain {
	c.chainDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chain) As(alias string) *chain {
	c.chainDo.DO = *(c.chainDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chain) updateTableName(table string) *chain {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ChainID = field.NewInt64(table, "chain_id")
	c.Name = field.NewString(table, "name")
	c.Logo = field.NewString(table, "logo")
	c.Status = field.NewBool(table, "status")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *chain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chain) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["chain_id"] = c.ChainID
	c.fieldMap["name"] = c.Name
	c.fieldMap["logo"] = c.Logo
	c.fieldMap["status"] = c.Status
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c chain) clone(db *gorm.DB) chain {
	c.chainDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chain) replaceDB(db *gorm.DB) chain {
	c.chainDo.ReplaceDB(db)
	return c
}

type chainDo struct{ gen.DO }

type IChainDo interface {
	gen.SubQuery
	Debug() IChainDo
	WithContext(ctx context.Context) IChainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChainDo
	WriteDB() IChainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChainDo
	Not(conds ...gen.Condition) IChainDo
	Or(conds ...gen.Condition) IChainDo
	Select(conds ...field.Expr) IChainDo
	Where(conds ...gen.Condition) IChainDo
	Order(conds ...field.Expr) IChainDo
	Distinct(cols ...field.Expr) IChainDo
	Omit(cols ...field.Expr) IChainDo
	Join(table schema.Tabler, on ...field.Expr) IChainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChainDo
	Group(cols ...field.Expr) IChainDo
	Having(conds ...gen.Condition) IChainDo
	Limit(limit int) IChainDo
	Offset(offset int) IChainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChainDo
	Unscoped() IChainDo
	Create(values ...*model.Chain) error
	CreateInBatches(values []*model.Chain, batchSize int) error
	Save(values ...*model.Chain) error
	First() (*model.Chain, error)
	Take() (*model.Chain, error)
	Last() (*model.Chain, error)
	Find() ([]*model.Chain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chain, err error)
	FindInBatches(result *[]*model.Chain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Chain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChainDo
	Assign(attrs ...field.AssignExpr) IChainDo
	Joins(fields ...field.RelationField) IChainDo
	Preload(fields ...field.RelationField) IChainDo
	FirstOrInit() (*model.Chain, error)
	FirstOrCreate() (*model.Chain, error)
	FindByPage(offset int, limit int) (result []*model.Chain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chainDo) Debug() IChainDo {
	return c.withDO(c.DO.Debug())
}

func (c chainDo) WithContext(ctx context.Context) IChainDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chainDo) ReadDB() IChainDo {
	return c.Clauses(dbresolver.Read)
}

func (c chainDo) WriteDB() IChainDo {
	return c.Clauses(dbresolver.Write)
}

func (c chainDo) Session(config *gorm.Session) IChainDo {
	return c.withDO(c.DO.Session(config))
}

func (c chainDo) Clauses(conds ...clause.Expression) IChainDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chainDo) Returning(value interface{}, columns ...string) IChainDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chainDo) Not(conds ...gen.Condition) IChainDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chainDo) Or(conds ...gen.Condition) IChainDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chainDo) Select(conds ...field.Expr) IChainDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chainDo) Where(conds ...gen.Condition) IChainDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chainDo) Order(conds ...field.Expr) IChainDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chainDo) Distinct(cols ...field.Expr) IChainDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chainDo) Omit(cols ...field.Expr) IChainDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chainDo) Join(table schema.Tabler, on ...field.Expr) IChainDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChainDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chainDo) RightJoin(table schema.Tabler, on ...field.Expr) IChainDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chainDo) Group(cols ...field.Expr) IChainDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chainDo) Having(conds ...gen.Condition) IChainDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chainDo) Limit(limit int) IChainDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chainDo) Offset(offset int) IChainDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChainDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chainDo) Unscoped() IChainDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chainDo) Create(values ...*model.Chain) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chainDo) CreateInBatches(values []*model.Chain, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chainDo) Save(values ...*model.Chain) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chainDo) First() (*model.Chain, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chain), nil
	}
}

func (c chainDo) Take() (*model.Chain, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chain), nil
	}
}

func (c chainDo) Last() (*model.Chain, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chain), nil
	}
}

func (c chainDo) Find() ([]*model.Chain, error) {
	result, err := c.DO.Find()
	return result.([]*model.Chain), err
}

func (c chainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chain, err error) {
	buf := make([]*model.Chain, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chainDo) FindInBatches(result *[]*model.Chain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chainDo) Attrs(attrs ...field.AssignExpr) IChainDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chainDo) Assign(attrs ...field.AssignExpr) IChainDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chainDo) Joins(fields ...field.RelationField) IChainDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chainDo) Preload(fields ...field.RelationField) IChainDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chainDo) FirstOrInit() (*model.Chain, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chain), nil
	}
}

func (c chainDo) FirstOrCreate() (*model.Chain, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chain), nil
	}
}

func (c chainDo) FindByPage(offset int, limit int) (result []*model.Chain, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chainDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chainDo) Delete(models ...*model.Chain) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chainDo) withDO(do gen.Dao) *chainDo {
	c.DO = *do.(*gen.DO)
	return c
}
