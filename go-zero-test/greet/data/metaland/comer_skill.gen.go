// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newComerSkill(db *gorm.DB, opts ...gen.DOOption) comerSkill {
	_comerSkill := comerSkill{}

	_comerSkill.comerSkillDo.UseDB(db, opts...)
	_comerSkill.comerSkillDo.UseModel(&model.ComerSkill{})

	tableName := _comerSkill.comerSkillDo.TableName()
	_comerSkill.ALL = field.NewAsterisk(tableName)
	_comerSkill.ID = field.NewInt64(tableName, "id")
	_comerSkill.ComerID = field.NewInt64(tableName, "comer_id")
	_comerSkill.SkillName = field.NewString(tableName, "skill_name")
	_comerSkill.Level = field.NewInt32(tableName, "level")
	_comerSkill.Years = field.NewInt32(tableName, "years")
	_comerSkill.Description = field.NewString(tableName, "description")
	_comerSkill.CreatedAt = field.NewTime(tableName, "created_at")
	_comerSkill.UpdatedAt = field.NewTime(tableName, "updated_at")
	_comerSkill.IsDeleted = field.NewBool(tableName, "is_deleted")

	_comerSkill.fillFieldMap()

	return _comerSkill
}

type comerSkill struct {
	comerSkillDo

	ALL         field.Asterisk
	ID          field.Int64
	ComerID     field.Int64  // 用户ID
	SkillName   field.String // 技能名称
	Level       field.Int32  // 熟练度(1-5)
	Years       field.Int32  // 使用年限
	Description field.String // 描述
	CreatedAt   field.Time
	UpdatedAt   field.Time
	IsDeleted   field.Bool // 是否删除

	fieldMap map[string]field.Expr
}

func (c comerSkill) Table(newTableName string) *comerSkill {
	c.comerSkillDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comerSkill) As(alias string) *comerSkill {
	c.comerSkillDo.DO = *(c.comerSkillDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comerSkill) updateTableName(table string) *comerSkill {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ComerID = field.NewInt64(table, "comer_id")
	c.SkillName = field.NewString(table, "skill_name")
	c.Level = field.NewInt32(table, "level")
	c.Years = field.NewInt32(table, "years")
	c.Description = field.NewString(table, "description")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *comerSkill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comerSkill) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["comer_id"] = c.ComerID
	c.fieldMap["skill_name"] = c.SkillName
	c.fieldMap["level"] = c.Level
	c.fieldMap["years"] = c.Years
	c.fieldMap["description"] = c.Description
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c comerSkill) clone(db *gorm.DB) comerSkill {
	c.comerSkillDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comerSkill) replaceDB(db *gorm.DB) comerSkill {
	c.comerSkillDo.ReplaceDB(db)
	return c
}

type comerSkillDo struct{ gen.DO }

type IComerSkillDo interface {
	gen.SubQuery
	Debug() IComerSkillDo
	WithContext(ctx context.Context) IComerSkillDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComerSkillDo
	WriteDB() IComerSkillDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComerSkillDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComerSkillDo
	Not(conds ...gen.Condition) IComerSkillDo
	Or(conds ...gen.Condition) IComerSkillDo
	Select(conds ...field.Expr) IComerSkillDo
	Where(conds ...gen.Condition) IComerSkillDo
	Order(conds ...field.Expr) IComerSkillDo
	Distinct(cols ...field.Expr) IComerSkillDo
	Omit(cols ...field.Expr) IComerSkillDo
	Join(table schema.Tabler, on ...field.Expr) IComerSkillDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComerSkillDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComerSkillDo
	Group(cols ...field.Expr) IComerSkillDo
	Having(conds ...gen.Condition) IComerSkillDo
	Limit(limit int) IComerSkillDo
	Offset(offset int) IComerSkillDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComerSkillDo
	Unscoped() IComerSkillDo
	Create(values ...*model.ComerSkill) error
	CreateInBatches(values []*model.ComerSkill, batchSize int) error
	Save(values ...*model.ComerSkill) error
	First() (*model.ComerSkill, error)
	Take() (*model.ComerSkill, error)
	Last() (*model.ComerSkill, error)
	Find() ([]*model.ComerSkill, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComerSkill, err error)
	FindInBatches(result *[]*model.ComerSkill, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ComerSkill) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComerSkillDo
	Assign(attrs ...field.AssignExpr) IComerSkillDo
	Joins(fields ...field.RelationField) IComerSkillDo
	Preload(fields ...field.RelationField) IComerSkillDo
	FirstOrInit() (*model.ComerSkill, error)
	FirstOrCreate() (*model.ComerSkill, error)
	FindByPage(offset int, limit int) (result []*model.ComerSkill, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComerSkillDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c comerSkillDo) Debug() IComerSkillDo {
	return c.withDO(c.DO.Debug())
}

func (c comerSkillDo) WithContext(ctx context.Context) IComerSkillDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comerSkillDo) ReadDB() IComerSkillDo {
	return c.Clauses(dbresolver.Read)
}

func (c comerSkillDo) WriteDB() IComerSkillDo {
	return c.Clauses(dbresolver.Write)
}

func (c comerSkillDo) Session(config *gorm.Session) IComerSkillDo {
	return c.withDO(c.DO.Session(config))
}

func (c comerSkillDo) Clauses(conds ...clause.Expression) IComerSkillDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comerSkillDo) Returning(value interface{}, columns ...string) IComerSkillDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comerSkillDo) Not(conds ...gen.Condition) IComerSkillDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comerSkillDo) Or(conds ...gen.Condition) IComerSkillDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comerSkillDo) Select(conds ...field.Expr) IComerSkillDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comerSkillDo) Where(conds ...gen.Condition) IComerSkillDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comerSkillDo) Order(conds ...field.Expr) IComerSkillDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comerSkillDo) Distinct(cols ...field.Expr) IComerSkillDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comerSkillDo) Omit(cols ...field.Expr) IComerSkillDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comerSkillDo) Join(table schema.Tabler, on ...field.Expr) IComerSkillDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comerSkillDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComerSkillDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comerSkillDo) RightJoin(table schema.Tabler, on ...field.Expr) IComerSkillDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comerSkillDo) Group(cols ...field.Expr) IComerSkillDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comerSkillDo) Having(conds ...gen.Condition) IComerSkillDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comerSkillDo) Limit(limit int) IComerSkillDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comerSkillDo) Offset(offset int) IComerSkillDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comerSkillDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComerSkillDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comerSkillDo) Unscoped() IComerSkillDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comerSkillDo) Create(values ...*model.ComerSkill) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comerSkillDo) CreateInBatches(values []*model.ComerSkill, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comerSkillDo) Save(values ...*model.ComerSkill) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comerSkillDo) First() (*model.ComerSkill, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerSkill), nil
	}
}

func (c comerSkillDo) Take() (*model.ComerSkill, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerSkill), nil
	}
}

func (c comerSkillDo) Last() (*model.ComerSkill, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerSkill), nil
	}
}

func (c comerSkillDo) Find() ([]*model.ComerSkill, error) {
	result, err := c.DO.Find()
	return result.([]*model.ComerSkill), err
}

func (c comerSkillDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComerSkill, err error) {
	buf := make([]*model.ComerSkill, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comerSkillDo) FindInBatches(result *[]*model.ComerSkill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comerSkillDo) Attrs(attrs ...field.AssignExpr) IComerSkillDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comerSkillDo) Assign(attrs ...field.AssignExpr) IComerSkillDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comerSkillDo) Joins(fields ...field.RelationField) IComerSkillDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comerSkillDo) Preload(fields ...field.RelationField) IComerSkillDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comerSkillDo) FirstOrInit() (*model.ComerSkill, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerSkill), nil
	}
}

func (c comerSkillDo) FirstOrCreate() (*model.ComerSkill, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerSkill), nil
	}
}

func (c comerSkillDo) FindByPage(offset int, limit int) (result []*model.ComerSkill, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comerSkillDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comerSkillDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comerSkillDo) Delete(models ...*model.ComerSkill) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comerSkillDo) withDO(do gen.Dao) *comerSkillDo {
	c.DO = *do.(*gen.DO)
	return c
}
