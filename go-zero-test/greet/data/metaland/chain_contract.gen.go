// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newChainContract(db *gorm.DB, opts ...gen.DOOption) chainContract {
	_chainContract := chainContract{}

	_chainContract.chainContractDo.UseDB(db, opts...)
	_chainContract.chainContractDo.UseModel(&model.ChainContract{})

	tableName := _chainContract.chainContractDo.TableName()
	_chainContract.ALL = field.NewAsterisk(tableName)
	_chainContract.ID = field.NewInt64(tableName, "id")
	_chainContract.ChainID = field.NewInt64(tableName, "chain_id")
	_chainContract.Address = field.NewString(tableName, "address")
	_chainContract.Project = field.NewBool(tableName, "project")
	_chainContract.Type = field.NewBool(tableName, "type")
	_chainContract.Version = field.NewString(tableName, "version")
	_chainContract.Abi = field.NewString(tableName, "abi")
	_chainContract.CreatedTxHash = field.NewString(tableName, "created_tx_hash")
	_chainContract.CreatedAt = field.NewTime(tableName, "created_at")
	_chainContract.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chainContract.IsDeleted = field.NewBool(tableName, "is_deleted")

	_chainContract.fillFieldMap()

	return _chainContract
}

type chainContract struct {
	chainContractDo

	ALL           field.Asterisk
	ID            field.Int64
	ChainID       field.Int64  // Chain ID
	Address       field.String // Chain contract address
	Project       field.Bool   // 1 Startup, 2 Bounty, 3 Crowdfunding, 4 Gover
	Type          field.Bool   // 1工厂合约、2子合约
	Version       field.String // contract version
	Abi           field.String // abi json
	CreatedTxHash field.String // created tx hash
	CreatedAt     field.Time
	UpdatedAt     field.Time
	IsDeleted     field.Bool // Is deleted

	fieldMap map[string]field.Expr
}

func (c chainContract) Table(newTableName string) *chainContract {
	c.chainContractDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chainContract) As(alias string) *chainContract {
	c.chainContractDo.DO = *(c.chainContractDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chainContract) updateTableName(table string) *chainContract {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ChainID = field.NewInt64(table, "chain_id")
	c.Address = field.NewString(table, "address")
	c.Project = field.NewBool(table, "project")
	c.Type = field.NewBool(table, "type")
	c.Version = field.NewString(table, "version")
	c.Abi = field.NewString(table, "abi")
	c.CreatedTxHash = field.NewString(table, "created_tx_hash")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *chainContract) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chainContract) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["chain_id"] = c.ChainID
	c.fieldMap["address"] = c.Address
	c.fieldMap["project"] = c.Project
	c.fieldMap["type"] = c.Type
	c.fieldMap["version"] = c.Version
	c.fieldMap["abi"] = c.Abi
	c.fieldMap["created_tx_hash"] = c.CreatedTxHash
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c chainContract) clone(db *gorm.DB) chainContract {
	c.chainContractDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chainContract) replaceDB(db *gorm.DB) chainContract {
	c.chainContractDo.ReplaceDB(db)
	return c
}

type chainContractDo struct{ gen.DO }

type IChainContractDo interface {
	gen.SubQuery
	Debug() IChainContractDo
	WithContext(ctx context.Context) IChainContractDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChainContractDo
	WriteDB() IChainContractDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChainContractDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChainContractDo
	Not(conds ...gen.Condition) IChainContractDo
	Or(conds ...gen.Condition) IChainContractDo
	Select(conds ...field.Expr) IChainContractDo
	Where(conds ...gen.Condition) IChainContractDo
	Order(conds ...field.Expr) IChainContractDo
	Distinct(cols ...field.Expr) IChainContractDo
	Omit(cols ...field.Expr) IChainContractDo
	Join(table schema.Tabler, on ...field.Expr) IChainContractDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChainContractDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChainContractDo
	Group(cols ...field.Expr) IChainContractDo
	Having(conds ...gen.Condition) IChainContractDo
	Limit(limit int) IChainContractDo
	Offset(offset int) IChainContractDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChainContractDo
	Unscoped() IChainContractDo
	Create(values ...*model.ChainContract) error
	CreateInBatches(values []*model.ChainContract, batchSize int) error
	Save(values ...*model.ChainContract) error
	First() (*model.ChainContract, error)
	Take() (*model.ChainContract, error)
	Last() (*model.ChainContract, error)
	Find() ([]*model.ChainContract, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChainContract, err error)
	FindInBatches(result *[]*model.ChainContract, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChainContract) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChainContractDo
	Assign(attrs ...field.AssignExpr) IChainContractDo
	Joins(fields ...field.RelationField) IChainContractDo
	Preload(fields ...field.RelationField) IChainContractDo
	FirstOrInit() (*model.ChainContract, error)
	FirstOrCreate() (*model.ChainContract, error)
	FindByPage(offset int, limit int) (result []*model.ChainContract, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChainContractDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chainContractDo) Debug() IChainContractDo {
	return c.withDO(c.DO.Debug())
}

func (c chainContractDo) WithContext(ctx context.Context) IChainContractDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chainContractDo) ReadDB() IChainContractDo {
	return c.Clauses(dbresolver.Read)
}

func (c chainContractDo) WriteDB() IChainContractDo {
	return c.Clauses(dbresolver.Write)
}

func (c chainContractDo) Session(config *gorm.Session) IChainContractDo {
	return c.withDO(c.DO.Session(config))
}

func (c chainContractDo) Clauses(conds ...clause.Expression) IChainContractDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chainContractDo) Returning(value interface{}, columns ...string) IChainContractDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chainContractDo) Not(conds ...gen.Condition) IChainContractDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chainContractDo) Or(conds ...gen.Condition) IChainContractDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chainContractDo) Select(conds ...field.Expr) IChainContractDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chainContractDo) Where(conds ...gen.Condition) IChainContractDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chainContractDo) Order(conds ...field.Expr) IChainContractDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chainContractDo) Distinct(cols ...field.Expr) IChainContractDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chainContractDo) Omit(cols ...field.Expr) IChainContractDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chainContractDo) Join(table schema.Tabler, on ...field.Expr) IChainContractDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chainContractDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChainContractDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chainContractDo) RightJoin(table schema.Tabler, on ...field.Expr) IChainContractDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chainContractDo) Group(cols ...field.Expr) IChainContractDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chainContractDo) Having(conds ...gen.Condition) IChainContractDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chainContractDo) Limit(limit int) IChainContractDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chainContractDo) Offset(offset int) IChainContractDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chainContractDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChainContractDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chainContractDo) Unscoped() IChainContractDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chainContractDo) Create(values ...*model.ChainContract) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chainContractDo) CreateInBatches(values []*model.ChainContract, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chainContractDo) Save(values ...*model.ChainContract) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chainContractDo) First() (*model.ChainContract, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainContract), nil
	}
}

func (c chainContractDo) Take() (*model.ChainContract, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainContract), nil
	}
}

func (c chainContractDo) Last() (*model.ChainContract, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainContract), nil
	}
}

func (c chainContractDo) Find() ([]*model.ChainContract, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChainContract), err
}

func (c chainContractDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChainContract, err error) {
	buf := make([]*model.ChainContract, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chainContractDo) FindInBatches(result *[]*model.ChainContract, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chainContractDo) Attrs(attrs ...field.AssignExpr) IChainContractDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chainContractDo) Assign(attrs ...field.AssignExpr) IChainContractDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chainContractDo) Joins(fields ...field.RelationField) IChainContractDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chainContractDo) Preload(fields ...field.RelationField) IChainContractDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chainContractDo) FirstOrInit() (*model.ChainContract, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainContract), nil
	}
}

func (c chainContractDo) FirstOrCreate() (*model.ChainContract, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainContract), nil
	}
}

func (c chainContractDo) FindByPage(offset int, limit int) (result []*model.ChainContract, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chainContractDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chainContractDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chainContractDo) Delete(models ...*model.ChainContract) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chainContractDo) withDO(do gen.Dao) *chainContractDo {
	c.DO = *do.(*gen.DO)
	return c
}
