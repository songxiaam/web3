// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newStartupFollowRel(db *gorm.DB, opts ...gen.DOOption) startupFollowRel {
	_startupFollowRel := startupFollowRel{}

	_startupFollowRel.startupFollowRelDo.UseDB(db, opts...)
	_startupFollowRel.startupFollowRelDo.UseModel(&model.StartupFollowRel{})

	tableName := _startupFollowRel.startupFollowRelDo.TableName()
	_startupFollowRel.ALL = field.NewAsterisk(tableName)
	_startupFollowRel.ID = field.NewInt64(tableName, "id")
	_startupFollowRel.ComerID = field.NewInt64(tableName, "comer_id")
	_startupFollowRel.StartupID = field.NewInt64(tableName, "startup_id")
	_startupFollowRel.CreatedAt = field.NewTime(tableName, "created_at")
	_startupFollowRel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_startupFollowRel.fillFieldMap()

	return _startupFollowRel
}

type startupFollowRel struct {
	startupFollowRelDo

	ALL       field.Asterisk
	ID        field.Int64
	ComerID   field.Int64 // comer_id
	StartupID field.Int64 // startup_id
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s startupFollowRel) Table(newTableName string) *startupFollowRel {
	s.startupFollowRelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s startupFollowRel) As(alias string) *startupFollowRel {
	s.startupFollowRelDo.DO = *(s.startupFollowRelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *startupFollowRel) updateTableName(table string) *startupFollowRel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ComerID = field.NewInt64(table, "comer_id")
	s.StartupID = field.NewInt64(table, "startup_id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *startupFollowRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *startupFollowRel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["comer_id"] = s.ComerID
	s.fieldMap["startup_id"] = s.StartupID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s startupFollowRel) clone(db *gorm.DB) startupFollowRel {
	s.startupFollowRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s startupFollowRel) replaceDB(db *gorm.DB) startupFollowRel {
	s.startupFollowRelDo.ReplaceDB(db)
	return s
}

type startupFollowRelDo struct{ gen.DO }

type IStartupFollowRelDo interface {
	gen.SubQuery
	Debug() IStartupFollowRelDo
	WithContext(ctx context.Context) IStartupFollowRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStartupFollowRelDo
	WriteDB() IStartupFollowRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStartupFollowRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStartupFollowRelDo
	Not(conds ...gen.Condition) IStartupFollowRelDo
	Or(conds ...gen.Condition) IStartupFollowRelDo
	Select(conds ...field.Expr) IStartupFollowRelDo
	Where(conds ...gen.Condition) IStartupFollowRelDo
	Order(conds ...field.Expr) IStartupFollowRelDo
	Distinct(cols ...field.Expr) IStartupFollowRelDo
	Omit(cols ...field.Expr) IStartupFollowRelDo
	Join(table schema.Tabler, on ...field.Expr) IStartupFollowRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStartupFollowRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStartupFollowRelDo
	Group(cols ...field.Expr) IStartupFollowRelDo
	Having(conds ...gen.Condition) IStartupFollowRelDo
	Limit(limit int) IStartupFollowRelDo
	Offset(offset int) IStartupFollowRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupFollowRelDo
	Unscoped() IStartupFollowRelDo
	Create(values ...*model.StartupFollowRel) error
	CreateInBatches(values []*model.StartupFollowRel, batchSize int) error
	Save(values ...*model.StartupFollowRel) error
	First() (*model.StartupFollowRel, error)
	Take() (*model.StartupFollowRel, error)
	Last() (*model.StartupFollowRel, error)
	Find() ([]*model.StartupFollowRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupFollowRel, err error)
	FindInBatches(result *[]*model.StartupFollowRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StartupFollowRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStartupFollowRelDo
	Assign(attrs ...field.AssignExpr) IStartupFollowRelDo
	Joins(fields ...field.RelationField) IStartupFollowRelDo
	Preload(fields ...field.RelationField) IStartupFollowRelDo
	FirstOrInit() (*model.StartupFollowRel, error)
	FirstOrCreate() (*model.StartupFollowRel, error)
	FindByPage(offset int, limit int) (result []*model.StartupFollowRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStartupFollowRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s startupFollowRelDo) Debug() IStartupFollowRelDo {
	return s.withDO(s.DO.Debug())
}

func (s startupFollowRelDo) WithContext(ctx context.Context) IStartupFollowRelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s startupFollowRelDo) ReadDB() IStartupFollowRelDo {
	return s.Clauses(dbresolver.Read)
}

func (s startupFollowRelDo) WriteDB() IStartupFollowRelDo {
	return s.Clauses(dbresolver.Write)
}

func (s startupFollowRelDo) Session(config *gorm.Session) IStartupFollowRelDo {
	return s.withDO(s.DO.Session(config))
}

func (s startupFollowRelDo) Clauses(conds ...clause.Expression) IStartupFollowRelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s startupFollowRelDo) Returning(value interface{}, columns ...string) IStartupFollowRelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s startupFollowRelDo) Not(conds ...gen.Condition) IStartupFollowRelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s startupFollowRelDo) Or(conds ...gen.Condition) IStartupFollowRelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s startupFollowRelDo) Select(conds ...field.Expr) IStartupFollowRelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s startupFollowRelDo) Where(conds ...gen.Condition) IStartupFollowRelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s startupFollowRelDo) Order(conds ...field.Expr) IStartupFollowRelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s startupFollowRelDo) Distinct(cols ...field.Expr) IStartupFollowRelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s startupFollowRelDo) Omit(cols ...field.Expr) IStartupFollowRelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s startupFollowRelDo) Join(table schema.Tabler, on ...field.Expr) IStartupFollowRelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s startupFollowRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStartupFollowRelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s startupFollowRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IStartupFollowRelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s startupFollowRelDo) Group(cols ...field.Expr) IStartupFollowRelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s startupFollowRelDo) Having(conds ...gen.Condition) IStartupFollowRelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s startupFollowRelDo) Limit(limit int) IStartupFollowRelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s startupFollowRelDo) Offset(offset int) IStartupFollowRelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s startupFollowRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupFollowRelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s startupFollowRelDo) Unscoped() IStartupFollowRelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s startupFollowRelDo) Create(values ...*model.StartupFollowRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s startupFollowRelDo) CreateInBatches(values []*model.StartupFollowRel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s startupFollowRelDo) Save(values ...*model.StartupFollowRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s startupFollowRelDo) First() (*model.StartupFollowRel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupFollowRel), nil
	}
}

func (s startupFollowRelDo) Take() (*model.StartupFollowRel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupFollowRel), nil
	}
}

func (s startupFollowRelDo) Last() (*model.StartupFollowRel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupFollowRel), nil
	}
}

func (s startupFollowRelDo) Find() ([]*model.StartupFollowRel, error) {
	result, err := s.DO.Find()
	return result.([]*model.StartupFollowRel), err
}

func (s startupFollowRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupFollowRel, err error) {
	buf := make([]*model.StartupFollowRel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s startupFollowRelDo) FindInBatches(result *[]*model.StartupFollowRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s startupFollowRelDo) Attrs(attrs ...field.AssignExpr) IStartupFollowRelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s startupFollowRelDo) Assign(attrs ...field.AssignExpr) IStartupFollowRelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s startupFollowRelDo) Joins(fields ...field.RelationField) IStartupFollowRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s startupFollowRelDo) Preload(fields ...field.RelationField) IStartupFollowRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s startupFollowRelDo) FirstOrInit() (*model.StartupFollowRel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupFollowRel), nil
	}
}

func (s startupFollowRelDo) FirstOrCreate() (*model.StartupFollowRel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupFollowRel), nil
	}
}

func (s startupFollowRelDo) FindByPage(offset int, limit int) (result []*model.StartupFollowRel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s startupFollowRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s startupFollowRelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s startupFollowRelDo) Delete(models ...*model.StartupFollowRel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *startupFollowRelDo) withDO(do gen.Dao) *startupFollowRelDo {
	s.DO = *do.(*gen.DO)
	return s
}
