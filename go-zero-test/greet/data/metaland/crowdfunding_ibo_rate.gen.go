// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newCrowdfundingIboRate(db *gorm.DB, opts ...gen.DOOption) crowdfundingIboRate {
	_crowdfundingIboRate := crowdfundingIboRate{}

	_crowdfundingIboRate.crowdfundingIboRateDo.UseDB(db, opts...)
	_crowdfundingIboRate.crowdfundingIboRateDo.UseModel(&model.CrowdfundingIboRate{})

	tableName := _crowdfundingIboRate.crowdfundingIboRateDo.TableName()
	_crowdfundingIboRate.ALL = field.NewAsterisk(tableName)
	_crowdfundingIboRate.ID = field.NewInt64(tableName, "id")
	_crowdfundingIboRate.CrowdfundingID = field.NewInt64(tableName, "crowdfunding_id")
	_crowdfundingIboRate.EndTime = field.NewTime(tableName, "end_time")
	_crowdfundingIboRate.MaxBuyAmount = field.NewFloat64(tableName, "max_buy_amount")
	_crowdfundingIboRate.MaxSellPercent = field.NewFloat32(tableName, "max_sell_percent")
	_crowdfundingIboRate.BuyPrice = field.NewFloat64(tableName, "buy_price")
	_crowdfundingIboRate.SwapPercent = field.NewFloat32(tableName, "swap_percent")
	_crowdfundingIboRate.CreatedAt = field.NewTime(tableName, "created_at")
	_crowdfundingIboRate.UpdatedAt = field.NewTime(tableName, "updated_at")

	_crowdfundingIboRate.fillFieldMap()

	return _crowdfundingIboRate
}

type crowdfundingIboRate struct {
	crowdfundingIboRateDo

	ALL            field.Asterisk
	ID             field.Int64
	CrowdfundingID field.Int64   // Crowdfunding id
	EndTime        field.Time    // End time
	MaxBuyAmount   field.Float64 // Maximum buy amount
	MaxSellPercent field.Float32 // Maximum sell percent
	BuyPrice       field.Float64 // IBO rate
	SwapPercent    field.Float32 // Swap percent
	CreatedAt      field.Time
	UpdatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (c crowdfundingIboRate) Table(newTableName string) *crowdfundingIboRate {
	c.crowdfundingIboRateDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c crowdfundingIboRate) As(alias string) *crowdfundingIboRate {
	c.crowdfundingIboRateDo.DO = *(c.crowdfundingIboRateDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *crowdfundingIboRate) updateTableName(table string) *crowdfundingIboRate {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CrowdfundingID = field.NewInt64(table, "crowdfunding_id")
	c.EndTime = field.NewTime(table, "end_time")
	c.MaxBuyAmount = field.NewFloat64(table, "max_buy_amount")
	c.MaxSellPercent = field.NewFloat32(table, "max_sell_percent")
	c.BuyPrice = field.NewFloat64(table, "buy_price")
	c.SwapPercent = field.NewFloat32(table, "swap_percent")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *crowdfundingIboRate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *crowdfundingIboRate) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["crowdfunding_id"] = c.CrowdfundingID
	c.fieldMap["end_time"] = c.EndTime
	c.fieldMap["max_buy_amount"] = c.MaxBuyAmount
	c.fieldMap["max_sell_percent"] = c.MaxSellPercent
	c.fieldMap["buy_price"] = c.BuyPrice
	c.fieldMap["swap_percent"] = c.SwapPercent
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c crowdfundingIboRate) clone(db *gorm.DB) crowdfundingIboRate {
	c.crowdfundingIboRateDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c crowdfundingIboRate) replaceDB(db *gorm.DB) crowdfundingIboRate {
	c.crowdfundingIboRateDo.ReplaceDB(db)
	return c
}

type crowdfundingIboRateDo struct{ gen.DO }

type ICrowdfundingIboRateDo interface {
	gen.SubQuery
	Debug() ICrowdfundingIboRateDo
	WithContext(ctx context.Context) ICrowdfundingIboRateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICrowdfundingIboRateDo
	WriteDB() ICrowdfundingIboRateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICrowdfundingIboRateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICrowdfundingIboRateDo
	Not(conds ...gen.Condition) ICrowdfundingIboRateDo
	Or(conds ...gen.Condition) ICrowdfundingIboRateDo
	Select(conds ...field.Expr) ICrowdfundingIboRateDo
	Where(conds ...gen.Condition) ICrowdfundingIboRateDo
	Order(conds ...field.Expr) ICrowdfundingIboRateDo
	Distinct(cols ...field.Expr) ICrowdfundingIboRateDo
	Omit(cols ...field.Expr) ICrowdfundingIboRateDo
	Join(table schema.Tabler, on ...field.Expr) ICrowdfundingIboRateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingIboRateDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingIboRateDo
	Group(cols ...field.Expr) ICrowdfundingIboRateDo
	Having(conds ...gen.Condition) ICrowdfundingIboRateDo
	Limit(limit int) ICrowdfundingIboRateDo
	Offset(offset int) ICrowdfundingIboRateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdfundingIboRateDo
	Unscoped() ICrowdfundingIboRateDo
	Create(values ...*model.CrowdfundingIboRate) error
	CreateInBatches(values []*model.CrowdfundingIboRate, batchSize int) error
	Save(values ...*model.CrowdfundingIboRate) error
	First() (*model.CrowdfundingIboRate, error)
	Take() (*model.CrowdfundingIboRate, error)
	Last() (*model.CrowdfundingIboRate, error)
	Find() ([]*model.CrowdfundingIboRate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdfundingIboRate, err error)
	FindInBatches(result *[]*model.CrowdfundingIboRate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CrowdfundingIboRate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICrowdfundingIboRateDo
	Assign(attrs ...field.AssignExpr) ICrowdfundingIboRateDo
	Joins(fields ...field.RelationField) ICrowdfundingIboRateDo
	Preload(fields ...field.RelationField) ICrowdfundingIboRateDo
	FirstOrInit() (*model.CrowdfundingIboRate, error)
	FirstOrCreate() (*model.CrowdfundingIboRate, error)
	FindByPage(offset int, limit int) (result []*model.CrowdfundingIboRate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICrowdfundingIboRateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c crowdfundingIboRateDo) Debug() ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Debug())
}

func (c crowdfundingIboRateDo) WithContext(ctx context.Context) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c crowdfundingIboRateDo) ReadDB() ICrowdfundingIboRateDo {
	return c.Clauses(dbresolver.Read)
}

func (c crowdfundingIboRateDo) WriteDB() ICrowdfundingIboRateDo {
	return c.Clauses(dbresolver.Write)
}

func (c crowdfundingIboRateDo) Session(config *gorm.Session) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Session(config))
}

func (c crowdfundingIboRateDo) Clauses(conds ...clause.Expression) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c crowdfundingIboRateDo) Returning(value interface{}, columns ...string) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c crowdfundingIboRateDo) Not(conds ...gen.Condition) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c crowdfundingIboRateDo) Or(conds ...gen.Condition) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c crowdfundingIboRateDo) Select(conds ...field.Expr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c crowdfundingIboRateDo) Where(conds ...gen.Condition) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c crowdfundingIboRateDo) Order(conds ...field.Expr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c crowdfundingIboRateDo) Distinct(cols ...field.Expr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c crowdfundingIboRateDo) Omit(cols ...field.Expr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c crowdfundingIboRateDo) Join(table schema.Tabler, on ...field.Expr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c crowdfundingIboRateDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c crowdfundingIboRateDo) RightJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c crowdfundingIboRateDo) Group(cols ...field.Expr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c crowdfundingIboRateDo) Having(conds ...gen.Condition) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c crowdfundingIboRateDo) Limit(limit int) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c crowdfundingIboRateDo) Offset(offset int) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c crowdfundingIboRateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c crowdfundingIboRateDo) Unscoped() ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Unscoped())
}

func (c crowdfundingIboRateDo) Create(values ...*model.CrowdfundingIboRate) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c crowdfundingIboRateDo) CreateInBatches(values []*model.CrowdfundingIboRate, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c crowdfundingIboRateDo) Save(values ...*model.CrowdfundingIboRate) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c crowdfundingIboRateDo) First() (*model.CrowdfundingIboRate, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingIboRate), nil
	}
}

func (c crowdfundingIboRateDo) Take() (*model.CrowdfundingIboRate, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingIboRate), nil
	}
}

func (c crowdfundingIboRateDo) Last() (*model.CrowdfundingIboRate, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingIboRate), nil
	}
}

func (c crowdfundingIboRateDo) Find() ([]*model.CrowdfundingIboRate, error) {
	result, err := c.DO.Find()
	return result.([]*model.CrowdfundingIboRate), err
}

func (c crowdfundingIboRateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdfundingIboRate, err error) {
	buf := make([]*model.CrowdfundingIboRate, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c crowdfundingIboRateDo) FindInBatches(result *[]*model.CrowdfundingIboRate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c crowdfundingIboRateDo) Attrs(attrs ...field.AssignExpr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c crowdfundingIboRateDo) Assign(attrs ...field.AssignExpr) ICrowdfundingIboRateDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c crowdfundingIboRateDo) Joins(fields ...field.RelationField) ICrowdfundingIboRateDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c crowdfundingIboRateDo) Preload(fields ...field.RelationField) ICrowdfundingIboRateDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c crowdfundingIboRateDo) FirstOrInit() (*model.CrowdfundingIboRate, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingIboRate), nil
	}
}

func (c crowdfundingIboRateDo) FirstOrCreate() (*model.CrowdfundingIboRate, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingIboRate), nil
	}
}

func (c crowdfundingIboRateDo) FindByPage(offset int, limit int) (result []*model.CrowdfundingIboRate, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c crowdfundingIboRateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c crowdfundingIboRateDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c crowdfundingIboRateDo) Delete(models ...*model.CrowdfundingIboRate) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *crowdfundingIboRateDo) withDO(do gen.Dao) *crowdfundingIboRateDo {
	c.DO = *do.(*gen.DO)
	return c
}
