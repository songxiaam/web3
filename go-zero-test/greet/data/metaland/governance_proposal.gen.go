// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newGovernanceProposal(db *gorm.DB, opts ...gen.DOOption) governanceProposal {
	_governanceProposal := governanceProposal{}

	_governanceProposal.governanceProposalDo.UseDB(db, opts...)
	_governanceProposal.governanceProposalDo.UseModel(&model.GovernanceProposal{})

	tableName := _governanceProposal.governanceProposalDo.TableName()
	_governanceProposal.ALL = field.NewAsterisk(tableName)
	_governanceProposal.ID = field.NewInt32(tableName, "id")
	_governanceProposal.StartupID = field.NewInt64(tableName, "startup_id")
	_governanceProposal.AuthorComerID = field.NewInt64(tableName, "author_comer_id")
	_governanceProposal.AuthorWalletAddress = field.NewString(tableName, "author_wallet_address")
	_governanceProposal.ChainID = field.NewInt64(tableName, "chain_id")
	_governanceProposal.BlockNumber = field.NewInt64(tableName, "block_number")
	_governanceProposal.ReleaseTimestamp = field.NewTime(tableName, "release_timestamp")
	_governanceProposal.IpfsHash = field.NewString(tableName, "ipfs_hash")
	_governanceProposal.Title = field.NewString(tableName, "title")
	_governanceProposal.Description = field.NewString(tableName, "description")
	_governanceProposal.DiscussionLink = field.NewString(tableName, "discussion_link")
	_governanceProposal.VoteSystem = field.NewString(tableName, "vote_system")
	_governanceProposal.StartTime = field.NewTime(tableName, "start_time")
	_governanceProposal.EndTime = field.NewTime(tableName, "end_time")
	_governanceProposal.Status = field.NewBool(tableName, "status")
	_governanceProposal.CreatedAt = field.NewTime(tableName, "created_at")
	_governanceProposal.UpdatedAt = field.NewTime(tableName, "updated_at")
	_governanceProposal.IsDeleted = field.NewBool(tableName, "is_deleted")

	_governanceProposal.fillFieldMap()

	return _governanceProposal
}

type governanceProposal struct {
	governanceProposalDo

	ALL                 field.Asterisk
	ID                  field.Int32
	StartupID           field.Int64
	AuthorComerID       field.Int64
	AuthorWalletAddress field.String
	ChainID             field.Int64
	BlockNumber         field.Int64
	ReleaseTimestamp    field.Time
	IpfsHash            field.String
	Title               field.String
	Description         field.String
	DiscussionLink      field.String
	VoteSystem          field.String
	StartTime           field.Time
	EndTime             field.Time
	Status              field.Bool // 0:pending 1:upcoming 2:active 3:ended
	CreatedAt           field.Time
	UpdatedAt           field.Time
	IsDeleted           field.Bool

	fieldMap map[string]field.Expr
}

func (g governanceProposal) Table(newTableName string) *governanceProposal {
	g.governanceProposalDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g governanceProposal) As(alias string) *governanceProposal {
	g.governanceProposalDo.DO = *(g.governanceProposalDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *governanceProposal) updateTableName(table string) *governanceProposal {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.StartupID = field.NewInt64(table, "startup_id")
	g.AuthorComerID = field.NewInt64(table, "author_comer_id")
	g.AuthorWalletAddress = field.NewString(table, "author_wallet_address")
	g.ChainID = field.NewInt64(table, "chain_id")
	g.BlockNumber = field.NewInt64(table, "block_number")
	g.ReleaseTimestamp = field.NewTime(table, "release_timestamp")
	g.IpfsHash = field.NewString(table, "ipfs_hash")
	g.Title = field.NewString(table, "title")
	g.Description = field.NewString(table, "description")
	g.DiscussionLink = field.NewString(table, "discussion_link")
	g.VoteSystem = field.NewString(table, "vote_system")
	g.StartTime = field.NewTime(table, "start_time")
	g.EndTime = field.NewTime(table, "end_time")
	g.Status = field.NewBool(table, "status")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.IsDeleted = field.NewBool(table, "is_deleted")

	g.fillFieldMap()

	return g
}

func (g *governanceProposal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *governanceProposal) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 18)
	g.fieldMap["id"] = g.ID
	g.fieldMap["startup_id"] = g.StartupID
	g.fieldMap["author_comer_id"] = g.AuthorComerID
	g.fieldMap["author_wallet_address"] = g.AuthorWalletAddress
	g.fieldMap["chain_id"] = g.ChainID
	g.fieldMap["block_number"] = g.BlockNumber
	g.fieldMap["release_timestamp"] = g.ReleaseTimestamp
	g.fieldMap["ipfs_hash"] = g.IpfsHash
	g.fieldMap["title"] = g.Title
	g.fieldMap["description"] = g.Description
	g.fieldMap["discussion_link"] = g.DiscussionLink
	g.fieldMap["vote_system"] = g.VoteSystem
	g.fieldMap["start_time"] = g.StartTime
	g.fieldMap["end_time"] = g.EndTime
	g.fieldMap["status"] = g.Status
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["is_deleted"] = g.IsDeleted
}

func (g governanceProposal) clone(db *gorm.DB) governanceProposal {
	g.governanceProposalDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g governanceProposal) replaceDB(db *gorm.DB) governanceProposal {
	g.governanceProposalDo.ReplaceDB(db)
	return g
}

type governanceProposalDo struct{ gen.DO }

type IGovernanceProposalDo interface {
	gen.SubQuery
	Debug() IGovernanceProposalDo
	WithContext(ctx context.Context) IGovernanceProposalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGovernanceProposalDo
	WriteDB() IGovernanceProposalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGovernanceProposalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGovernanceProposalDo
	Not(conds ...gen.Condition) IGovernanceProposalDo
	Or(conds ...gen.Condition) IGovernanceProposalDo
	Select(conds ...field.Expr) IGovernanceProposalDo
	Where(conds ...gen.Condition) IGovernanceProposalDo
	Order(conds ...field.Expr) IGovernanceProposalDo
	Distinct(cols ...field.Expr) IGovernanceProposalDo
	Omit(cols ...field.Expr) IGovernanceProposalDo
	Join(table schema.Tabler, on ...field.Expr) IGovernanceProposalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceProposalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceProposalDo
	Group(cols ...field.Expr) IGovernanceProposalDo
	Having(conds ...gen.Condition) IGovernanceProposalDo
	Limit(limit int) IGovernanceProposalDo
	Offset(offset int) IGovernanceProposalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceProposalDo
	Unscoped() IGovernanceProposalDo
	Create(values ...*model.GovernanceProposal) error
	CreateInBatches(values []*model.GovernanceProposal, batchSize int) error
	Save(values ...*model.GovernanceProposal) error
	First() (*model.GovernanceProposal, error)
	Take() (*model.GovernanceProposal, error)
	Last() (*model.GovernanceProposal, error)
	Find() ([]*model.GovernanceProposal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceProposal, err error)
	FindInBatches(result *[]*model.GovernanceProposal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GovernanceProposal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGovernanceProposalDo
	Assign(attrs ...field.AssignExpr) IGovernanceProposalDo
	Joins(fields ...field.RelationField) IGovernanceProposalDo
	Preload(fields ...field.RelationField) IGovernanceProposalDo
	FirstOrInit() (*model.GovernanceProposal, error)
	FirstOrCreate() (*model.GovernanceProposal, error)
	FindByPage(offset int, limit int) (result []*model.GovernanceProposal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGovernanceProposalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g governanceProposalDo) Debug() IGovernanceProposalDo {
	return g.withDO(g.DO.Debug())
}

func (g governanceProposalDo) WithContext(ctx context.Context) IGovernanceProposalDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g governanceProposalDo) ReadDB() IGovernanceProposalDo {
	return g.Clauses(dbresolver.Read)
}

func (g governanceProposalDo) WriteDB() IGovernanceProposalDo {
	return g.Clauses(dbresolver.Write)
}

func (g governanceProposalDo) Session(config *gorm.Session) IGovernanceProposalDo {
	return g.withDO(g.DO.Session(config))
}

func (g governanceProposalDo) Clauses(conds ...clause.Expression) IGovernanceProposalDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g governanceProposalDo) Returning(value interface{}, columns ...string) IGovernanceProposalDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g governanceProposalDo) Not(conds ...gen.Condition) IGovernanceProposalDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g governanceProposalDo) Or(conds ...gen.Condition) IGovernanceProposalDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g governanceProposalDo) Select(conds ...field.Expr) IGovernanceProposalDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g governanceProposalDo) Where(conds ...gen.Condition) IGovernanceProposalDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g governanceProposalDo) Order(conds ...field.Expr) IGovernanceProposalDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g governanceProposalDo) Distinct(cols ...field.Expr) IGovernanceProposalDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g governanceProposalDo) Omit(cols ...field.Expr) IGovernanceProposalDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g governanceProposalDo) Join(table schema.Tabler, on ...field.Expr) IGovernanceProposalDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g governanceProposalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceProposalDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g governanceProposalDo) RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceProposalDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g governanceProposalDo) Group(cols ...field.Expr) IGovernanceProposalDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g governanceProposalDo) Having(conds ...gen.Condition) IGovernanceProposalDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g governanceProposalDo) Limit(limit int) IGovernanceProposalDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g governanceProposalDo) Offset(offset int) IGovernanceProposalDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g governanceProposalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceProposalDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g governanceProposalDo) Unscoped() IGovernanceProposalDo {
	return g.withDO(g.DO.Unscoped())
}

func (g governanceProposalDo) Create(values ...*model.GovernanceProposal) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g governanceProposalDo) CreateInBatches(values []*model.GovernanceProposal, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g governanceProposalDo) Save(values ...*model.GovernanceProposal) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g governanceProposalDo) First() (*model.GovernanceProposal, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceProposal), nil
	}
}

func (g governanceProposalDo) Take() (*model.GovernanceProposal, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceProposal), nil
	}
}

func (g governanceProposalDo) Last() (*model.GovernanceProposal, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceProposal), nil
	}
}

func (g governanceProposalDo) Find() ([]*model.GovernanceProposal, error) {
	result, err := g.DO.Find()
	return result.([]*model.GovernanceProposal), err
}

func (g governanceProposalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceProposal, err error) {
	buf := make([]*model.GovernanceProposal, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g governanceProposalDo) FindInBatches(result *[]*model.GovernanceProposal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g governanceProposalDo) Attrs(attrs ...field.AssignExpr) IGovernanceProposalDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g governanceProposalDo) Assign(attrs ...field.AssignExpr) IGovernanceProposalDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g governanceProposalDo) Joins(fields ...field.RelationField) IGovernanceProposalDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g governanceProposalDo) Preload(fields ...field.RelationField) IGovernanceProposalDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g governanceProposalDo) FirstOrInit() (*model.GovernanceProposal, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceProposal), nil
	}
}

func (g governanceProposalDo) FirstOrCreate() (*model.GovernanceProposal, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceProposal), nil
	}
}

func (g governanceProposalDo) FindByPage(offset int, limit int) (result []*model.GovernanceProposal, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g governanceProposalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g governanceProposalDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g governanceProposalDo) Delete(models ...*model.GovernanceProposal) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *governanceProposalDo) withDO(do gen.Dao) *governanceProposalDo {
	g.DO = *do.(*gen.DO)
	return g
}
