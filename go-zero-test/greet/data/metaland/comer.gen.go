// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newComer(db *gorm.DB, opts ...gen.DOOption) comer {
	_comer := comer{}

	_comer.comerDo.UseDB(db, opts...)
	_comer.comerDo.UseModel(&model.Comer{})

	tableName := _comer.comerDo.TableName()
	_comer.ALL = field.NewAsterisk(tableName)
	_comer.ID = field.NewInt64(tableName, "id")
	_comer.Address = field.NewString(tableName, "address")
	_comer.CreatedAt = field.NewTime(tableName, "created_at")
	_comer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_comer.IsDeleted = field.NewBool(tableName, "is_deleted")

	_comer.fillFieldMap()

	return _comer
}

type comer struct {
	comerDo

	ALL       field.Asterisk
	ID        field.Int64
	Address   field.String // comer could save some useful info on block chain with this address
	CreatedAt field.Time
	UpdatedAt field.Time
	IsDeleted field.Bool // Is Deleted

	fieldMap map[string]field.Expr
}

func (c comer) Table(newTableName string) *comer {
	c.comerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comer) As(alias string) *comer {
	c.comerDo.DO = *(c.comerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comer) updateTableName(table string) *comer {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Address = field.NewString(table, "address")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *comer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["address"] = c.Address
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c comer) clone(db *gorm.DB) comer {
	c.comerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comer) replaceDB(db *gorm.DB) comer {
	c.comerDo.ReplaceDB(db)
	return c
}

type comerDo struct{ gen.DO }

type IComerDo interface {
	gen.SubQuery
	Debug() IComerDo
	WithContext(ctx context.Context) IComerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComerDo
	WriteDB() IComerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComerDo
	Not(conds ...gen.Condition) IComerDo
	Or(conds ...gen.Condition) IComerDo
	Select(conds ...field.Expr) IComerDo
	Where(conds ...gen.Condition) IComerDo
	Order(conds ...field.Expr) IComerDo
	Distinct(cols ...field.Expr) IComerDo
	Omit(cols ...field.Expr) IComerDo
	Join(table schema.Tabler, on ...field.Expr) IComerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComerDo
	Group(cols ...field.Expr) IComerDo
	Having(conds ...gen.Condition) IComerDo
	Limit(limit int) IComerDo
	Offset(offset int) IComerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComerDo
	Unscoped() IComerDo
	Create(values ...*model.Comer) error
	CreateInBatches(values []*model.Comer, batchSize int) error
	Save(values ...*model.Comer) error
	First() (*model.Comer, error)
	Take() (*model.Comer, error)
	Last() (*model.Comer, error)
	Find() ([]*model.Comer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Comer, err error)
	FindInBatches(result *[]*model.Comer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Comer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComerDo
	Assign(attrs ...field.AssignExpr) IComerDo
	Joins(fields ...field.RelationField) IComerDo
	Preload(fields ...field.RelationField) IComerDo
	FirstOrInit() (*model.Comer, error)
	FirstOrCreate() (*model.Comer, error)
	FindByPage(offset int, limit int) (result []*model.Comer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c comerDo) Debug() IComerDo {
	return c.withDO(c.DO.Debug())
}

func (c comerDo) WithContext(ctx context.Context) IComerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comerDo) ReadDB() IComerDo {
	return c.Clauses(dbresolver.Read)
}

func (c comerDo) WriteDB() IComerDo {
	return c.Clauses(dbresolver.Write)
}

func (c comerDo) Session(config *gorm.Session) IComerDo {
	return c.withDO(c.DO.Session(config))
}

func (c comerDo) Clauses(conds ...clause.Expression) IComerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comerDo) Returning(value interface{}, columns ...string) IComerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comerDo) Not(conds ...gen.Condition) IComerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comerDo) Or(conds ...gen.Condition) IComerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comerDo) Select(conds ...field.Expr) IComerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comerDo) Where(conds ...gen.Condition) IComerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comerDo) Order(conds ...field.Expr) IComerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comerDo) Distinct(cols ...field.Expr) IComerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comerDo) Omit(cols ...field.Expr) IComerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comerDo) Join(table schema.Tabler, on ...field.Expr) IComerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comerDo) RightJoin(table schema.Tabler, on ...field.Expr) IComerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comerDo) Group(cols ...field.Expr) IComerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comerDo) Having(conds ...gen.Condition) IComerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comerDo) Limit(limit int) IComerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comerDo) Offset(offset int) IComerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comerDo) Unscoped() IComerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comerDo) Create(values ...*model.Comer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comerDo) CreateInBatches(values []*model.Comer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comerDo) Save(values ...*model.Comer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comerDo) First() (*model.Comer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comer), nil
	}
}

func (c comerDo) Take() (*model.Comer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comer), nil
	}
}

func (c comerDo) Last() (*model.Comer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comer), nil
	}
}

func (c comerDo) Find() ([]*model.Comer, error) {
	result, err := c.DO.Find()
	return result.([]*model.Comer), err
}

func (c comerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Comer, err error) {
	buf := make([]*model.Comer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comerDo) FindInBatches(result *[]*model.Comer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comerDo) Attrs(attrs ...field.AssignExpr) IComerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comerDo) Assign(attrs ...field.AssignExpr) IComerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comerDo) Joins(fields ...field.RelationField) IComerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comerDo) Preload(fields ...field.RelationField) IComerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comerDo) FirstOrInit() (*model.Comer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comer), nil
	}
}

func (c comerDo) FirstOrCreate() (*model.Comer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comer), nil
	}
}

func (c comerDo) FindByPage(offset int, limit int) (result []*model.Comer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comerDo) Delete(models ...*model.Comer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comerDo) withDO(do gen.Dao) *comerDo {
	c.DO = *do.(*gen.DO)
	return c
}
