// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newStartupWallet(db *gorm.DB, opts ...gen.DOOption) startupWallet {
	_startupWallet := startupWallet{}

	_startupWallet.startupWalletDo.UseDB(db, opts...)
	_startupWallet.startupWalletDo.UseModel(&model.StartupWallet{})

	tableName := _startupWallet.startupWalletDo.TableName()
	_startupWallet.ALL = field.NewAsterisk(tableName)
	_startupWallet.ID = field.NewInt64(tableName, "id")
	_startupWallet.ComerID = field.NewInt64(tableName, "comer_id")
	_startupWallet.StartupID = field.NewInt64(tableName, "startup_id")
	_startupWallet.WalletName = field.NewString(tableName, "wallet_name")
	_startupWallet.WalletAddress = field.NewString(tableName, "wallet_address")
	_startupWallet.CreatedAt = field.NewTime(tableName, "created_at")
	_startupWallet.UpdatedAt = field.NewTime(tableName, "updated_at")
	_startupWallet.IsDeleted = field.NewBool(tableName, "is_deleted")

	_startupWallet.fillFieldMap()

	return _startupWallet
}

type startupWallet struct {
	startupWalletDo

	ALL           field.Asterisk
	ID            field.Int64
	ComerID       field.Int64  // comer_id
	StartupID     field.Int64  // startup_id
	WalletName    field.String // wallet name
	WalletAddress field.String // wallet address
	CreatedAt     field.Time
	UpdatedAt     field.Time
	IsDeleted     field.Bool // Is Deleted

	fieldMap map[string]field.Expr
}

func (s startupWallet) Table(newTableName string) *startupWallet {
	s.startupWalletDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s startupWallet) As(alias string) *startupWallet {
	s.startupWalletDo.DO = *(s.startupWalletDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *startupWallet) updateTableName(table string) *startupWallet {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ComerID = field.NewInt64(table, "comer_id")
	s.StartupID = field.NewInt64(table, "startup_id")
	s.WalletName = field.NewString(table, "wallet_name")
	s.WalletAddress = field.NewString(table, "wallet_address")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.IsDeleted = field.NewBool(table, "is_deleted")

	s.fillFieldMap()

	return s
}

func (s *startupWallet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *startupWallet) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["comer_id"] = s.ComerID
	s.fieldMap["startup_id"] = s.StartupID
	s.fieldMap["wallet_name"] = s.WalletName
	s.fieldMap["wallet_address"] = s.WalletAddress
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["is_deleted"] = s.IsDeleted
}

func (s startupWallet) clone(db *gorm.DB) startupWallet {
	s.startupWalletDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s startupWallet) replaceDB(db *gorm.DB) startupWallet {
	s.startupWalletDo.ReplaceDB(db)
	return s
}

type startupWalletDo struct{ gen.DO }

type IStartupWalletDo interface {
	gen.SubQuery
	Debug() IStartupWalletDo
	WithContext(ctx context.Context) IStartupWalletDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStartupWalletDo
	WriteDB() IStartupWalletDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStartupWalletDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStartupWalletDo
	Not(conds ...gen.Condition) IStartupWalletDo
	Or(conds ...gen.Condition) IStartupWalletDo
	Select(conds ...field.Expr) IStartupWalletDo
	Where(conds ...gen.Condition) IStartupWalletDo
	Order(conds ...field.Expr) IStartupWalletDo
	Distinct(cols ...field.Expr) IStartupWalletDo
	Omit(cols ...field.Expr) IStartupWalletDo
	Join(table schema.Tabler, on ...field.Expr) IStartupWalletDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStartupWalletDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStartupWalletDo
	Group(cols ...field.Expr) IStartupWalletDo
	Having(conds ...gen.Condition) IStartupWalletDo
	Limit(limit int) IStartupWalletDo
	Offset(offset int) IStartupWalletDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupWalletDo
	Unscoped() IStartupWalletDo
	Create(values ...*model.StartupWallet) error
	CreateInBatches(values []*model.StartupWallet, batchSize int) error
	Save(values ...*model.StartupWallet) error
	First() (*model.StartupWallet, error)
	Take() (*model.StartupWallet, error)
	Last() (*model.StartupWallet, error)
	Find() ([]*model.StartupWallet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupWallet, err error)
	FindInBatches(result *[]*model.StartupWallet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StartupWallet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStartupWalletDo
	Assign(attrs ...field.AssignExpr) IStartupWalletDo
	Joins(fields ...field.RelationField) IStartupWalletDo
	Preload(fields ...field.RelationField) IStartupWalletDo
	FirstOrInit() (*model.StartupWallet, error)
	FirstOrCreate() (*model.StartupWallet, error)
	FindByPage(offset int, limit int) (result []*model.StartupWallet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStartupWalletDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s startupWalletDo) Debug() IStartupWalletDo {
	return s.withDO(s.DO.Debug())
}

func (s startupWalletDo) WithContext(ctx context.Context) IStartupWalletDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s startupWalletDo) ReadDB() IStartupWalletDo {
	return s.Clauses(dbresolver.Read)
}

func (s startupWalletDo) WriteDB() IStartupWalletDo {
	return s.Clauses(dbresolver.Write)
}

func (s startupWalletDo) Session(config *gorm.Session) IStartupWalletDo {
	return s.withDO(s.DO.Session(config))
}

func (s startupWalletDo) Clauses(conds ...clause.Expression) IStartupWalletDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s startupWalletDo) Returning(value interface{}, columns ...string) IStartupWalletDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s startupWalletDo) Not(conds ...gen.Condition) IStartupWalletDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s startupWalletDo) Or(conds ...gen.Condition) IStartupWalletDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s startupWalletDo) Select(conds ...field.Expr) IStartupWalletDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s startupWalletDo) Where(conds ...gen.Condition) IStartupWalletDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s startupWalletDo) Order(conds ...field.Expr) IStartupWalletDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s startupWalletDo) Distinct(cols ...field.Expr) IStartupWalletDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s startupWalletDo) Omit(cols ...field.Expr) IStartupWalletDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s startupWalletDo) Join(table schema.Tabler, on ...field.Expr) IStartupWalletDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s startupWalletDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStartupWalletDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s startupWalletDo) RightJoin(table schema.Tabler, on ...field.Expr) IStartupWalletDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s startupWalletDo) Group(cols ...field.Expr) IStartupWalletDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s startupWalletDo) Having(conds ...gen.Condition) IStartupWalletDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s startupWalletDo) Limit(limit int) IStartupWalletDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s startupWalletDo) Offset(offset int) IStartupWalletDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s startupWalletDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupWalletDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s startupWalletDo) Unscoped() IStartupWalletDo {
	return s.withDO(s.DO.Unscoped())
}

func (s startupWalletDo) Create(values ...*model.StartupWallet) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s startupWalletDo) CreateInBatches(values []*model.StartupWallet, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s startupWalletDo) Save(values ...*model.StartupWallet) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s startupWalletDo) First() (*model.StartupWallet, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupWallet), nil
	}
}

func (s startupWalletDo) Take() (*model.StartupWallet, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupWallet), nil
	}
}

func (s startupWalletDo) Last() (*model.StartupWallet, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupWallet), nil
	}
}

func (s startupWalletDo) Find() ([]*model.StartupWallet, error) {
	result, err := s.DO.Find()
	return result.([]*model.StartupWallet), err
}

func (s startupWalletDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupWallet, err error) {
	buf := make([]*model.StartupWallet, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s startupWalletDo) FindInBatches(result *[]*model.StartupWallet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s startupWalletDo) Attrs(attrs ...field.AssignExpr) IStartupWalletDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s startupWalletDo) Assign(attrs ...field.AssignExpr) IStartupWalletDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s startupWalletDo) Joins(fields ...field.RelationField) IStartupWalletDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s startupWalletDo) Preload(fields ...field.RelationField) IStartupWalletDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s startupWalletDo) FirstOrInit() (*model.StartupWallet, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupWallet), nil
	}
}

func (s startupWalletDo) FirstOrCreate() (*model.StartupWallet, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupWallet), nil
	}
}

func (s startupWalletDo) FindByPage(offset int, limit int) (result []*model.StartupWallet, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s startupWalletDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s startupWalletDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s startupWalletDo) Delete(models ...*model.StartupWallet) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *startupWalletDo) withDO(do gen.Dao) *startupWalletDo {
	s.DO = *do.(*gen.DO)
	return s
}
