// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newPostUpdate(db *gorm.DB, opts ...gen.DOOption) postUpdate {
	_postUpdate := postUpdate{}

	_postUpdate.postUpdateDo.UseDB(db, opts...)
	_postUpdate.postUpdateDo.UseModel(&model.PostUpdate{})

	tableName := _postUpdate.postUpdateDo.TableName()
	_postUpdate.ALL = field.NewAsterisk(tableName)
	_postUpdate.ID = field.NewInt32(tableName, "id")
	_postUpdate.SourceType = field.NewBool(tableName, "source_type")
	_postUpdate.SourceID = field.NewInt64(tableName, "source_id")
	_postUpdate.ComerID = field.NewInt64(tableName, "comer_id")
	_postUpdate.Content = field.NewString(tableName, "content")
	_postUpdate.Timestamp = field.NewTime(tableName, "timestamp")
	_postUpdate.CreatedAt = field.NewTime(tableName, "created_at")
	_postUpdate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_postUpdate.IsDeleted = field.NewBool(tableName, "is_deleted")

	_postUpdate.fillFieldMap()

	return _postUpdate
}

type postUpdate struct {
	postUpdateDo

	ALL        field.Asterisk
	ID         field.Int32
	SourceType field.Bool
	SourceID   field.Int64
	ComerID    field.Int64
	Content    field.String
	Timestamp  field.Time
	CreatedAt  field.Time
	UpdatedAt  field.Time
	IsDeleted  field.Bool

	fieldMap map[string]field.Expr
}

func (p postUpdate) Table(newTableName string) *postUpdate {
	p.postUpdateDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p postUpdate) As(alias string) *postUpdate {
	p.postUpdateDo.DO = *(p.postUpdateDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *postUpdate) updateTableName(table string) *postUpdate {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.SourceType = field.NewBool(table, "source_type")
	p.SourceID = field.NewInt64(table, "source_id")
	p.ComerID = field.NewInt64(table, "comer_id")
	p.Content = field.NewString(table, "content")
	p.Timestamp = field.NewTime(table, "timestamp")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.IsDeleted = field.NewBool(table, "is_deleted")

	p.fillFieldMap()

	return p
}

func (p *postUpdate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *postUpdate) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["source_type"] = p.SourceType
	p.fieldMap["source_id"] = p.SourceID
	p.fieldMap["comer_id"] = p.ComerID
	p.fieldMap["content"] = p.Content
	p.fieldMap["timestamp"] = p.Timestamp
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["is_deleted"] = p.IsDeleted
}

func (p postUpdate) clone(db *gorm.DB) postUpdate {
	p.postUpdateDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p postUpdate) replaceDB(db *gorm.DB) postUpdate {
	p.postUpdateDo.ReplaceDB(db)
	return p
}

type postUpdateDo struct{ gen.DO }

type IPostUpdateDo interface {
	gen.SubQuery
	Debug() IPostUpdateDo
	WithContext(ctx context.Context) IPostUpdateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPostUpdateDo
	WriteDB() IPostUpdateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPostUpdateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPostUpdateDo
	Not(conds ...gen.Condition) IPostUpdateDo
	Or(conds ...gen.Condition) IPostUpdateDo
	Select(conds ...field.Expr) IPostUpdateDo
	Where(conds ...gen.Condition) IPostUpdateDo
	Order(conds ...field.Expr) IPostUpdateDo
	Distinct(cols ...field.Expr) IPostUpdateDo
	Omit(cols ...field.Expr) IPostUpdateDo
	Join(table schema.Tabler, on ...field.Expr) IPostUpdateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPostUpdateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPostUpdateDo
	Group(cols ...field.Expr) IPostUpdateDo
	Having(conds ...gen.Condition) IPostUpdateDo
	Limit(limit int) IPostUpdateDo
	Offset(offset int) IPostUpdateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPostUpdateDo
	Unscoped() IPostUpdateDo
	Create(values ...*model.PostUpdate) error
	CreateInBatches(values []*model.PostUpdate, batchSize int) error
	Save(values ...*model.PostUpdate) error
	First() (*model.PostUpdate, error)
	Take() (*model.PostUpdate, error)
	Last() (*model.PostUpdate, error)
	Find() ([]*model.PostUpdate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostUpdate, err error)
	FindInBatches(result *[]*model.PostUpdate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PostUpdate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPostUpdateDo
	Assign(attrs ...field.AssignExpr) IPostUpdateDo
	Joins(fields ...field.RelationField) IPostUpdateDo
	Preload(fields ...field.RelationField) IPostUpdateDo
	FirstOrInit() (*model.PostUpdate, error)
	FirstOrCreate() (*model.PostUpdate, error)
	FindByPage(offset int, limit int) (result []*model.PostUpdate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPostUpdateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p postUpdateDo) Debug() IPostUpdateDo {
	return p.withDO(p.DO.Debug())
}

func (p postUpdateDo) WithContext(ctx context.Context) IPostUpdateDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p postUpdateDo) ReadDB() IPostUpdateDo {
	return p.Clauses(dbresolver.Read)
}

func (p postUpdateDo) WriteDB() IPostUpdateDo {
	return p.Clauses(dbresolver.Write)
}

func (p postUpdateDo) Session(config *gorm.Session) IPostUpdateDo {
	return p.withDO(p.DO.Session(config))
}

func (p postUpdateDo) Clauses(conds ...clause.Expression) IPostUpdateDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p postUpdateDo) Returning(value interface{}, columns ...string) IPostUpdateDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p postUpdateDo) Not(conds ...gen.Condition) IPostUpdateDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p postUpdateDo) Or(conds ...gen.Condition) IPostUpdateDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p postUpdateDo) Select(conds ...field.Expr) IPostUpdateDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p postUpdateDo) Where(conds ...gen.Condition) IPostUpdateDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p postUpdateDo) Order(conds ...field.Expr) IPostUpdateDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p postUpdateDo) Distinct(cols ...field.Expr) IPostUpdateDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p postUpdateDo) Omit(cols ...field.Expr) IPostUpdateDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p postUpdateDo) Join(table schema.Tabler, on ...field.Expr) IPostUpdateDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p postUpdateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPostUpdateDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p postUpdateDo) RightJoin(table schema.Tabler, on ...field.Expr) IPostUpdateDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p postUpdateDo) Group(cols ...field.Expr) IPostUpdateDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p postUpdateDo) Having(conds ...gen.Condition) IPostUpdateDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p postUpdateDo) Limit(limit int) IPostUpdateDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p postUpdateDo) Offset(offset int) IPostUpdateDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p postUpdateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPostUpdateDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p postUpdateDo) Unscoped() IPostUpdateDo {
	return p.withDO(p.DO.Unscoped())
}

func (p postUpdateDo) Create(values ...*model.PostUpdate) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p postUpdateDo) CreateInBatches(values []*model.PostUpdate, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p postUpdateDo) Save(values ...*model.PostUpdate) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p postUpdateDo) First() (*model.PostUpdate, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostUpdate), nil
	}
}

func (p postUpdateDo) Take() (*model.PostUpdate, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostUpdate), nil
	}
}

func (p postUpdateDo) Last() (*model.PostUpdate, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostUpdate), nil
	}
}

func (p postUpdateDo) Find() ([]*model.PostUpdate, error) {
	result, err := p.DO.Find()
	return result.([]*model.PostUpdate), err
}

func (p postUpdateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PostUpdate, err error) {
	buf := make([]*model.PostUpdate, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p postUpdateDo) FindInBatches(result *[]*model.PostUpdate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p postUpdateDo) Attrs(attrs ...field.AssignExpr) IPostUpdateDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p postUpdateDo) Assign(attrs ...field.AssignExpr) IPostUpdateDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p postUpdateDo) Joins(fields ...field.RelationField) IPostUpdateDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p postUpdateDo) Preload(fields ...field.RelationField) IPostUpdateDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p postUpdateDo) FirstOrInit() (*model.PostUpdate, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostUpdate), nil
	}
}

func (p postUpdateDo) FirstOrCreate() (*model.PostUpdate, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PostUpdate), nil
	}
}

func (p postUpdateDo) FindByPage(offset int, limit int) (result []*model.PostUpdate, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p postUpdateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p postUpdateDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p postUpdateDo) Delete(models ...*model.PostUpdate) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *postUpdateDo) withDO(do gen.Dao) *postUpdateDo {
	p.DO = *do.(*gen.DO)
	return p
}
