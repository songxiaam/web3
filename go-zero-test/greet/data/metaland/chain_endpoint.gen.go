// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newChainEndpoint(db *gorm.DB, opts ...gen.DOOption) chainEndpoint {
	_chainEndpoint := chainEndpoint{}

	_chainEndpoint.chainEndpointDo.UseDB(db, opts...)
	_chainEndpoint.chainEndpointDo.UseModel(&model.ChainEndpoint{})

	tableName := _chainEndpoint.chainEndpointDo.TableName()
	_chainEndpoint.ALL = field.NewAsterisk(tableName)
	_chainEndpoint.ID = field.NewInt64(tableName, "id")
	_chainEndpoint.Protocol = field.NewBool(tableName, "protocol")
	_chainEndpoint.ChainID = field.NewInt64(tableName, "chain_id")
	_chainEndpoint.URL = field.NewString(tableName, "url")
	_chainEndpoint.Status = field.NewBool(tableName, "status")
	_chainEndpoint.CreatedAt = field.NewTime(tableName, "created_at")
	_chainEndpoint.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chainEndpoint.IsDeleted = field.NewBool(tableName, "is_deleted")

	_chainEndpoint.fillFieldMap()

	return _chainEndpoint
}

type chainEndpoint struct {
	chainEndpointDo

	ALL       field.Asterisk
	ID        field.Int64
	Protocol  field.Bool   // Communication protocol, 1-rpc 2-wss
	ChainID   field.Int64  // Chain ID
	URL       field.String // Chain name
	Status    field.Bool   // 1-normal, 2-disable
	CreatedAt field.Time
	UpdatedAt field.Time
	IsDeleted field.Bool // Is deleted

	fieldMap map[string]field.Expr
}

func (c chainEndpoint) Table(newTableName string) *chainEndpoint {
	c.chainEndpointDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chainEndpoint) As(alias string) *chainEndpoint {
	c.chainEndpointDo.DO = *(c.chainEndpointDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chainEndpoint) updateTableName(table string) *chainEndpoint {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Protocol = field.NewBool(table, "protocol")
	c.ChainID = field.NewInt64(table, "chain_id")
	c.URL = field.NewString(table, "url")
	c.Status = field.NewBool(table, "status")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *chainEndpoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chainEndpoint) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["protocol"] = c.Protocol
	c.fieldMap["chain_id"] = c.ChainID
	c.fieldMap["url"] = c.URL
	c.fieldMap["status"] = c.Status
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c chainEndpoint) clone(db *gorm.DB) chainEndpoint {
	c.chainEndpointDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chainEndpoint) replaceDB(db *gorm.DB) chainEndpoint {
	c.chainEndpointDo.ReplaceDB(db)
	return c
}

type chainEndpointDo struct{ gen.DO }

type IChainEndpointDo interface {
	gen.SubQuery
	Debug() IChainEndpointDo
	WithContext(ctx context.Context) IChainEndpointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChainEndpointDo
	WriteDB() IChainEndpointDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChainEndpointDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChainEndpointDo
	Not(conds ...gen.Condition) IChainEndpointDo
	Or(conds ...gen.Condition) IChainEndpointDo
	Select(conds ...field.Expr) IChainEndpointDo
	Where(conds ...gen.Condition) IChainEndpointDo
	Order(conds ...field.Expr) IChainEndpointDo
	Distinct(cols ...field.Expr) IChainEndpointDo
	Omit(cols ...field.Expr) IChainEndpointDo
	Join(table schema.Tabler, on ...field.Expr) IChainEndpointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChainEndpointDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChainEndpointDo
	Group(cols ...field.Expr) IChainEndpointDo
	Having(conds ...gen.Condition) IChainEndpointDo
	Limit(limit int) IChainEndpointDo
	Offset(offset int) IChainEndpointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChainEndpointDo
	Unscoped() IChainEndpointDo
	Create(values ...*model.ChainEndpoint) error
	CreateInBatches(values []*model.ChainEndpoint, batchSize int) error
	Save(values ...*model.ChainEndpoint) error
	First() (*model.ChainEndpoint, error)
	Take() (*model.ChainEndpoint, error)
	Last() (*model.ChainEndpoint, error)
	Find() ([]*model.ChainEndpoint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChainEndpoint, err error)
	FindInBatches(result *[]*model.ChainEndpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChainEndpoint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChainEndpointDo
	Assign(attrs ...field.AssignExpr) IChainEndpointDo
	Joins(fields ...field.RelationField) IChainEndpointDo
	Preload(fields ...field.RelationField) IChainEndpointDo
	FirstOrInit() (*model.ChainEndpoint, error)
	FirstOrCreate() (*model.ChainEndpoint, error)
	FindByPage(offset int, limit int) (result []*model.ChainEndpoint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChainEndpointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chainEndpointDo) Debug() IChainEndpointDo {
	return c.withDO(c.DO.Debug())
}

func (c chainEndpointDo) WithContext(ctx context.Context) IChainEndpointDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chainEndpointDo) ReadDB() IChainEndpointDo {
	return c.Clauses(dbresolver.Read)
}

func (c chainEndpointDo) WriteDB() IChainEndpointDo {
	return c.Clauses(dbresolver.Write)
}

func (c chainEndpointDo) Session(config *gorm.Session) IChainEndpointDo {
	return c.withDO(c.DO.Session(config))
}

func (c chainEndpointDo) Clauses(conds ...clause.Expression) IChainEndpointDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chainEndpointDo) Returning(value interface{}, columns ...string) IChainEndpointDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chainEndpointDo) Not(conds ...gen.Condition) IChainEndpointDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chainEndpointDo) Or(conds ...gen.Condition) IChainEndpointDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chainEndpointDo) Select(conds ...field.Expr) IChainEndpointDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chainEndpointDo) Where(conds ...gen.Condition) IChainEndpointDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chainEndpointDo) Order(conds ...field.Expr) IChainEndpointDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chainEndpointDo) Distinct(cols ...field.Expr) IChainEndpointDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chainEndpointDo) Omit(cols ...field.Expr) IChainEndpointDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chainEndpointDo) Join(table schema.Tabler, on ...field.Expr) IChainEndpointDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chainEndpointDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChainEndpointDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chainEndpointDo) RightJoin(table schema.Tabler, on ...field.Expr) IChainEndpointDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chainEndpointDo) Group(cols ...field.Expr) IChainEndpointDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chainEndpointDo) Having(conds ...gen.Condition) IChainEndpointDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chainEndpointDo) Limit(limit int) IChainEndpointDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chainEndpointDo) Offset(offset int) IChainEndpointDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chainEndpointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChainEndpointDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chainEndpointDo) Unscoped() IChainEndpointDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chainEndpointDo) Create(values ...*model.ChainEndpoint) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chainEndpointDo) CreateInBatches(values []*model.ChainEndpoint, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chainEndpointDo) Save(values ...*model.ChainEndpoint) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chainEndpointDo) First() (*model.ChainEndpoint, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainEndpoint), nil
	}
}

func (c chainEndpointDo) Take() (*model.ChainEndpoint, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainEndpoint), nil
	}
}

func (c chainEndpointDo) Last() (*model.ChainEndpoint, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainEndpoint), nil
	}
}

func (c chainEndpointDo) Find() ([]*model.ChainEndpoint, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChainEndpoint), err
}

func (c chainEndpointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChainEndpoint, err error) {
	buf := make([]*model.ChainEndpoint, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chainEndpointDo) FindInBatches(result *[]*model.ChainEndpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chainEndpointDo) Attrs(attrs ...field.AssignExpr) IChainEndpointDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chainEndpointDo) Assign(attrs ...field.AssignExpr) IChainEndpointDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chainEndpointDo) Joins(fields ...field.RelationField) IChainEndpointDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chainEndpointDo) Preload(fields ...field.RelationField) IChainEndpointDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chainEndpointDo) FirstOrInit() (*model.ChainEndpoint, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainEndpoint), nil
	}
}

func (c chainEndpointDo) FirstOrCreate() (*model.ChainEndpoint, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChainEndpoint), nil
	}
}

func (c chainEndpointDo) FindByPage(offset int, limit int) (result []*model.ChainEndpoint, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chainEndpointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chainEndpointDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chainEndpointDo) Delete(models ...*model.ChainEndpoint) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chainEndpointDo) withDO(do gen.Dao) *chainEndpointDo {
	c.DO = *do.(*gen.DO)
	return c
}
