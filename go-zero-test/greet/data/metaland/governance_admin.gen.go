// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newGovernanceAdmin(db *gorm.DB, opts ...gen.DOOption) governanceAdmin {
	_governanceAdmin := governanceAdmin{}

	_governanceAdmin.governanceAdminDo.UseDB(db, opts...)
	_governanceAdmin.governanceAdminDo.UseModel(&model.GovernanceAdmin{})

	tableName := _governanceAdmin.governanceAdminDo.TableName()
	_governanceAdmin.ALL = field.NewAsterisk(tableName)
	_governanceAdmin.ID = field.NewInt32(tableName, "id")
	_governanceAdmin.SettingID = field.NewInt64(tableName, "setting_id")
	_governanceAdmin.WalletAddress = field.NewString(tableName, "wallet_address")
	_governanceAdmin.CreatedAt = field.NewTime(tableName, "created_at")
	_governanceAdmin.UpdatedAt = field.NewTime(tableName, "updated_at")
	_governanceAdmin.IsDeleted = field.NewBool(tableName, "is_deleted")

	_governanceAdmin.fillFieldMap()

	return _governanceAdmin
}

type governanceAdmin struct {
	governanceAdminDo

	ALL           field.Asterisk
	ID            field.Int32
	SettingID     field.Int64
	WalletAddress field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	IsDeleted     field.Bool

	fieldMap map[string]field.Expr
}

func (g governanceAdmin) Table(newTableName string) *governanceAdmin {
	g.governanceAdminDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g governanceAdmin) As(alias string) *governanceAdmin {
	g.governanceAdminDo.DO = *(g.governanceAdminDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *governanceAdmin) updateTableName(table string) *governanceAdmin {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.SettingID = field.NewInt64(table, "setting_id")
	g.WalletAddress = field.NewString(table, "wallet_address")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.IsDeleted = field.NewBool(table, "is_deleted")

	g.fillFieldMap()

	return g
}

func (g *governanceAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *governanceAdmin) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["id"] = g.ID
	g.fieldMap["setting_id"] = g.SettingID
	g.fieldMap["wallet_address"] = g.WalletAddress
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["is_deleted"] = g.IsDeleted
}

func (g governanceAdmin) clone(db *gorm.DB) governanceAdmin {
	g.governanceAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g governanceAdmin) replaceDB(db *gorm.DB) governanceAdmin {
	g.governanceAdminDo.ReplaceDB(db)
	return g
}

type governanceAdminDo struct{ gen.DO }

type IGovernanceAdminDo interface {
	gen.SubQuery
	Debug() IGovernanceAdminDo
	WithContext(ctx context.Context) IGovernanceAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGovernanceAdminDo
	WriteDB() IGovernanceAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGovernanceAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGovernanceAdminDo
	Not(conds ...gen.Condition) IGovernanceAdminDo
	Or(conds ...gen.Condition) IGovernanceAdminDo
	Select(conds ...field.Expr) IGovernanceAdminDo
	Where(conds ...gen.Condition) IGovernanceAdminDo
	Order(conds ...field.Expr) IGovernanceAdminDo
	Distinct(cols ...field.Expr) IGovernanceAdminDo
	Omit(cols ...field.Expr) IGovernanceAdminDo
	Join(table schema.Tabler, on ...field.Expr) IGovernanceAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceAdminDo
	Group(cols ...field.Expr) IGovernanceAdminDo
	Having(conds ...gen.Condition) IGovernanceAdminDo
	Limit(limit int) IGovernanceAdminDo
	Offset(offset int) IGovernanceAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceAdminDo
	Unscoped() IGovernanceAdminDo
	Create(values ...*model.GovernanceAdmin) error
	CreateInBatches(values []*model.GovernanceAdmin, batchSize int) error
	Save(values ...*model.GovernanceAdmin) error
	First() (*model.GovernanceAdmin, error)
	Take() (*model.GovernanceAdmin, error)
	Last() (*model.GovernanceAdmin, error)
	Find() ([]*model.GovernanceAdmin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceAdmin, err error)
	FindInBatches(result *[]*model.GovernanceAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GovernanceAdmin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGovernanceAdminDo
	Assign(attrs ...field.AssignExpr) IGovernanceAdminDo
	Joins(fields ...field.RelationField) IGovernanceAdminDo
	Preload(fields ...field.RelationField) IGovernanceAdminDo
	FirstOrInit() (*model.GovernanceAdmin, error)
	FirstOrCreate() (*model.GovernanceAdmin, error)
	FindByPage(offset int, limit int) (result []*model.GovernanceAdmin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGovernanceAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g governanceAdminDo) Debug() IGovernanceAdminDo {
	return g.withDO(g.DO.Debug())
}

func (g governanceAdminDo) WithContext(ctx context.Context) IGovernanceAdminDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g governanceAdminDo) ReadDB() IGovernanceAdminDo {
	return g.Clauses(dbresolver.Read)
}

func (g governanceAdminDo) WriteDB() IGovernanceAdminDo {
	return g.Clauses(dbresolver.Write)
}

func (g governanceAdminDo) Session(config *gorm.Session) IGovernanceAdminDo {
	return g.withDO(g.DO.Session(config))
}

func (g governanceAdminDo) Clauses(conds ...clause.Expression) IGovernanceAdminDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g governanceAdminDo) Returning(value interface{}, columns ...string) IGovernanceAdminDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g governanceAdminDo) Not(conds ...gen.Condition) IGovernanceAdminDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g governanceAdminDo) Or(conds ...gen.Condition) IGovernanceAdminDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g governanceAdminDo) Select(conds ...field.Expr) IGovernanceAdminDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g governanceAdminDo) Where(conds ...gen.Condition) IGovernanceAdminDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g governanceAdminDo) Order(conds ...field.Expr) IGovernanceAdminDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g governanceAdminDo) Distinct(cols ...field.Expr) IGovernanceAdminDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g governanceAdminDo) Omit(cols ...field.Expr) IGovernanceAdminDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g governanceAdminDo) Join(table schema.Tabler, on ...field.Expr) IGovernanceAdminDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g governanceAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceAdminDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g governanceAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceAdminDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g governanceAdminDo) Group(cols ...field.Expr) IGovernanceAdminDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g governanceAdminDo) Having(conds ...gen.Condition) IGovernanceAdminDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g governanceAdminDo) Limit(limit int) IGovernanceAdminDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g governanceAdminDo) Offset(offset int) IGovernanceAdminDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g governanceAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceAdminDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g governanceAdminDo) Unscoped() IGovernanceAdminDo {
	return g.withDO(g.DO.Unscoped())
}

func (g governanceAdminDo) Create(values ...*model.GovernanceAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g governanceAdminDo) CreateInBatches(values []*model.GovernanceAdmin, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g governanceAdminDo) Save(values ...*model.GovernanceAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g governanceAdminDo) First() (*model.GovernanceAdmin, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceAdmin), nil
	}
}

func (g governanceAdminDo) Take() (*model.GovernanceAdmin, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceAdmin), nil
	}
}

func (g governanceAdminDo) Last() (*model.GovernanceAdmin, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceAdmin), nil
	}
}

func (g governanceAdminDo) Find() ([]*model.GovernanceAdmin, error) {
	result, err := g.DO.Find()
	return result.([]*model.GovernanceAdmin), err
}

func (g governanceAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceAdmin, err error) {
	buf := make([]*model.GovernanceAdmin, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g governanceAdminDo) FindInBatches(result *[]*model.GovernanceAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g governanceAdminDo) Attrs(attrs ...field.AssignExpr) IGovernanceAdminDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g governanceAdminDo) Assign(attrs ...field.AssignExpr) IGovernanceAdminDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g governanceAdminDo) Joins(fields ...field.RelationField) IGovernanceAdminDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g governanceAdminDo) Preload(fields ...field.RelationField) IGovernanceAdminDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g governanceAdminDo) FirstOrInit() (*model.GovernanceAdmin, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceAdmin), nil
	}
}

func (g governanceAdminDo) FirstOrCreate() (*model.GovernanceAdmin, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceAdmin), nil
	}
}

func (g governanceAdminDo) FindByPage(offset int, limit int) (result []*model.GovernanceAdmin, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g governanceAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g governanceAdminDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g governanceAdminDo) Delete(models ...*model.GovernanceAdmin) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *governanceAdminDo) withDO(do gen.Dao) *governanceAdminDo {
	g.DO = *do.(*gen.DO)
	return g
}
