// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newBountyDeposit(db *gorm.DB, opts ...gen.DOOption) bountyDeposit {
	_bountyDeposit := bountyDeposit{}

	_bountyDeposit.bountyDepositDo.UseDB(db, opts...)
	_bountyDeposit.bountyDepositDo.UseModel(&model.BountyDeposit{})

	tableName := _bountyDeposit.bountyDepositDo.TableName()
	_bountyDeposit.ALL = field.NewAsterisk(tableName)
	_bountyDeposit.ID = field.NewInt64(tableName, "id")
	_bountyDeposit.ChainID = field.NewInt64(tableName, "chain_id")
	_bountyDeposit.TxHash = field.NewString(tableName, "tx_hash")
	_bountyDeposit.Status = field.NewBool(tableName, "status")
	_bountyDeposit.BountyID = field.NewInt64(tableName, "bounty_id")
	_bountyDeposit.ComerID = field.NewInt64(tableName, "comer_id")
	_bountyDeposit.Access = field.NewInt32(tableName, "access")
	_bountyDeposit.TokenSymbol = field.NewString(tableName, "token_symbol")
	_bountyDeposit.TokenAmount = field.NewInt32(tableName, "token_amount")
	_bountyDeposit.Timestamp = field.NewTime(tableName, "timestamp")
	_bountyDeposit.CreatedAt = field.NewTime(tableName, "created_at")
	_bountyDeposit.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bountyDeposit.IsDeleted = field.NewBool(tableName, "is_deleted")

	_bountyDeposit.fillFieldMap()

	return _bountyDeposit
}

type bountyDeposit struct {
	bountyDepositDo

	ALL         field.Asterisk
	ID          field.Int64
	ChainID     field.Int64
	TxHash      field.String
	Status      field.Bool
	BountyID    field.Int64
	ComerID     field.Int64
	Access      field.Int32
	TokenSymbol field.String
	TokenAmount field.Int32
	Timestamp   field.Time
	CreatedAt   field.Time
	UpdatedAt   field.Time
	IsDeleted   field.Bool

	fieldMap map[string]field.Expr
}

func (b bountyDeposit) Table(newTableName string) *bountyDeposit {
	b.bountyDepositDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bountyDeposit) As(alias string) *bountyDeposit {
	b.bountyDepositDo.DO = *(b.bountyDepositDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bountyDeposit) updateTableName(table string) *bountyDeposit {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.ChainID = field.NewInt64(table, "chain_id")
	b.TxHash = field.NewString(table, "tx_hash")
	b.Status = field.NewBool(table, "status")
	b.BountyID = field.NewInt64(table, "bounty_id")
	b.ComerID = field.NewInt64(table, "comer_id")
	b.Access = field.NewInt32(table, "access")
	b.TokenSymbol = field.NewString(table, "token_symbol")
	b.TokenAmount = field.NewInt32(table, "token_amount")
	b.Timestamp = field.NewTime(table, "timestamp")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.IsDeleted = field.NewBool(table, "is_deleted")

	b.fillFieldMap()

	return b
}

func (b *bountyDeposit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bountyDeposit) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["id"] = b.ID
	b.fieldMap["chain_id"] = b.ChainID
	b.fieldMap["tx_hash"] = b.TxHash
	b.fieldMap["status"] = b.Status
	b.fieldMap["bounty_id"] = b.BountyID
	b.fieldMap["comer_id"] = b.ComerID
	b.fieldMap["access"] = b.Access
	b.fieldMap["token_symbol"] = b.TokenSymbol
	b.fieldMap["token_amount"] = b.TokenAmount
	b.fieldMap["timestamp"] = b.Timestamp
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["is_deleted"] = b.IsDeleted
}

func (b bountyDeposit) clone(db *gorm.DB) bountyDeposit {
	b.bountyDepositDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bountyDeposit) replaceDB(db *gorm.DB) bountyDeposit {
	b.bountyDepositDo.ReplaceDB(db)
	return b
}

type bountyDepositDo struct{ gen.DO }

type IBountyDepositDo interface {
	gen.SubQuery
	Debug() IBountyDepositDo
	WithContext(ctx context.Context) IBountyDepositDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBountyDepositDo
	WriteDB() IBountyDepositDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBountyDepositDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBountyDepositDo
	Not(conds ...gen.Condition) IBountyDepositDo
	Or(conds ...gen.Condition) IBountyDepositDo
	Select(conds ...field.Expr) IBountyDepositDo
	Where(conds ...gen.Condition) IBountyDepositDo
	Order(conds ...field.Expr) IBountyDepositDo
	Distinct(cols ...field.Expr) IBountyDepositDo
	Omit(cols ...field.Expr) IBountyDepositDo
	Join(table schema.Tabler, on ...field.Expr) IBountyDepositDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBountyDepositDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBountyDepositDo
	Group(cols ...field.Expr) IBountyDepositDo
	Having(conds ...gen.Condition) IBountyDepositDo
	Limit(limit int) IBountyDepositDo
	Offset(offset int) IBountyDepositDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyDepositDo
	Unscoped() IBountyDepositDo
	Create(values ...*model.BountyDeposit) error
	CreateInBatches(values []*model.BountyDeposit, batchSize int) error
	Save(values ...*model.BountyDeposit) error
	First() (*model.BountyDeposit, error)
	Take() (*model.BountyDeposit, error)
	Last() (*model.BountyDeposit, error)
	Find() ([]*model.BountyDeposit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyDeposit, err error)
	FindInBatches(result *[]*model.BountyDeposit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BountyDeposit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBountyDepositDo
	Assign(attrs ...field.AssignExpr) IBountyDepositDo
	Joins(fields ...field.RelationField) IBountyDepositDo
	Preload(fields ...field.RelationField) IBountyDepositDo
	FirstOrInit() (*model.BountyDeposit, error)
	FirstOrCreate() (*model.BountyDeposit, error)
	FindByPage(offset int, limit int) (result []*model.BountyDeposit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBountyDepositDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bountyDepositDo) Debug() IBountyDepositDo {
	return b.withDO(b.DO.Debug())
}

func (b bountyDepositDo) WithContext(ctx context.Context) IBountyDepositDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bountyDepositDo) ReadDB() IBountyDepositDo {
	return b.Clauses(dbresolver.Read)
}

func (b bountyDepositDo) WriteDB() IBountyDepositDo {
	return b.Clauses(dbresolver.Write)
}

func (b bountyDepositDo) Session(config *gorm.Session) IBountyDepositDo {
	return b.withDO(b.DO.Session(config))
}

func (b bountyDepositDo) Clauses(conds ...clause.Expression) IBountyDepositDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bountyDepositDo) Returning(value interface{}, columns ...string) IBountyDepositDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bountyDepositDo) Not(conds ...gen.Condition) IBountyDepositDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bountyDepositDo) Or(conds ...gen.Condition) IBountyDepositDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bountyDepositDo) Select(conds ...field.Expr) IBountyDepositDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bountyDepositDo) Where(conds ...gen.Condition) IBountyDepositDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bountyDepositDo) Order(conds ...field.Expr) IBountyDepositDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bountyDepositDo) Distinct(cols ...field.Expr) IBountyDepositDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bountyDepositDo) Omit(cols ...field.Expr) IBountyDepositDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bountyDepositDo) Join(table schema.Tabler, on ...field.Expr) IBountyDepositDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bountyDepositDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBountyDepositDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bountyDepositDo) RightJoin(table schema.Tabler, on ...field.Expr) IBountyDepositDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bountyDepositDo) Group(cols ...field.Expr) IBountyDepositDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bountyDepositDo) Having(conds ...gen.Condition) IBountyDepositDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bountyDepositDo) Limit(limit int) IBountyDepositDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bountyDepositDo) Offset(offset int) IBountyDepositDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bountyDepositDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyDepositDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bountyDepositDo) Unscoped() IBountyDepositDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bountyDepositDo) Create(values ...*model.BountyDeposit) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bountyDepositDo) CreateInBatches(values []*model.BountyDeposit, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bountyDepositDo) Save(values ...*model.BountyDeposit) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bountyDepositDo) First() (*model.BountyDeposit, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyDeposit), nil
	}
}

func (b bountyDepositDo) Take() (*model.BountyDeposit, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyDeposit), nil
	}
}

func (b bountyDepositDo) Last() (*model.BountyDeposit, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyDeposit), nil
	}
}

func (b bountyDepositDo) Find() ([]*model.BountyDeposit, error) {
	result, err := b.DO.Find()
	return result.([]*model.BountyDeposit), err
}

func (b bountyDepositDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyDeposit, err error) {
	buf := make([]*model.BountyDeposit, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bountyDepositDo) FindInBatches(result *[]*model.BountyDeposit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bountyDepositDo) Attrs(attrs ...field.AssignExpr) IBountyDepositDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bountyDepositDo) Assign(attrs ...field.AssignExpr) IBountyDepositDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bountyDepositDo) Joins(fields ...field.RelationField) IBountyDepositDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bountyDepositDo) Preload(fields ...field.RelationField) IBountyDepositDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bountyDepositDo) FirstOrInit() (*model.BountyDeposit, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyDeposit), nil
	}
}

func (b bountyDepositDo) FirstOrCreate() (*model.BountyDeposit, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyDeposit), nil
	}
}

func (b bountyDepositDo) FindByPage(offset int, limit int) (result []*model.BountyDeposit, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bountyDepositDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bountyDepositDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bountyDepositDo) Delete(models ...*model.BountyDeposit) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bountyDepositDo) withDO(do gen.Dao) *bountyDepositDo {
	b.DO = *do.(*gen.DO)
	return b
}
