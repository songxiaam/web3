// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newComerFollowRel(db *gorm.DB, opts ...gen.DOOption) comerFollowRel {
	_comerFollowRel := comerFollowRel{}

	_comerFollowRel.comerFollowRelDo.UseDB(db, opts...)
	_comerFollowRel.comerFollowRelDo.UseModel(&model.ComerFollowRel{})

	tableName := _comerFollowRel.comerFollowRelDo.TableName()
	_comerFollowRel.ALL = field.NewAsterisk(tableName)
	_comerFollowRel.ID = field.NewInt64(tableName, "id")
	_comerFollowRel.ComerID = field.NewInt64(tableName, "comer_id")
	_comerFollowRel.TargetComerID = field.NewInt64(tableName, "target_comer_id")
	_comerFollowRel.CreatedAt = field.NewTime(tableName, "created_at")
	_comerFollowRel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_comerFollowRel.IsDeleted = field.NewBool(tableName, "is_deleted")

	_comerFollowRel.fillFieldMap()

	return _comerFollowRel
}

type comerFollowRel struct {
	comerFollowRelDo

	ALL           field.Asterisk
	ID            field.Int64
	ComerID       field.Int64
	TargetComerID field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	IsDeleted     field.Bool

	fieldMap map[string]field.Expr
}

func (c comerFollowRel) Table(newTableName string) *comerFollowRel {
	c.comerFollowRelDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comerFollowRel) As(alias string) *comerFollowRel {
	c.comerFollowRelDo.DO = *(c.comerFollowRelDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comerFollowRel) updateTableName(table string) *comerFollowRel {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ComerID = field.NewInt64(table, "comer_id")
	c.TargetComerID = field.NewInt64(table, "target_comer_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *comerFollowRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comerFollowRel) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["comer_id"] = c.ComerID
	c.fieldMap["target_comer_id"] = c.TargetComerID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c comerFollowRel) clone(db *gorm.DB) comerFollowRel {
	c.comerFollowRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comerFollowRel) replaceDB(db *gorm.DB) comerFollowRel {
	c.comerFollowRelDo.ReplaceDB(db)
	return c
}

type comerFollowRelDo struct{ gen.DO }

type IComerFollowRelDo interface {
	gen.SubQuery
	Debug() IComerFollowRelDo
	WithContext(ctx context.Context) IComerFollowRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComerFollowRelDo
	WriteDB() IComerFollowRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComerFollowRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComerFollowRelDo
	Not(conds ...gen.Condition) IComerFollowRelDo
	Or(conds ...gen.Condition) IComerFollowRelDo
	Select(conds ...field.Expr) IComerFollowRelDo
	Where(conds ...gen.Condition) IComerFollowRelDo
	Order(conds ...field.Expr) IComerFollowRelDo
	Distinct(cols ...field.Expr) IComerFollowRelDo
	Omit(cols ...field.Expr) IComerFollowRelDo
	Join(table schema.Tabler, on ...field.Expr) IComerFollowRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComerFollowRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComerFollowRelDo
	Group(cols ...field.Expr) IComerFollowRelDo
	Having(conds ...gen.Condition) IComerFollowRelDo
	Limit(limit int) IComerFollowRelDo
	Offset(offset int) IComerFollowRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComerFollowRelDo
	Unscoped() IComerFollowRelDo
	Create(values ...*model.ComerFollowRel) error
	CreateInBatches(values []*model.ComerFollowRel, batchSize int) error
	Save(values ...*model.ComerFollowRel) error
	First() (*model.ComerFollowRel, error)
	Take() (*model.ComerFollowRel, error)
	Last() (*model.ComerFollowRel, error)
	Find() ([]*model.ComerFollowRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComerFollowRel, err error)
	FindInBatches(result *[]*model.ComerFollowRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ComerFollowRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComerFollowRelDo
	Assign(attrs ...field.AssignExpr) IComerFollowRelDo
	Joins(fields ...field.RelationField) IComerFollowRelDo
	Preload(fields ...field.RelationField) IComerFollowRelDo
	FirstOrInit() (*model.ComerFollowRel, error)
	FirstOrCreate() (*model.ComerFollowRel, error)
	FindByPage(offset int, limit int) (result []*model.ComerFollowRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComerFollowRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c comerFollowRelDo) Debug() IComerFollowRelDo {
	return c.withDO(c.DO.Debug())
}

func (c comerFollowRelDo) WithContext(ctx context.Context) IComerFollowRelDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comerFollowRelDo) ReadDB() IComerFollowRelDo {
	return c.Clauses(dbresolver.Read)
}

func (c comerFollowRelDo) WriteDB() IComerFollowRelDo {
	return c.Clauses(dbresolver.Write)
}

func (c comerFollowRelDo) Session(config *gorm.Session) IComerFollowRelDo {
	return c.withDO(c.DO.Session(config))
}

func (c comerFollowRelDo) Clauses(conds ...clause.Expression) IComerFollowRelDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comerFollowRelDo) Returning(value interface{}, columns ...string) IComerFollowRelDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comerFollowRelDo) Not(conds ...gen.Condition) IComerFollowRelDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comerFollowRelDo) Or(conds ...gen.Condition) IComerFollowRelDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comerFollowRelDo) Select(conds ...field.Expr) IComerFollowRelDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comerFollowRelDo) Where(conds ...gen.Condition) IComerFollowRelDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comerFollowRelDo) Order(conds ...field.Expr) IComerFollowRelDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comerFollowRelDo) Distinct(cols ...field.Expr) IComerFollowRelDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comerFollowRelDo) Omit(cols ...field.Expr) IComerFollowRelDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comerFollowRelDo) Join(table schema.Tabler, on ...field.Expr) IComerFollowRelDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comerFollowRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComerFollowRelDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comerFollowRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IComerFollowRelDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comerFollowRelDo) Group(cols ...field.Expr) IComerFollowRelDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comerFollowRelDo) Having(conds ...gen.Condition) IComerFollowRelDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comerFollowRelDo) Limit(limit int) IComerFollowRelDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comerFollowRelDo) Offset(offset int) IComerFollowRelDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comerFollowRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComerFollowRelDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comerFollowRelDo) Unscoped() IComerFollowRelDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comerFollowRelDo) Create(values ...*model.ComerFollowRel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comerFollowRelDo) CreateInBatches(values []*model.ComerFollowRel, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comerFollowRelDo) Save(values ...*model.ComerFollowRel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comerFollowRelDo) First() (*model.ComerFollowRel, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerFollowRel), nil
	}
}

func (c comerFollowRelDo) Take() (*model.ComerFollowRel, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerFollowRel), nil
	}
}

func (c comerFollowRelDo) Last() (*model.ComerFollowRel, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerFollowRel), nil
	}
}

func (c comerFollowRelDo) Find() ([]*model.ComerFollowRel, error) {
	result, err := c.DO.Find()
	return result.([]*model.ComerFollowRel), err
}

func (c comerFollowRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComerFollowRel, err error) {
	buf := make([]*model.ComerFollowRel, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comerFollowRelDo) FindInBatches(result *[]*model.ComerFollowRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comerFollowRelDo) Attrs(attrs ...field.AssignExpr) IComerFollowRelDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comerFollowRelDo) Assign(attrs ...field.AssignExpr) IComerFollowRelDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comerFollowRelDo) Joins(fields ...field.RelationField) IComerFollowRelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comerFollowRelDo) Preload(fields ...field.RelationField) IComerFollowRelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comerFollowRelDo) FirstOrInit() (*model.ComerFollowRel, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerFollowRel), nil
	}
}

func (c comerFollowRelDo) FirstOrCreate() (*model.ComerFollowRel, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerFollowRel), nil
	}
}

func (c comerFollowRelDo) FindByPage(offset int, limit int) (result []*model.ComerFollowRel, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comerFollowRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comerFollowRelDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comerFollowRelDo) Delete(models ...*model.ComerFollowRel) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comerFollowRelDo) withDO(do gen.Dao) *comerFollowRelDo {
	c.DO = *do.(*gen.DO)
	return c
}
