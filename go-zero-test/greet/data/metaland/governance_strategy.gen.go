// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newGovernanceStrategy(db *gorm.DB, opts ...gen.DOOption) governanceStrategy {
	_governanceStrategy := governanceStrategy{}

	_governanceStrategy.governanceStrategyDo.UseDB(db, opts...)
	_governanceStrategy.governanceStrategyDo.UseModel(&model.GovernanceStrategy{})

	tableName := _governanceStrategy.governanceStrategyDo.TableName()
	_governanceStrategy.ALL = field.NewAsterisk(tableName)
	_governanceStrategy.ID = field.NewInt32(tableName, "id")
	_governanceStrategy.SettingID = field.NewInt64(tableName, "setting_id")
	_governanceStrategy.DictValue = field.NewString(tableName, "dict_value")
	_governanceStrategy.StrategyName = field.NewString(tableName, "strategy_name")
	_governanceStrategy.ChainID = field.NewInt64(tableName, "chain_id")
	_governanceStrategy.TokenContractAddress = field.NewString(tableName, "token_contract_address")
	_governanceStrategy.VoteSymbol = field.NewString(tableName, "vote_symbol")
	_governanceStrategy.VoteDecimals = field.NewInt32(tableName, "vote_decimals")
	_governanceStrategy.TokenMinBalance = field.NewFloat64(tableName, "token_min_balance")
	_governanceStrategy.CreatedAt = field.NewTime(tableName, "created_at")
	_governanceStrategy.UpdatedAt = field.NewTime(tableName, "updated_at")
	_governanceStrategy.IsDeleted = field.NewBool(tableName, "is_deleted")

	_governanceStrategy.fillFieldMap()

	return _governanceStrategy
}

type governanceStrategy struct {
	governanceStrategyDo

	ALL                  field.Asterisk
	ID                   field.Int32
	SettingID            field.Int64
	DictValue            field.String
	StrategyName         field.String
	ChainID              field.Int64
	TokenContractAddress field.String
	VoteSymbol           field.String
	VoteDecimals         field.Int32
	TokenMinBalance      field.Float64
	CreatedAt            field.Time
	UpdatedAt            field.Time
	IsDeleted            field.Bool

	fieldMap map[string]field.Expr
}

func (g governanceStrategy) Table(newTableName string) *governanceStrategy {
	g.governanceStrategyDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g governanceStrategy) As(alias string) *governanceStrategy {
	g.governanceStrategyDo.DO = *(g.governanceStrategyDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *governanceStrategy) updateTableName(table string) *governanceStrategy {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt32(table, "id")
	g.SettingID = field.NewInt64(table, "setting_id")
	g.DictValue = field.NewString(table, "dict_value")
	g.StrategyName = field.NewString(table, "strategy_name")
	g.ChainID = field.NewInt64(table, "chain_id")
	g.TokenContractAddress = field.NewString(table, "token_contract_address")
	g.VoteSymbol = field.NewString(table, "vote_symbol")
	g.VoteDecimals = field.NewInt32(table, "vote_decimals")
	g.TokenMinBalance = field.NewFloat64(table, "token_min_balance")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.IsDeleted = field.NewBool(table, "is_deleted")

	g.fillFieldMap()

	return g
}

func (g *governanceStrategy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *governanceStrategy) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 12)
	g.fieldMap["id"] = g.ID
	g.fieldMap["setting_id"] = g.SettingID
	g.fieldMap["dict_value"] = g.DictValue
	g.fieldMap["strategy_name"] = g.StrategyName
	g.fieldMap["chain_id"] = g.ChainID
	g.fieldMap["token_contract_address"] = g.TokenContractAddress
	g.fieldMap["vote_symbol"] = g.VoteSymbol
	g.fieldMap["vote_decimals"] = g.VoteDecimals
	g.fieldMap["token_min_balance"] = g.TokenMinBalance
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["is_deleted"] = g.IsDeleted
}

func (g governanceStrategy) clone(db *gorm.DB) governanceStrategy {
	g.governanceStrategyDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g governanceStrategy) replaceDB(db *gorm.DB) governanceStrategy {
	g.governanceStrategyDo.ReplaceDB(db)
	return g
}

type governanceStrategyDo struct{ gen.DO }

type IGovernanceStrategyDo interface {
	gen.SubQuery
	Debug() IGovernanceStrategyDo
	WithContext(ctx context.Context) IGovernanceStrategyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGovernanceStrategyDo
	WriteDB() IGovernanceStrategyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGovernanceStrategyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGovernanceStrategyDo
	Not(conds ...gen.Condition) IGovernanceStrategyDo
	Or(conds ...gen.Condition) IGovernanceStrategyDo
	Select(conds ...field.Expr) IGovernanceStrategyDo
	Where(conds ...gen.Condition) IGovernanceStrategyDo
	Order(conds ...field.Expr) IGovernanceStrategyDo
	Distinct(cols ...field.Expr) IGovernanceStrategyDo
	Omit(cols ...field.Expr) IGovernanceStrategyDo
	Join(table schema.Tabler, on ...field.Expr) IGovernanceStrategyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceStrategyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceStrategyDo
	Group(cols ...field.Expr) IGovernanceStrategyDo
	Having(conds ...gen.Condition) IGovernanceStrategyDo
	Limit(limit int) IGovernanceStrategyDo
	Offset(offset int) IGovernanceStrategyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceStrategyDo
	Unscoped() IGovernanceStrategyDo
	Create(values ...*model.GovernanceStrategy) error
	CreateInBatches(values []*model.GovernanceStrategy, batchSize int) error
	Save(values ...*model.GovernanceStrategy) error
	First() (*model.GovernanceStrategy, error)
	Take() (*model.GovernanceStrategy, error)
	Last() (*model.GovernanceStrategy, error)
	Find() ([]*model.GovernanceStrategy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceStrategy, err error)
	FindInBatches(result *[]*model.GovernanceStrategy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GovernanceStrategy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGovernanceStrategyDo
	Assign(attrs ...field.AssignExpr) IGovernanceStrategyDo
	Joins(fields ...field.RelationField) IGovernanceStrategyDo
	Preload(fields ...field.RelationField) IGovernanceStrategyDo
	FirstOrInit() (*model.GovernanceStrategy, error)
	FirstOrCreate() (*model.GovernanceStrategy, error)
	FindByPage(offset int, limit int) (result []*model.GovernanceStrategy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGovernanceStrategyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g governanceStrategyDo) Debug() IGovernanceStrategyDo {
	return g.withDO(g.DO.Debug())
}

func (g governanceStrategyDo) WithContext(ctx context.Context) IGovernanceStrategyDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g governanceStrategyDo) ReadDB() IGovernanceStrategyDo {
	return g.Clauses(dbresolver.Read)
}

func (g governanceStrategyDo) WriteDB() IGovernanceStrategyDo {
	return g.Clauses(dbresolver.Write)
}

func (g governanceStrategyDo) Session(config *gorm.Session) IGovernanceStrategyDo {
	return g.withDO(g.DO.Session(config))
}

func (g governanceStrategyDo) Clauses(conds ...clause.Expression) IGovernanceStrategyDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g governanceStrategyDo) Returning(value interface{}, columns ...string) IGovernanceStrategyDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g governanceStrategyDo) Not(conds ...gen.Condition) IGovernanceStrategyDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g governanceStrategyDo) Or(conds ...gen.Condition) IGovernanceStrategyDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g governanceStrategyDo) Select(conds ...field.Expr) IGovernanceStrategyDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g governanceStrategyDo) Where(conds ...gen.Condition) IGovernanceStrategyDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g governanceStrategyDo) Order(conds ...field.Expr) IGovernanceStrategyDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g governanceStrategyDo) Distinct(cols ...field.Expr) IGovernanceStrategyDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g governanceStrategyDo) Omit(cols ...field.Expr) IGovernanceStrategyDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g governanceStrategyDo) Join(table schema.Tabler, on ...field.Expr) IGovernanceStrategyDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g governanceStrategyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGovernanceStrategyDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g governanceStrategyDo) RightJoin(table schema.Tabler, on ...field.Expr) IGovernanceStrategyDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g governanceStrategyDo) Group(cols ...field.Expr) IGovernanceStrategyDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g governanceStrategyDo) Having(conds ...gen.Condition) IGovernanceStrategyDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g governanceStrategyDo) Limit(limit int) IGovernanceStrategyDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g governanceStrategyDo) Offset(offset int) IGovernanceStrategyDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g governanceStrategyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGovernanceStrategyDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g governanceStrategyDo) Unscoped() IGovernanceStrategyDo {
	return g.withDO(g.DO.Unscoped())
}

func (g governanceStrategyDo) Create(values ...*model.GovernanceStrategy) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g governanceStrategyDo) CreateInBatches(values []*model.GovernanceStrategy, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g governanceStrategyDo) Save(values ...*model.GovernanceStrategy) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g governanceStrategyDo) First() (*model.GovernanceStrategy, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceStrategy), nil
	}
}

func (g governanceStrategyDo) Take() (*model.GovernanceStrategy, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceStrategy), nil
	}
}

func (g governanceStrategyDo) Last() (*model.GovernanceStrategy, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceStrategy), nil
	}
}

func (g governanceStrategyDo) Find() ([]*model.GovernanceStrategy, error) {
	result, err := g.DO.Find()
	return result.([]*model.GovernanceStrategy), err
}

func (g governanceStrategyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GovernanceStrategy, err error) {
	buf := make([]*model.GovernanceStrategy, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g governanceStrategyDo) FindInBatches(result *[]*model.GovernanceStrategy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g governanceStrategyDo) Attrs(attrs ...field.AssignExpr) IGovernanceStrategyDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g governanceStrategyDo) Assign(attrs ...field.AssignExpr) IGovernanceStrategyDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g governanceStrategyDo) Joins(fields ...field.RelationField) IGovernanceStrategyDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g governanceStrategyDo) Preload(fields ...field.RelationField) IGovernanceStrategyDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g governanceStrategyDo) FirstOrInit() (*model.GovernanceStrategy, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceStrategy), nil
	}
}

func (g governanceStrategyDo) FirstOrCreate() (*model.GovernanceStrategy, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GovernanceStrategy), nil
	}
}

func (g governanceStrategyDo) FindByPage(offset int, limit int) (result []*model.GovernanceStrategy, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g governanceStrategyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g governanceStrategyDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g governanceStrategyDo) Delete(models ...*model.GovernanceStrategy) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *governanceStrategyDo) withDO(do gen.Dao) *governanceStrategyDo {
	g.DO = *do.(*gen.DO)
	return g
}
