// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                     = new(Query)
	Bounty                *bounty
	BountyApplicant       *bountyApplicant
	BountyContact         *bountyContact
	BountyDeposit         *bountyDeposit
	BountyPaymentPeriod   *bountyPaymentPeriod
	BountyPaymentTerm     *bountyPaymentTerm
	Chain                 *chain
	ChainContract         *chainContract
	ChainEndpoint         *chainEndpoint
	Comer                 *comer
	ComerAccount          *comerAccount
	ComerEducation        *comerEducation
	ComerFollowRel        *comerFollowRel
	ComerLanguage         *comerLanguage
	ComerProfile          *comerProfile
	ComerSkill            *comerSkill
	ComerSocial           *comerSocial
	Crowdfunding          *crowdfunding
	CrowdfundingIboRate   *crowdfundingIboRate
	CrowdfundingInvestor  *crowdfundingInvestor
	CrowdfundingSwap      *crowdfundingSwap
	DictDatum             *dictDatum
	GovernanceAdmin       *governanceAdmin
	GovernanceChoice      *governanceChoice
	GovernanceProposal    *governanceProposal
	GovernanceSetting     *governanceSetting
	GovernanceStrategy    *governanceStrategy
	GovernanceVote        *governanceVote
	Image                 *image
	PostUpdate            *postUpdate
	Startup               *startup
	StartupFollowRel      *startupFollowRel
	StartupGroup          *startupGroup
	StartupGroupMemberRel *startupGroupMemberRel
	StartupTeamMemberRel  *startupTeamMemberRel
	StartupWallet         *startupWallet
	Tag                   *tag
	TagTargetRel          *tagTargetRel
	Transaction           *transaction
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Bounty = &Q.Bounty
	BountyApplicant = &Q.BountyApplicant
	BountyContact = &Q.BountyContact
	BountyDeposit = &Q.BountyDeposit
	BountyPaymentPeriod = &Q.BountyPaymentPeriod
	BountyPaymentTerm = &Q.BountyPaymentTerm
	Chain = &Q.Chain
	ChainContract = &Q.ChainContract
	ChainEndpoint = &Q.ChainEndpoint
	Comer = &Q.Comer
	ComerAccount = &Q.ComerAccount
	ComerEducation = &Q.ComerEducation
	ComerFollowRel = &Q.ComerFollowRel
	ComerLanguage = &Q.ComerLanguage
	ComerProfile = &Q.ComerProfile
	ComerSkill = &Q.ComerSkill
	ComerSocial = &Q.ComerSocial
	Crowdfunding = &Q.Crowdfunding
	CrowdfundingIboRate = &Q.CrowdfundingIboRate
	CrowdfundingInvestor = &Q.CrowdfundingInvestor
	CrowdfundingSwap = &Q.CrowdfundingSwap
	DictDatum = &Q.DictDatum
	GovernanceAdmin = &Q.GovernanceAdmin
	GovernanceChoice = &Q.GovernanceChoice
	GovernanceProposal = &Q.GovernanceProposal
	GovernanceSetting = &Q.GovernanceSetting
	GovernanceStrategy = &Q.GovernanceStrategy
	GovernanceVote = &Q.GovernanceVote
	Image = &Q.Image
	PostUpdate = &Q.PostUpdate
	Startup = &Q.Startup
	StartupFollowRel = &Q.StartupFollowRel
	StartupGroup = &Q.StartupGroup
	StartupGroupMemberRel = &Q.StartupGroupMemberRel
	StartupTeamMemberRel = &Q.StartupTeamMemberRel
	StartupWallet = &Q.StartupWallet
	Tag = &Q.Tag
	TagTargetRel = &Q.TagTargetRel
	Transaction = &Q.Transaction
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                    db,
		Bounty:                newBounty(db, opts...),
		BountyApplicant:       newBountyApplicant(db, opts...),
		BountyContact:         newBountyContact(db, opts...),
		BountyDeposit:         newBountyDeposit(db, opts...),
		BountyPaymentPeriod:   newBountyPaymentPeriod(db, opts...),
		BountyPaymentTerm:     newBountyPaymentTerm(db, opts...),
		Chain:                 newChain(db, opts...),
		ChainContract:         newChainContract(db, opts...),
		ChainEndpoint:         newChainEndpoint(db, opts...),
		Comer:                 newComer(db, opts...),
		ComerAccount:          newComerAccount(db, opts...),
		ComerEducation:        newComerEducation(db, opts...),
		ComerFollowRel:        newComerFollowRel(db, opts...),
		ComerLanguage:         newComerLanguage(db, opts...),
		ComerProfile:          newComerProfile(db, opts...),
		ComerSkill:            newComerSkill(db, opts...),
		ComerSocial:           newComerSocial(db, opts...),
		Crowdfunding:          newCrowdfunding(db, opts...),
		CrowdfundingIboRate:   newCrowdfundingIboRate(db, opts...),
		CrowdfundingInvestor:  newCrowdfundingInvestor(db, opts...),
		CrowdfundingSwap:      newCrowdfundingSwap(db, opts...),
		DictDatum:             newDictDatum(db, opts...),
		GovernanceAdmin:       newGovernanceAdmin(db, opts...),
		GovernanceChoice:      newGovernanceChoice(db, opts...),
		GovernanceProposal:    newGovernanceProposal(db, opts...),
		GovernanceSetting:     newGovernanceSetting(db, opts...),
		GovernanceStrategy:    newGovernanceStrategy(db, opts...),
		GovernanceVote:        newGovernanceVote(db, opts...),
		Image:                 newImage(db, opts...),
		PostUpdate:            newPostUpdate(db, opts...),
		Startup:               newStartup(db, opts...),
		StartupFollowRel:      newStartupFollowRel(db, opts...),
		StartupGroup:          newStartupGroup(db, opts...),
		StartupGroupMemberRel: newStartupGroupMemberRel(db, opts...),
		StartupTeamMemberRel:  newStartupTeamMemberRel(db, opts...),
		StartupWallet:         newStartupWallet(db, opts...),
		Tag:                   newTag(db, opts...),
		TagTargetRel:          newTagTargetRel(db, opts...),
		Transaction:           newTransaction(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Bounty                bounty
	BountyApplicant       bountyApplicant
	BountyContact         bountyContact
	BountyDeposit         bountyDeposit
	BountyPaymentPeriod   bountyPaymentPeriod
	BountyPaymentTerm     bountyPaymentTerm
	Chain                 chain
	ChainContract         chainContract
	ChainEndpoint         chainEndpoint
	Comer                 comer
	ComerAccount          comerAccount
	ComerEducation        comerEducation
	ComerFollowRel        comerFollowRel
	ComerLanguage         comerLanguage
	ComerProfile          comerProfile
	ComerSkill            comerSkill
	ComerSocial           comerSocial
	Crowdfunding          crowdfunding
	CrowdfundingIboRate   crowdfundingIboRate
	CrowdfundingInvestor  crowdfundingInvestor
	CrowdfundingSwap      crowdfundingSwap
	DictDatum             dictDatum
	GovernanceAdmin       governanceAdmin
	GovernanceChoice      governanceChoice
	GovernanceProposal    governanceProposal
	GovernanceSetting     governanceSetting
	GovernanceStrategy    governanceStrategy
	GovernanceVote        governanceVote
	Image                 image
	PostUpdate            postUpdate
	Startup               startup
	StartupFollowRel      startupFollowRel
	StartupGroup          startupGroup
	StartupGroupMemberRel startupGroupMemberRel
	StartupTeamMemberRel  startupTeamMemberRel
	StartupWallet         startupWallet
	Tag                   tag
	TagTargetRel          tagTargetRel
	Transaction           transaction
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Bounty:                q.Bounty.clone(db),
		BountyApplicant:       q.BountyApplicant.clone(db),
		BountyContact:         q.BountyContact.clone(db),
		BountyDeposit:         q.BountyDeposit.clone(db),
		BountyPaymentPeriod:   q.BountyPaymentPeriod.clone(db),
		BountyPaymentTerm:     q.BountyPaymentTerm.clone(db),
		Chain:                 q.Chain.clone(db),
		ChainContract:         q.ChainContract.clone(db),
		ChainEndpoint:         q.ChainEndpoint.clone(db),
		Comer:                 q.Comer.clone(db),
		ComerAccount:          q.ComerAccount.clone(db),
		ComerEducation:        q.ComerEducation.clone(db),
		ComerFollowRel:        q.ComerFollowRel.clone(db),
		ComerLanguage:         q.ComerLanguage.clone(db),
		ComerProfile:          q.ComerProfile.clone(db),
		ComerSkill:            q.ComerSkill.clone(db),
		ComerSocial:           q.ComerSocial.clone(db),
		Crowdfunding:          q.Crowdfunding.clone(db),
		CrowdfundingIboRate:   q.CrowdfundingIboRate.clone(db),
		CrowdfundingInvestor:  q.CrowdfundingInvestor.clone(db),
		CrowdfundingSwap:      q.CrowdfundingSwap.clone(db),
		DictDatum:             q.DictDatum.clone(db),
		GovernanceAdmin:       q.GovernanceAdmin.clone(db),
		GovernanceChoice:      q.GovernanceChoice.clone(db),
		GovernanceProposal:    q.GovernanceProposal.clone(db),
		GovernanceSetting:     q.GovernanceSetting.clone(db),
		GovernanceStrategy:    q.GovernanceStrategy.clone(db),
		GovernanceVote:        q.GovernanceVote.clone(db),
		Image:                 q.Image.clone(db),
		PostUpdate:            q.PostUpdate.clone(db),
		Startup:               q.Startup.clone(db),
		StartupFollowRel:      q.StartupFollowRel.clone(db),
		StartupGroup:          q.StartupGroup.clone(db),
		StartupGroupMemberRel: q.StartupGroupMemberRel.clone(db),
		StartupTeamMemberRel:  q.StartupTeamMemberRel.clone(db),
		StartupWallet:         q.StartupWallet.clone(db),
		Tag:                   q.Tag.clone(db),
		TagTargetRel:          q.TagTargetRel.clone(db),
		Transaction:           q.Transaction.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		Bounty:                q.Bounty.replaceDB(db),
		BountyApplicant:       q.BountyApplicant.replaceDB(db),
		BountyContact:         q.BountyContact.replaceDB(db),
		BountyDeposit:         q.BountyDeposit.replaceDB(db),
		BountyPaymentPeriod:   q.BountyPaymentPeriod.replaceDB(db),
		BountyPaymentTerm:     q.BountyPaymentTerm.replaceDB(db),
		Chain:                 q.Chain.replaceDB(db),
		ChainContract:         q.ChainContract.replaceDB(db),
		ChainEndpoint:         q.ChainEndpoint.replaceDB(db),
		Comer:                 q.Comer.replaceDB(db),
		ComerAccount:          q.ComerAccount.replaceDB(db),
		ComerEducation:        q.ComerEducation.replaceDB(db),
		ComerFollowRel:        q.ComerFollowRel.replaceDB(db),
		ComerLanguage:         q.ComerLanguage.replaceDB(db),
		ComerProfile:          q.ComerProfile.replaceDB(db),
		ComerSkill:            q.ComerSkill.replaceDB(db),
		ComerSocial:           q.ComerSocial.replaceDB(db),
		Crowdfunding:          q.Crowdfunding.replaceDB(db),
		CrowdfundingIboRate:   q.CrowdfundingIboRate.replaceDB(db),
		CrowdfundingInvestor:  q.CrowdfundingInvestor.replaceDB(db),
		CrowdfundingSwap:      q.CrowdfundingSwap.replaceDB(db),
		DictDatum:             q.DictDatum.replaceDB(db),
		GovernanceAdmin:       q.GovernanceAdmin.replaceDB(db),
		GovernanceChoice:      q.GovernanceChoice.replaceDB(db),
		GovernanceProposal:    q.GovernanceProposal.replaceDB(db),
		GovernanceSetting:     q.GovernanceSetting.replaceDB(db),
		GovernanceStrategy:    q.GovernanceStrategy.replaceDB(db),
		GovernanceVote:        q.GovernanceVote.replaceDB(db),
		Image:                 q.Image.replaceDB(db),
		PostUpdate:            q.PostUpdate.replaceDB(db),
		Startup:               q.Startup.replaceDB(db),
		StartupFollowRel:      q.StartupFollowRel.replaceDB(db),
		StartupGroup:          q.StartupGroup.replaceDB(db),
		StartupGroupMemberRel: q.StartupGroupMemberRel.replaceDB(db),
		StartupTeamMemberRel:  q.StartupTeamMemberRel.replaceDB(db),
		StartupWallet:         q.StartupWallet.replaceDB(db),
		Tag:                   q.Tag.replaceDB(db),
		TagTargetRel:          q.TagTargetRel.replaceDB(db),
		Transaction:           q.Transaction.replaceDB(db),
	}
}

type queryCtx struct {
	Bounty                IBountyDo
	BountyApplicant       IBountyApplicantDo
	BountyContact         IBountyContactDo
	BountyDeposit         IBountyDepositDo
	BountyPaymentPeriod   IBountyPaymentPeriodDo
	BountyPaymentTerm     IBountyPaymentTermDo
	Chain                 IChainDo
	ChainContract         IChainContractDo
	ChainEndpoint         IChainEndpointDo
	Comer                 IComerDo
	ComerAccount          IComerAccountDo
	ComerEducation        IComerEducationDo
	ComerFollowRel        IComerFollowRelDo
	ComerLanguage         IComerLanguageDo
	ComerProfile          IComerProfileDo
	ComerSkill            IComerSkillDo
	ComerSocial           IComerSocialDo
	Crowdfunding          ICrowdfundingDo
	CrowdfundingIboRate   ICrowdfundingIboRateDo
	CrowdfundingInvestor  ICrowdfundingInvestorDo
	CrowdfundingSwap      ICrowdfundingSwapDo
	DictDatum             IDictDatumDo
	GovernanceAdmin       IGovernanceAdminDo
	GovernanceChoice      IGovernanceChoiceDo
	GovernanceProposal    IGovernanceProposalDo
	GovernanceSetting     IGovernanceSettingDo
	GovernanceStrategy    IGovernanceStrategyDo
	GovernanceVote        IGovernanceVoteDo
	Image                 IImageDo
	PostUpdate            IPostUpdateDo
	Startup               IStartupDo
	StartupFollowRel      IStartupFollowRelDo
	StartupGroup          IStartupGroupDo
	StartupGroupMemberRel IStartupGroupMemberRelDo
	StartupTeamMemberRel  IStartupTeamMemberRelDo
	StartupWallet         IStartupWalletDo
	Tag                   ITagDo
	TagTargetRel          ITagTargetRelDo
	Transaction           ITransactionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Bounty:                q.Bounty.WithContext(ctx),
		BountyApplicant:       q.BountyApplicant.WithContext(ctx),
		BountyContact:         q.BountyContact.WithContext(ctx),
		BountyDeposit:         q.BountyDeposit.WithContext(ctx),
		BountyPaymentPeriod:   q.BountyPaymentPeriod.WithContext(ctx),
		BountyPaymentTerm:     q.BountyPaymentTerm.WithContext(ctx),
		Chain:                 q.Chain.WithContext(ctx),
		ChainContract:         q.ChainContract.WithContext(ctx),
		ChainEndpoint:         q.ChainEndpoint.WithContext(ctx),
		Comer:                 q.Comer.WithContext(ctx),
		ComerAccount:          q.ComerAccount.WithContext(ctx),
		ComerEducation:        q.ComerEducation.WithContext(ctx),
		ComerFollowRel:        q.ComerFollowRel.WithContext(ctx),
		ComerLanguage:         q.ComerLanguage.WithContext(ctx),
		ComerProfile:          q.ComerProfile.WithContext(ctx),
		ComerSkill:            q.ComerSkill.WithContext(ctx),
		ComerSocial:           q.ComerSocial.WithContext(ctx),
		Crowdfunding:          q.Crowdfunding.WithContext(ctx),
		CrowdfundingIboRate:   q.CrowdfundingIboRate.WithContext(ctx),
		CrowdfundingInvestor:  q.CrowdfundingInvestor.WithContext(ctx),
		CrowdfundingSwap:      q.CrowdfundingSwap.WithContext(ctx),
		DictDatum:             q.DictDatum.WithContext(ctx),
		GovernanceAdmin:       q.GovernanceAdmin.WithContext(ctx),
		GovernanceChoice:      q.GovernanceChoice.WithContext(ctx),
		GovernanceProposal:    q.GovernanceProposal.WithContext(ctx),
		GovernanceSetting:     q.GovernanceSetting.WithContext(ctx),
		GovernanceStrategy:    q.GovernanceStrategy.WithContext(ctx),
		GovernanceVote:        q.GovernanceVote.WithContext(ctx),
		Image:                 q.Image.WithContext(ctx),
		PostUpdate:            q.PostUpdate.WithContext(ctx),
		Startup:               q.Startup.WithContext(ctx),
		StartupFollowRel:      q.StartupFollowRel.WithContext(ctx),
		StartupGroup:          q.StartupGroup.WithContext(ctx),
		StartupGroupMemberRel: q.StartupGroupMemberRel.WithContext(ctx),
		StartupTeamMemberRel:  q.StartupTeamMemberRel.WithContext(ctx),
		StartupWallet:         q.StartupWallet.WithContext(ctx),
		Tag:                   q.Tag.WithContext(ctx),
		TagTargetRel:          q.TagTargetRel.WithContext(ctx),
		Transaction:           q.Transaction.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
