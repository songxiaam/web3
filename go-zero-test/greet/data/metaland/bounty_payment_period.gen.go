// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newBountyPaymentPeriod(db *gorm.DB, opts ...gen.DOOption) bountyPaymentPeriod {
	_bountyPaymentPeriod := bountyPaymentPeriod{}

	_bountyPaymentPeriod.bountyPaymentPeriodDo.UseDB(db, opts...)
	_bountyPaymentPeriod.bountyPaymentPeriodDo.UseModel(&model.BountyPaymentPeriod{})

	tableName := _bountyPaymentPeriod.bountyPaymentPeriodDo.TableName()
	_bountyPaymentPeriod.ALL = field.NewAsterisk(tableName)
	_bountyPaymentPeriod.ID = field.NewInt64(tableName, "id")
	_bountyPaymentPeriod.BountyID = field.NewInt64(tableName, "bounty_id")
	_bountyPaymentPeriod.PeriodType = field.NewBool(tableName, "period_type")
	_bountyPaymentPeriod.PeriodAmount = field.NewInt64(tableName, "period_amount")
	_bountyPaymentPeriod.HoursPerDay = field.NewInt32(tableName, "hours_per_day")
	_bountyPaymentPeriod.Token1Symbol = field.NewString(tableName, "token1_symbol")
	_bountyPaymentPeriod.Token1Amount = field.NewInt32(tableName, "token1_amount")
	_bountyPaymentPeriod.Token2Symbol = field.NewString(tableName, "token2_symbol")
	_bountyPaymentPeriod.Token2Amount = field.NewInt32(tableName, "token2_amount")
	_bountyPaymentPeriod.Target = field.NewString(tableName, "target")
	_bountyPaymentPeriod.CreatedAt = field.NewTime(tableName, "created_at")
	_bountyPaymentPeriod.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bountyPaymentPeriod.IsDeleted = field.NewBool(tableName, "is_deleted")

	_bountyPaymentPeriod.fillFieldMap()

	return _bountyPaymentPeriod
}

type bountyPaymentPeriod struct {
	bountyPaymentPeriodDo

	ALL          field.Asterisk
	ID           field.Int64
	BountyID     field.Int64
	PeriodType   field.Bool
	PeriodAmount field.Int64
	HoursPerDay  field.Int32
	Token1Symbol field.String
	Token1Amount field.Int32
	Token2Symbol field.String
	Token2Amount field.Int32
	Target       field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	IsDeleted    field.Bool

	fieldMap map[string]field.Expr
}

func (b bountyPaymentPeriod) Table(newTableName string) *bountyPaymentPeriod {
	b.bountyPaymentPeriodDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bountyPaymentPeriod) As(alias string) *bountyPaymentPeriod {
	b.bountyPaymentPeriodDo.DO = *(b.bountyPaymentPeriodDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bountyPaymentPeriod) updateTableName(table string) *bountyPaymentPeriod {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.BountyID = field.NewInt64(table, "bounty_id")
	b.PeriodType = field.NewBool(table, "period_type")
	b.PeriodAmount = field.NewInt64(table, "period_amount")
	b.HoursPerDay = field.NewInt32(table, "hours_per_day")
	b.Token1Symbol = field.NewString(table, "token1_symbol")
	b.Token1Amount = field.NewInt32(table, "token1_amount")
	b.Token2Symbol = field.NewString(table, "token2_symbol")
	b.Token2Amount = field.NewInt32(table, "token2_amount")
	b.Target = field.NewString(table, "target")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.IsDeleted = field.NewBool(table, "is_deleted")

	b.fillFieldMap()

	return b
}

func (b *bountyPaymentPeriod) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bountyPaymentPeriod) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["id"] = b.ID
	b.fieldMap["bounty_id"] = b.BountyID
	b.fieldMap["period_type"] = b.PeriodType
	b.fieldMap["period_amount"] = b.PeriodAmount
	b.fieldMap["hours_per_day"] = b.HoursPerDay
	b.fieldMap["token1_symbol"] = b.Token1Symbol
	b.fieldMap["token1_amount"] = b.Token1Amount
	b.fieldMap["token2_symbol"] = b.Token2Symbol
	b.fieldMap["token2_amount"] = b.Token2Amount
	b.fieldMap["target"] = b.Target
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["is_deleted"] = b.IsDeleted
}

func (b bountyPaymentPeriod) clone(db *gorm.DB) bountyPaymentPeriod {
	b.bountyPaymentPeriodDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bountyPaymentPeriod) replaceDB(db *gorm.DB) bountyPaymentPeriod {
	b.bountyPaymentPeriodDo.ReplaceDB(db)
	return b
}

type bountyPaymentPeriodDo struct{ gen.DO }

type IBountyPaymentPeriodDo interface {
	gen.SubQuery
	Debug() IBountyPaymentPeriodDo
	WithContext(ctx context.Context) IBountyPaymentPeriodDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBountyPaymentPeriodDo
	WriteDB() IBountyPaymentPeriodDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBountyPaymentPeriodDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBountyPaymentPeriodDo
	Not(conds ...gen.Condition) IBountyPaymentPeriodDo
	Or(conds ...gen.Condition) IBountyPaymentPeriodDo
	Select(conds ...field.Expr) IBountyPaymentPeriodDo
	Where(conds ...gen.Condition) IBountyPaymentPeriodDo
	Order(conds ...field.Expr) IBountyPaymentPeriodDo
	Distinct(cols ...field.Expr) IBountyPaymentPeriodDo
	Omit(cols ...field.Expr) IBountyPaymentPeriodDo
	Join(table schema.Tabler, on ...field.Expr) IBountyPaymentPeriodDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBountyPaymentPeriodDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBountyPaymentPeriodDo
	Group(cols ...field.Expr) IBountyPaymentPeriodDo
	Having(conds ...gen.Condition) IBountyPaymentPeriodDo
	Limit(limit int) IBountyPaymentPeriodDo
	Offset(offset int) IBountyPaymentPeriodDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyPaymentPeriodDo
	Unscoped() IBountyPaymentPeriodDo
	Create(values ...*model.BountyPaymentPeriod) error
	CreateInBatches(values []*model.BountyPaymentPeriod, batchSize int) error
	Save(values ...*model.BountyPaymentPeriod) error
	First() (*model.BountyPaymentPeriod, error)
	Take() (*model.BountyPaymentPeriod, error)
	Last() (*model.BountyPaymentPeriod, error)
	Find() ([]*model.BountyPaymentPeriod, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyPaymentPeriod, err error)
	FindInBatches(result *[]*model.BountyPaymentPeriod, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BountyPaymentPeriod) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBountyPaymentPeriodDo
	Assign(attrs ...field.AssignExpr) IBountyPaymentPeriodDo
	Joins(fields ...field.RelationField) IBountyPaymentPeriodDo
	Preload(fields ...field.RelationField) IBountyPaymentPeriodDo
	FirstOrInit() (*model.BountyPaymentPeriod, error)
	FirstOrCreate() (*model.BountyPaymentPeriod, error)
	FindByPage(offset int, limit int) (result []*model.BountyPaymentPeriod, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBountyPaymentPeriodDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bountyPaymentPeriodDo) Debug() IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Debug())
}

func (b bountyPaymentPeriodDo) WithContext(ctx context.Context) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bountyPaymentPeriodDo) ReadDB() IBountyPaymentPeriodDo {
	return b.Clauses(dbresolver.Read)
}

func (b bountyPaymentPeriodDo) WriteDB() IBountyPaymentPeriodDo {
	return b.Clauses(dbresolver.Write)
}

func (b bountyPaymentPeriodDo) Session(config *gorm.Session) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Session(config))
}

func (b bountyPaymentPeriodDo) Clauses(conds ...clause.Expression) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bountyPaymentPeriodDo) Returning(value interface{}, columns ...string) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bountyPaymentPeriodDo) Not(conds ...gen.Condition) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bountyPaymentPeriodDo) Or(conds ...gen.Condition) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bountyPaymentPeriodDo) Select(conds ...field.Expr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bountyPaymentPeriodDo) Where(conds ...gen.Condition) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bountyPaymentPeriodDo) Order(conds ...field.Expr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bountyPaymentPeriodDo) Distinct(cols ...field.Expr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bountyPaymentPeriodDo) Omit(cols ...field.Expr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bountyPaymentPeriodDo) Join(table schema.Tabler, on ...field.Expr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bountyPaymentPeriodDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bountyPaymentPeriodDo) RightJoin(table schema.Tabler, on ...field.Expr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bountyPaymentPeriodDo) Group(cols ...field.Expr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bountyPaymentPeriodDo) Having(conds ...gen.Condition) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bountyPaymentPeriodDo) Limit(limit int) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bountyPaymentPeriodDo) Offset(offset int) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bountyPaymentPeriodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bountyPaymentPeriodDo) Unscoped() IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bountyPaymentPeriodDo) Create(values ...*model.BountyPaymentPeriod) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bountyPaymentPeriodDo) CreateInBatches(values []*model.BountyPaymentPeriod, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bountyPaymentPeriodDo) Save(values ...*model.BountyPaymentPeriod) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bountyPaymentPeriodDo) First() (*model.BountyPaymentPeriod, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentPeriod), nil
	}
}

func (b bountyPaymentPeriodDo) Take() (*model.BountyPaymentPeriod, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentPeriod), nil
	}
}

func (b bountyPaymentPeriodDo) Last() (*model.BountyPaymentPeriod, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentPeriod), nil
	}
}

func (b bountyPaymentPeriodDo) Find() ([]*model.BountyPaymentPeriod, error) {
	result, err := b.DO.Find()
	return result.([]*model.BountyPaymentPeriod), err
}

func (b bountyPaymentPeriodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BountyPaymentPeriod, err error) {
	buf := make([]*model.BountyPaymentPeriod, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bountyPaymentPeriodDo) FindInBatches(result *[]*model.BountyPaymentPeriod, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bountyPaymentPeriodDo) Attrs(attrs ...field.AssignExpr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bountyPaymentPeriodDo) Assign(attrs ...field.AssignExpr) IBountyPaymentPeriodDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bountyPaymentPeriodDo) Joins(fields ...field.RelationField) IBountyPaymentPeriodDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bountyPaymentPeriodDo) Preload(fields ...field.RelationField) IBountyPaymentPeriodDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bountyPaymentPeriodDo) FirstOrInit() (*model.BountyPaymentPeriod, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentPeriod), nil
	}
}

func (b bountyPaymentPeriodDo) FirstOrCreate() (*model.BountyPaymentPeriod, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BountyPaymentPeriod), nil
	}
}

func (b bountyPaymentPeriodDo) FindByPage(offset int, limit int) (result []*model.BountyPaymentPeriod, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bountyPaymentPeriodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bountyPaymentPeriodDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bountyPaymentPeriodDo) Delete(models ...*model.BountyPaymentPeriod) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bountyPaymentPeriodDo) withDO(do gen.Dao) *bountyPaymentPeriodDo {
	b.DO = *do.(*gen.DO)
	return b
}
