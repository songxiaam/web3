// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newTagTargetRel(db *gorm.DB, opts ...gen.DOOption) tagTargetRel {
	_tagTargetRel := tagTargetRel{}

	_tagTargetRel.tagTargetRelDo.UseDB(db, opts...)
	_tagTargetRel.tagTargetRelDo.UseModel(&model.TagTargetRel{})

	tableName := _tagTargetRel.tagTargetRelDo.TableName()
	_tagTargetRel.ALL = field.NewAsterisk(tableName)
	_tagTargetRel.ID = field.NewInt64(tableName, "id")
	_tagTargetRel.Target = field.NewString(tableName, "target")
	_tagTargetRel.TargetID = field.NewInt64(tableName, "target_id")
	_tagTargetRel.TagID = field.NewInt64(tableName, "tag_id")
	_tagTargetRel.CreatedAt = field.NewTime(tableName, "created_at")
	_tagTargetRel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tagTargetRel.fillFieldMap()

	return _tagTargetRel
}

type tagTargetRel struct {
	tagTargetRelDo

	ALL       field.Asterisk
	ID        field.Int64
	Target    field.String // comerSkill,startup
	TargetID  field.Int64  // target id
	TagID     field.Int64  // skill id
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t tagTargetRel) Table(newTableName string) *tagTargetRel {
	t.tagTargetRelDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tagTargetRel) As(alias string) *tagTargetRel {
	t.tagTargetRelDo.DO = *(t.tagTargetRelDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tagTargetRel) updateTableName(table string) *tagTargetRel {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Target = field.NewString(table, "target")
	t.TargetID = field.NewInt64(table, "target_id")
	t.TagID = field.NewInt64(table, "tag_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tagTargetRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tagTargetRel) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["target"] = t.Target
	t.fieldMap["target_id"] = t.TargetID
	t.fieldMap["tag_id"] = t.TagID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tagTargetRel) clone(db *gorm.DB) tagTargetRel {
	t.tagTargetRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tagTargetRel) replaceDB(db *gorm.DB) tagTargetRel {
	t.tagTargetRelDo.ReplaceDB(db)
	return t
}

type tagTargetRelDo struct{ gen.DO }

type ITagTargetRelDo interface {
	gen.SubQuery
	Debug() ITagTargetRelDo
	WithContext(ctx context.Context) ITagTargetRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITagTargetRelDo
	WriteDB() ITagTargetRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITagTargetRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITagTargetRelDo
	Not(conds ...gen.Condition) ITagTargetRelDo
	Or(conds ...gen.Condition) ITagTargetRelDo
	Select(conds ...field.Expr) ITagTargetRelDo
	Where(conds ...gen.Condition) ITagTargetRelDo
	Order(conds ...field.Expr) ITagTargetRelDo
	Distinct(cols ...field.Expr) ITagTargetRelDo
	Omit(cols ...field.Expr) ITagTargetRelDo
	Join(table schema.Tabler, on ...field.Expr) ITagTargetRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITagTargetRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITagTargetRelDo
	Group(cols ...field.Expr) ITagTargetRelDo
	Having(conds ...gen.Condition) ITagTargetRelDo
	Limit(limit int) ITagTargetRelDo
	Offset(offset int) ITagTargetRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITagTargetRelDo
	Unscoped() ITagTargetRelDo
	Create(values ...*model.TagTargetRel) error
	CreateInBatches(values []*model.TagTargetRel, batchSize int) error
	Save(values ...*model.TagTargetRel) error
	First() (*model.TagTargetRel, error)
	Take() (*model.TagTargetRel, error)
	Last() (*model.TagTargetRel, error)
	Find() ([]*model.TagTargetRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TagTargetRel, err error)
	FindInBatches(result *[]*model.TagTargetRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TagTargetRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITagTargetRelDo
	Assign(attrs ...field.AssignExpr) ITagTargetRelDo
	Joins(fields ...field.RelationField) ITagTargetRelDo
	Preload(fields ...field.RelationField) ITagTargetRelDo
	FirstOrInit() (*model.TagTargetRel, error)
	FirstOrCreate() (*model.TagTargetRel, error)
	FindByPage(offset int, limit int) (result []*model.TagTargetRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITagTargetRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tagTargetRelDo) Debug() ITagTargetRelDo {
	return t.withDO(t.DO.Debug())
}

func (t tagTargetRelDo) WithContext(ctx context.Context) ITagTargetRelDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tagTargetRelDo) ReadDB() ITagTargetRelDo {
	return t.Clauses(dbresolver.Read)
}

func (t tagTargetRelDo) WriteDB() ITagTargetRelDo {
	return t.Clauses(dbresolver.Write)
}

func (t tagTargetRelDo) Session(config *gorm.Session) ITagTargetRelDo {
	return t.withDO(t.DO.Session(config))
}

func (t tagTargetRelDo) Clauses(conds ...clause.Expression) ITagTargetRelDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tagTargetRelDo) Returning(value interface{}, columns ...string) ITagTargetRelDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tagTargetRelDo) Not(conds ...gen.Condition) ITagTargetRelDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tagTargetRelDo) Or(conds ...gen.Condition) ITagTargetRelDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tagTargetRelDo) Select(conds ...field.Expr) ITagTargetRelDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tagTargetRelDo) Where(conds ...gen.Condition) ITagTargetRelDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tagTargetRelDo) Order(conds ...field.Expr) ITagTargetRelDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tagTargetRelDo) Distinct(cols ...field.Expr) ITagTargetRelDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tagTargetRelDo) Omit(cols ...field.Expr) ITagTargetRelDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tagTargetRelDo) Join(table schema.Tabler, on ...field.Expr) ITagTargetRelDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tagTargetRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITagTargetRelDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tagTargetRelDo) RightJoin(table schema.Tabler, on ...field.Expr) ITagTargetRelDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tagTargetRelDo) Group(cols ...field.Expr) ITagTargetRelDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tagTargetRelDo) Having(conds ...gen.Condition) ITagTargetRelDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tagTargetRelDo) Limit(limit int) ITagTargetRelDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tagTargetRelDo) Offset(offset int) ITagTargetRelDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tagTargetRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITagTargetRelDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tagTargetRelDo) Unscoped() ITagTargetRelDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tagTargetRelDo) Create(values ...*model.TagTargetRel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tagTargetRelDo) CreateInBatches(values []*model.TagTargetRel, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tagTargetRelDo) Save(values ...*model.TagTargetRel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tagTargetRelDo) First() (*model.TagTargetRel, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagTargetRel), nil
	}
}

func (t tagTargetRelDo) Take() (*model.TagTargetRel, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagTargetRel), nil
	}
}

func (t tagTargetRelDo) Last() (*model.TagTargetRel, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagTargetRel), nil
	}
}

func (t tagTargetRelDo) Find() ([]*model.TagTargetRel, error) {
	result, err := t.DO.Find()
	return result.([]*model.TagTargetRel), err
}

func (t tagTargetRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TagTargetRel, err error) {
	buf := make([]*model.TagTargetRel, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tagTargetRelDo) FindInBatches(result *[]*model.TagTargetRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tagTargetRelDo) Attrs(attrs ...field.AssignExpr) ITagTargetRelDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tagTargetRelDo) Assign(attrs ...field.AssignExpr) ITagTargetRelDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tagTargetRelDo) Joins(fields ...field.RelationField) ITagTargetRelDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tagTargetRelDo) Preload(fields ...field.RelationField) ITagTargetRelDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tagTargetRelDo) FirstOrInit() (*model.TagTargetRel, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagTargetRel), nil
	}
}

func (t tagTargetRelDo) FirstOrCreate() (*model.TagTargetRel, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagTargetRel), nil
	}
}

func (t tagTargetRelDo) FindByPage(offset int, limit int) (result []*model.TagTargetRel, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tagTargetRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tagTargetRelDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tagTargetRelDo) Delete(models ...*model.TagTargetRel) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tagTargetRelDo) withDO(do gen.Dao) *tagTargetRelDo {
	t.DO = *do.(*gen.DO)
	return t
}
