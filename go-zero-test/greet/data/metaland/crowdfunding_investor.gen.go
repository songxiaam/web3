// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newCrowdfundingInvestor(db *gorm.DB, opts ...gen.DOOption) crowdfundingInvestor {
	_crowdfundingInvestor := crowdfundingInvestor{}

	_crowdfundingInvestor.crowdfundingInvestorDo.UseDB(db, opts...)
	_crowdfundingInvestor.crowdfundingInvestorDo.UseModel(&model.CrowdfundingInvestor{})

	tableName := _crowdfundingInvestor.crowdfundingInvestorDo.TableName()
	_crowdfundingInvestor.ALL = field.NewAsterisk(tableName)
	_crowdfundingInvestor.ID = field.NewInt64(tableName, "id")
	_crowdfundingInvestor.CrowdfundingID = field.NewInt64(tableName, "crowdfunding_id")
	_crowdfundingInvestor.ComerID = field.NewInt64(tableName, "comer_id")
	_crowdfundingInvestor.BuyTokenTotal = field.NewFloat64(tableName, "buy_token_total")
	_crowdfundingInvestor.BuyTokenBalance = field.NewFloat64(tableName, "buy_token_balance")
	_crowdfundingInvestor.SellTokenTotal = field.NewFloat64(tableName, "sell_token_total")
	_crowdfundingInvestor.SellTokenBalance = field.NewFloat64(tableName, "sell_token_balance")
	_crowdfundingInvestor.CreatedAt = field.NewTime(tableName, "created_at")
	_crowdfundingInvestor.UpdatedAt = field.NewTime(tableName, "updated_at")

	_crowdfundingInvestor.fillFieldMap()

	return _crowdfundingInvestor
}

type crowdfundingInvestor struct {
	crowdfundingInvestorDo

	ALL              field.Asterisk
	ID               field.Int64
	CrowdfundingID   field.Int64   // Crowdfunding id
	ComerID          field.Int64   // Investor' comer id
	BuyTokenTotal    field.Float64 // Buy token total
	BuyTokenBalance  field.Float64 // Buy token balance
	SellTokenTotal   field.Float64 // Selling token total
	SellTokenBalance field.Float64 // Selling token balance
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (c crowdfundingInvestor) Table(newTableName string) *crowdfundingInvestor {
	c.crowdfundingInvestorDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c crowdfundingInvestor) As(alias string) *crowdfundingInvestor {
	c.crowdfundingInvestorDo.DO = *(c.crowdfundingInvestorDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *crowdfundingInvestor) updateTableName(table string) *crowdfundingInvestor {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CrowdfundingID = field.NewInt64(table, "crowdfunding_id")
	c.ComerID = field.NewInt64(table, "comer_id")
	c.BuyTokenTotal = field.NewFloat64(table, "buy_token_total")
	c.BuyTokenBalance = field.NewFloat64(table, "buy_token_balance")
	c.SellTokenTotal = field.NewFloat64(table, "sell_token_total")
	c.SellTokenBalance = field.NewFloat64(table, "sell_token_balance")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *crowdfundingInvestor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *crowdfundingInvestor) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["crowdfunding_id"] = c.CrowdfundingID
	c.fieldMap["comer_id"] = c.ComerID
	c.fieldMap["buy_token_total"] = c.BuyTokenTotal
	c.fieldMap["buy_token_balance"] = c.BuyTokenBalance
	c.fieldMap["sell_token_total"] = c.SellTokenTotal
	c.fieldMap["sell_token_balance"] = c.SellTokenBalance
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c crowdfundingInvestor) clone(db *gorm.DB) crowdfundingInvestor {
	c.crowdfundingInvestorDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c crowdfundingInvestor) replaceDB(db *gorm.DB) crowdfundingInvestor {
	c.crowdfundingInvestorDo.ReplaceDB(db)
	return c
}

type crowdfundingInvestorDo struct{ gen.DO }

type ICrowdfundingInvestorDo interface {
	gen.SubQuery
	Debug() ICrowdfundingInvestorDo
	WithContext(ctx context.Context) ICrowdfundingInvestorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICrowdfundingInvestorDo
	WriteDB() ICrowdfundingInvestorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICrowdfundingInvestorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICrowdfundingInvestorDo
	Not(conds ...gen.Condition) ICrowdfundingInvestorDo
	Or(conds ...gen.Condition) ICrowdfundingInvestorDo
	Select(conds ...field.Expr) ICrowdfundingInvestorDo
	Where(conds ...gen.Condition) ICrowdfundingInvestorDo
	Order(conds ...field.Expr) ICrowdfundingInvestorDo
	Distinct(cols ...field.Expr) ICrowdfundingInvestorDo
	Omit(cols ...field.Expr) ICrowdfundingInvestorDo
	Join(table schema.Tabler, on ...field.Expr) ICrowdfundingInvestorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingInvestorDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingInvestorDo
	Group(cols ...field.Expr) ICrowdfundingInvestorDo
	Having(conds ...gen.Condition) ICrowdfundingInvestorDo
	Limit(limit int) ICrowdfundingInvestorDo
	Offset(offset int) ICrowdfundingInvestorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdfundingInvestorDo
	Unscoped() ICrowdfundingInvestorDo
	Create(values ...*model.CrowdfundingInvestor) error
	CreateInBatches(values []*model.CrowdfundingInvestor, batchSize int) error
	Save(values ...*model.CrowdfundingInvestor) error
	First() (*model.CrowdfundingInvestor, error)
	Take() (*model.CrowdfundingInvestor, error)
	Last() (*model.CrowdfundingInvestor, error)
	Find() ([]*model.CrowdfundingInvestor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdfundingInvestor, err error)
	FindInBatches(result *[]*model.CrowdfundingInvestor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CrowdfundingInvestor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICrowdfundingInvestorDo
	Assign(attrs ...field.AssignExpr) ICrowdfundingInvestorDo
	Joins(fields ...field.RelationField) ICrowdfundingInvestorDo
	Preload(fields ...field.RelationField) ICrowdfundingInvestorDo
	FirstOrInit() (*model.CrowdfundingInvestor, error)
	FirstOrCreate() (*model.CrowdfundingInvestor, error)
	FindByPage(offset int, limit int) (result []*model.CrowdfundingInvestor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICrowdfundingInvestorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c crowdfundingInvestorDo) Debug() ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Debug())
}

func (c crowdfundingInvestorDo) WithContext(ctx context.Context) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c crowdfundingInvestorDo) ReadDB() ICrowdfundingInvestorDo {
	return c.Clauses(dbresolver.Read)
}

func (c crowdfundingInvestorDo) WriteDB() ICrowdfundingInvestorDo {
	return c.Clauses(dbresolver.Write)
}

func (c crowdfundingInvestorDo) Session(config *gorm.Session) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Session(config))
}

func (c crowdfundingInvestorDo) Clauses(conds ...clause.Expression) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c crowdfundingInvestorDo) Returning(value interface{}, columns ...string) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c crowdfundingInvestorDo) Not(conds ...gen.Condition) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c crowdfundingInvestorDo) Or(conds ...gen.Condition) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c crowdfundingInvestorDo) Select(conds ...field.Expr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c crowdfundingInvestorDo) Where(conds ...gen.Condition) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c crowdfundingInvestorDo) Order(conds ...field.Expr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c crowdfundingInvestorDo) Distinct(cols ...field.Expr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c crowdfundingInvestorDo) Omit(cols ...field.Expr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c crowdfundingInvestorDo) Join(table schema.Tabler, on ...field.Expr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c crowdfundingInvestorDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c crowdfundingInvestorDo) RightJoin(table schema.Tabler, on ...field.Expr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c crowdfundingInvestorDo) Group(cols ...field.Expr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c crowdfundingInvestorDo) Having(conds ...gen.Condition) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c crowdfundingInvestorDo) Limit(limit int) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c crowdfundingInvestorDo) Offset(offset int) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c crowdfundingInvestorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c crowdfundingInvestorDo) Unscoped() ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Unscoped())
}

func (c crowdfundingInvestorDo) Create(values ...*model.CrowdfundingInvestor) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c crowdfundingInvestorDo) CreateInBatches(values []*model.CrowdfundingInvestor, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c crowdfundingInvestorDo) Save(values ...*model.CrowdfundingInvestor) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c crowdfundingInvestorDo) First() (*model.CrowdfundingInvestor, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingInvestor), nil
	}
}

func (c crowdfundingInvestorDo) Take() (*model.CrowdfundingInvestor, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingInvestor), nil
	}
}

func (c crowdfundingInvestorDo) Last() (*model.CrowdfundingInvestor, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingInvestor), nil
	}
}

func (c crowdfundingInvestorDo) Find() ([]*model.CrowdfundingInvestor, error) {
	result, err := c.DO.Find()
	return result.([]*model.CrowdfundingInvestor), err
}

func (c crowdfundingInvestorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CrowdfundingInvestor, err error) {
	buf := make([]*model.CrowdfundingInvestor, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c crowdfundingInvestorDo) FindInBatches(result *[]*model.CrowdfundingInvestor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c crowdfundingInvestorDo) Attrs(attrs ...field.AssignExpr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c crowdfundingInvestorDo) Assign(attrs ...field.AssignExpr) ICrowdfundingInvestorDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c crowdfundingInvestorDo) Joins(fields ...field.RelationField) ICrowdfundingInvestorDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c crowdfundingInvestorDo) Preload(fields ...field.RelationField) ICrowdfundingInvestorDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c crowdfundingInvestorDo) FirstOrInit() (*model.CrowdfundingInvestor, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingInvestor), nil
	}
}

func (c crowdfundingInvestorDo) FirstOrCreate() (*model.CrowdfundingInvestor, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CrowdfundingInvestor), nil
	}
}

func (c crowdfundingInvestorDo) FindByPage(offset int, limit int) (result []*model.CrowdfundingInvestor, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c crowdfundingInvestorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c crowdfundingInvestorDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c crowdfundingInvestorDo) Delete(models ...*model.CrowdfundingInvestor) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *crowdfundingInvestorDo) withDO(do gen.Dao) *crowdfundingInvestorDo {
	c.DO = *do.(*gen.DO)
	return c
}
