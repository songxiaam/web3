// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newStartupGroupMemberRel(db *gorm.DB, opts ...gen.DOOption) startupGroupMemberRel {
	_startupGroupMemberRel := startupGroupMemberRel{}

	_startupGroupMemberRel.startupGroupMemberRelDo.UseDB(db, opts...)
	_startupGroupMemberRel.startupGroupMemberRelDo.UseModel(&model.StartupGroupMemberRel{})

	tableName := _startupGroupMemberRel.startupGroupMemberRelDo.TableName()
	_startupGroupMemberRel.ALL = field.NewAsterisk(tableName)
	_startupGroupMemberRel.ID = field.NewInt64(tableName, "id")
	_startupGroupMemberRel.ComerID = field.NewInt64(tableName, "comer_id")
	_startupGroupMemberRel.StartupID = field.NewInt64(tableName, "startup_id")
	_startupGroupMemberRel.GroupID = field.NewInt64(tableName, "group_id")
	_startupGroupMemberRel.CreatedAt = field.NewTime(tableName, "created_at")
	_startupGroupMemberRel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_startupGroupMemberRel.fillFieldMap()

	return _startupGroupMemberRel
}

type startupGroupMemberRel struct {
	startupGroupMemberRelDo

	ALL       field.Asterisk
	ID        field.Int64
	ComerID   field.Int64 // comer_id
	StartupID field.Int64 // startup_id
	GroupID   field.Int64 // group id
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s startupGroupMemberRel) Table(newTableName string) *startupGroupMemberRel {
	s.startupGroupMemberRelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s startupGroupMemberRel) As(alias string) *startupGroupMemberRel {
	s.startupGroupMemberRelDo.DO = *(s.startupGroupMemberRelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *startupGroupMemberRel) updateTableName(table string) *startupGroupMemberRel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ComerID = field.NewInt64(table, "comer_id")
	s.StartupID = field.NewInt64(table, "startup_id")
	s.GroupID = field.NewInt64(table, "group_id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *startupGroupMemberRel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *startupGroupMemberRel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["comer_id"] = s.ComerID
	s.fieldMap["startup_id"] = s.StartupID
	s.fieldMap["group_id"] = s.GroupID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s startupGroupMemberRel) clone(db *gorm.DB) startupGroupMemberRel {
	s.startupGroupMemberRelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s startupGroupMemberRel) replaceDB(db *gorm.DB) startupGroupMemberRel {
	s.startupGroupMemberRelDo.ReplaceDB(db)
	return s
}

type startupGroupMemberRelDo struct{ gen.DO }

type IStartupGroupMemberRelDo interface {
	gen.SubQuery
	Debug() IStartupGroupMemberRelDo
	WithContext(ctx context.Context) IStartupGroupMemberRelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStartupGroupMemberRelDo
	WriteDB() IStartupGroupMemberRelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStartupGroupMemberRelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStartupGroupMemberRelDo
	Not(conds ...gen.Condition) IStartupGroupMemberRelDo
	Or(conds ...gen.Condition) IStartupGroupMemberRelDo
	Select(conds ...field.Expr) IStartupGroupMemberRelDo
	Where(conds ...gen.Condition) IStartupGroupMemberRelDo
	Order(conds ...field.Expr) IStartupGroupMemberRelDo
	Distinct(cols ...field.Expr) IStartupGroupMemberRelDo
	Omit(cols ...field.Expr) IStartupGroupMemberRelDo
	Join(table schema.Tabler, on ...field.Expr) IStartupGroupMemberRelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStartupGroupMemberRelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStartupGroupMemberRelDo
	Group(cols ...field.Expr) IStartupGroupMemberRelDo
	Having(conds ...gen.Condition) IStartupGroupMemberRelDo
	Limit(limit int) IStartupGroupMemberRelDo
	Offset(offset int) IStartupGroupMemberRelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupGroupMemberRelDo
	Unscoped() IStartupGroupMemberRelDo
	Create(values ...*model.StartupGroupMemberRel) error
	CreateInBatches(values []*model.StartupGroupMemberRel, batchSize int) error
	Save(values ...*model.StartupGroupMemberRel) error
	First() (*model.StartupGroupMemberRel, error)
	Take() (*model.StartupGroupMemberRel, error)
	Last() (*model.StartupGroupMemberRel, error)
	Find() ([]*model.StartupGroupMemberRel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupGroupMemberRel, err error)
	FindInBatches(result *[]*model.StartupGroupMemberRel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StartupGroupMemberRel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStartupGroupMemberRelDo
	Assign(attrs ...field.AssignExpr) IStartupGroupMemberRelDo
	Joins(fields ...field.RelationField) IStartupGroupMemberRelDo
	Preload(fields ...field.RelationField) IStartupGroupMemberRelDo
	FirstOrInit() (*model.StartupGroupMemberRel, error)
	FirstOrCreate() (*model.StartupGroupMemberRel, error)
	FindByPage(offset int, limit int) (result []*model.StartupGroupMemberRel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStartupGroupMemberRelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s startupGroupMemberRelDo) Debug() IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Debug())
}

func (s startupGroupMemberRelDo) WithContext(ctx context.Context) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s startupGroupMemberRelDo) ReadDB() IStartupGroupMemberRelDo {
	return s.Clauses(dbresolver.Read)
}

func (s startupGroupMemberRelDo) WriteDB() IStartupGroupMemberRelDo {
	return s.Clauses(dbresolver.Write)
}

func (s startupGroupMemberRelDo) Session(config *gorm.Session) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Session(config))
}

func (s startupGroupMemberRelDo) Clauses(conds ...clause.Expression) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s startupGroupMemberRelDo) Returning(value interface{}, columns ...string) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s startupGroupMemberRelDo) Not(conds ...gen.Condition) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s startupGroupMemberRelDo) Or(conds ...gen.Condition) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s startupGroupMemberRelDo) Select(conds ...field.Expr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s startupGroupMemberRelDo) Where(conds ...gen.Condition) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s startupGroupMemberRelDo) Order(conds ...field.Expr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s startupGroupMemberRelDo) Distinct(cols ...field.Expr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s startupGroupMemberRelDo) Omit(cols ...field.Expr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s startupGroupMemberRelDo) Join(table schema.Tabler, on ...field.Expr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s startupGroupMemberRelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s startupGroupMemberRelDo) RightJoin(table schema.Tabler, on ...field.Expr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s startupGroupMemberRelDo) Group(cols ...field.Expr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s startupGroupMemberRelDo) Having(conds ...gen.Condition) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s startupGroupMemberRelDo) Limit(limit int) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s startupGroupMemberRelDo) Offset(offset int) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s startupGroupMemberRelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s startupGroupMemberRelDo) Unscoped() IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s startupGroupMemberRelDo) Create(values ...*model.StartupGroupMemberRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s startupGroupMemberRelDo) CreateInBatches(values []*model.StartupGroupMemberRel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s startupGroupMemberRelDo) Save(values ...*model.StartupGroupMemberRel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s startupGroupMemberRelDo) First() (*model.StartupGroupMemberRel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroupMemberRel), nil
	}
}

func (s startupGroupMemberRelDo) Take() (*model.StartupGroupMemberRel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroupMemberRel), nil
	}
}

func (s startupGroupMemberRelDo) Last() (*model.StartupGroupMemberRel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroupMemberRel), nil
	}
}

func (s startupGroupMemberRelDo) Find() ([]*model.StartupGroupMemberRel, error) {
	result, err := s.DO.Find()
	return result.([]*model.StartupGroupMemberRel), err
}

func (s startupGroupMemberRelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StartupGroupMemberRel, err error) {
	buf := make([]*model.StartupGroupMemberRel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s startupGroupMemberRelDo) FindInBatches(result *[]*model.StartupGroupMemberRel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s startupGroupMemberRelDo) Attrs(attrs ...field.AssignExpr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s startupGroupMemberRelDo) Assign(attrs ...field.AssignExpr) IStartupGroupMemberRelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s startupGroupMemberRelDo) Joins(fields ...field.RelationField) IStartupGroupMemberRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s startupGroupMemberRelDo) Preload(fields ...field.RelationField) IStartupGroupMemberRelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s startupGroupMemberRelDo) FirstOrInit() (*model.StartupGroupMemberRel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroupMemberRel), nil
	}
}

func (s startupGroupMemberRelDo) FirstOrCreate() (*model.StartupGroupMemberRel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StartupGroupMemberRel), nil
	}
}

func (s startupGroupMemberRelDo) FindByPage(offset int, limit int) (result []*model.StartupGroupMemberRel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s startupGroupMemberRelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s startupGroupMemberRelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s startupGroupMemberRelDo) Delete(models ...*model.StartupGroupMemberRel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *startupGroupMemberRelDo) withDO(do gen.Dao) *startupGroupMemberRelDo {
	s.DO = *do.(*gen.DO)
	return s
}
