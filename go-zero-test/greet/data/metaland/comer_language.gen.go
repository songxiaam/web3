// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newComerLanguage(db *gorm.DB, opts ...gen.DOOption) comerLanguage {
	_comerLanguage := comerLanguage{}

	_comerLanguage.comerLanguageDo.UseDB(db, opts...)
	_comerLanguage.comerLanguageDo.UseModel(&model.ComerLanguage{})

	tableName := _comerLanguage.comerLanguageDo.TableName()
	_comerLanguage.ALL = field.NewAsterisk(tableName)
	_comerLanguage.ID = field.NewInt64(tableName, "id")
	_comerLanguage.ComerID = field.NewInt64(tableName, "comer_id")
	_comerLanguage.Language = field.NewString(tableName, "language")
	_comerLanguage.Code = field.NewString(tableName, "code")
	_comerLanguage.Level = field.NewInt32(tableName, "level")
	_comerLanguage.IsNative = field.NewBool(tableName, "is_native")
	_comerLanguage.CreatedAt = field.NewTime(tableName, "created_at")
	_comerLanguage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_comerLanguage.IsDeleted = field.NewBool(tableName, "is_deleted")

	_comerLanguage.fillFieldMap()

	return _comerLanguage
}

type comerLanguage struct {
	comerLanguageDo

	ALL       field.Asterisk
	ID        field.Int64
	ComerID   field.Int64  // 用户ID
	Language  field.String // 语言
	Code      field.String // 语言代码
	Level     field.Int32  // 熟练度(1-5)
	IsNative  field.Bool   // 是否母语
	CreatedAt field.Time
	UpdatedAt field.Time
	IsDeleted field.Bool // 是否删除

	fieldMap map[string]field.Expr
}

func (c comerLanguage) Table(newTableName string) *comerLanguage {
	c.comerLanguageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comerLanguage) As(alias string) *comerLanguage {
	c.comerLanguageDo.DO = *(c.comerLanguageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comerLanguage) updateTableName(table string) *comerLanguage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ComerID = field.NewInt64(table, "comer_id")
	c.Language = field.NewString(table, "language")
	c.Code = field.NewString(table, "code")
	c.Level = field.NewInt32(table, "level")
	c.IsNative = field.NewBool(table, "is_native")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *comerLanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comerLanguage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["comer_id"] = c.ComerID
	c.fieldMap["language"] = c.Language
	c.fieldMap["code"] = c.Code
	c.fieldMap["level"] = c.Level
	c.fieldMap["is_native"] = c.IsNative
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c comerLanguage) clone(db *gorm.DB) comerLanguage {
	c.comerLanguageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comerLanguage) replaceDB(db *gorm.DB) comerLanguage {
	c.comerLanguageDo.ReplaceDB(db)
	return c
}

type comerLanguageDo struct{ gen.DO }

type IComerLanguageDo interface {
	gen.SubQuery
	Debug() IComerLanguageDo
	WithContext(ctx context.Context) IComerLanguageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComerLanguageDo
	WriteDB() IComerLanguageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComerLanguageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComerLanguageDo
	Not(conds ...gen.Condition) IComerLanguageDo
	Or(conds ...gen.Condition) IComerLanguageDo
	Select(conds ...field.Expr) IComerLanguageDo
	Where(conds ...gen.Condition) IComerLanguageDo
	Order(conds ...field.Expr) IComerLanguageDo
	Distinct(cols ...field.Expr) IComerLanguageDo
	Omit(cols ...field.Expr) IComerLanguageDo
	Join(table schema.Tabler, on ...field.Expr) IComerLanguageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComerLanguageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComerLanguageDo
	Group(cols ...field.Expr) IComerLanguageDo
	Having(conds ...gen.Condition) IComerLanguageDo
	Limit(limit int) IComerLanguageDo
	Offset(offset int) IComerLanguageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComerLanguageDo
	Unscoped() IComerLanguageDo
	Create(values ...*model.ComerLanguage) error
	CreateInBatches(values []*model.ComerLanguage, batchSize int) error
	Save(values ...*model.ComerLanguage) error
	First() (*model.ComerLanguage, error)
	Take() (*model.ComerLanguage, error)
	Last() (*model.ComerLanguage, error)
	Find() ([]*model.ComerLanguage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComerLanguage, err error)
	FindInBatches(result *[]*model.ComerLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ComerLanguage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComerLanguageDo
	Assign(attrs ...field.AssignExpr) IComerLanguageDo
	Joins(fields ...field.RelationField) IComerLanguageDo
	Preload(fields ...field.RelationField) IComerLanguageDo
	FirstOrInit() (*model.ComerLanguage, error)
	FirstOrCreate() (*model.ComerLanguage, error)
	FindByPage(offset int, limit int) (result []*model.ComerLanguage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComerLanguageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c comerLanguageDo) Debug() IComerLanguageDo {
	return c.withDO(c.DO.Debug())
}

func (c comerLanguageDo) WithContext(ctx context.Context) IComerLanguageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comerLanguageDo) ReadDB() IComerLanguageDo {
	return c.Clauses(dbresolver.Read)
}

func (c comerLanguageDo) WriteDB() IComerLanguageDo {
	return c.Clauses(dbresolver.Write)
}

func (c comerLanguageDo) Session(config *gorm.Session) IComerLanguageDo {
	return c.withDO(c.DO.Session(config))
}

func (c comerLanguageDo) Clauses(conds ...clause.Expression) IComerLanguageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comerLanguageDo) Returning(value interface{}, columns ...string) IComerLanguageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comerLanguageDo) Not(conds ...gen.Condition) IComerLanguageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comerLanguageDo) Or(conds ...gen.Condition) IComerLanguageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comerLanguageDo) Select(conds ...field.Expr) IComerLanguageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comerLanguageDo) Where(conds ...gen.Condition) IComerLanguageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comerLanguageDo) Order(conds ...field.Expr) IComerLanguageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comerLanguageDo) Distinct(cols ...field.Expr) IComerLanguageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comerLanguageDo) Omit(cols ...field.Expr) IComerLanguageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comerLanguageDo) Join(table schema.Tabler, on ...field.Expr) IComerLanguageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comerLanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComerLanguageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comerLanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) IComerLanguageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comerLanguageDo) Group(cols ...field.Expr) IComerLanguageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comerLanguageDo) Having(conds ...gen.Condition) IComerLanguageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comerLanguageDo) Limit(limit int) IComerLanguageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comerLanguageDo) Offset(offset int) IComerLanguageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comerLanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComerLanguageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comerLanguageDo) Unscoped() IComerLanguageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comerLanguageDo) Create(values ...*model.ComerLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comerLanguageDo) CreateInBatches(values []*model.ComerLanguage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comerLanguageDo) Save(values ...*model.ComerLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comerLanguageDo) First() (*model.ComerLanguage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerLanguage), nil
	}
}

func (c comerLanguageDo) Take() (*model.ComerLanguage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerLanguage), nil
	}
}

func (c comerLanguageDo) Last() (*model.ComerLanguage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerLanguage), nil
	}
}

func (c comerLanguageDo) Find() ([]*model.ComerLanguage, error) {
	result, err := c.DO.Find()
	return result.([]*model.ComerLanguage), err
}

func (c comerLanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComerLanguage, err error) {
	buf := make([]*model.ComerLanguage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comerLanguageDo) FindInBatches(result *[]*model.ComerLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comerLanguageDo) Attrs(attrs ...field.AssignExpr) IComerLanguageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comerLanguageDo) Assign(attrs ...field.AssignExpr) IComerLanguageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comerLanguageDo) Joins(fields ...field.RelationField) IComerLanguageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comerLanguageDo) Preload(fields ...field.RelationField) IComerLanguageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comerLanguageDo) FirstOrInit() (*model.ComerLanguage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerLanguage), nil
	}
}

func (c comerLanguageDo) FirstOrCreate() (*model.ComerLanguage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerLanguage), nil
	}
}

func (c comerLanguageDo) FindByPage(offset int, limit int) (result []*model.ComerLanguage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comerLanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comerLanguageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comerLanguageDo) Delete(models ...*model.ComerLanguage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comerLanguageDo) withDO(do gen.Dao) *comerLanguageDo {
	c.DO = *do.(*gen.DO)
	return c
}
