// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newComerProfile(db *gorm.DB, opts ...gen.DOOption) comerProfile {
	_comerProfile := comerProfile{}

	_comerProfile.comerProfileDo.UseDB(db, opts...)
	_comerProfile.comerProfileDo.UseModel(&model.ComerProfile{})

	tableName := _comerProfile.comerProfileDo.TableName()
	_comerProfile.ALL = field.NewAsterisk(tableName)
	_comerProfile.ID = field.NewInt64(tableName, "id")
	_comerProfile.ComerID = field.NewInt64(tableName, "comer_id")
	_comerProfile.Name = field.NewString(tableName, "name")
	_comerProfile.Avatar = field.NewString(tableName, "avatar")
	_comerProfile.Cover = field.NewString(tableName, "cover")
	_comerProfile.Location = field.NewString(tableName, "location")
	_comerProfile.TimeZone = field.NewString(tableName, "time_zone")
	_comerProfile.Website = field.NewString(tableName, "website")
	_comerProfile.Email = field.NewString(tableName, "email")
	_comerProfile.Twitter = field.NewString(tableName, "twitter")
	_comerProfile.Discord = field.NewString(tableName, "discord")
	_comerProfile.Telegram = field.NewString(tableName, "telegram")
	_comerProfile.Medium = field.NewString(tableName, "medium")
	_comerProfile.Facebook = field.NewString(tableName, "facebook")
	_comerProfile.Linktree = field.NewString(tableName, "linktree")
	_comerProfile.Bio = field.NewString(tableName, "bio")
	_comerProfile.Languages = field.NewString(tableName, "languages")
	_comerProfile.Educations = field.NewString(tableName, "educations")
	_comerProfile.CreatedAt = field.NewTime(tableName, "created_at")
	_comerProfile.UpdatedAt = field.NewTime(tableName, "updated_at")
	_comerProfile.IsDeleted = field.NewBool(tableName, "is_deleted")

	_comerProfile.fillFieldMap()

	return _comerProfile
}

type comerProfile struct {
	comerProfileDo

	ALL        field.Asterisk
	ID         field.Int64
	ComerID    field.Int64
	Name       field.String // name
	Avatar     field.String // avatar
	Cover      field.String
	Location   field.String // location city
	TimeZone   field.String // time zone: UTC-09:30
	Website    field.String // website
	Email      field.String // email
	Twitter    field.String // twitter
	Discord    field.String // discord
	Telegram   field.String // telegram
	Medium     field.String // medium
	Facebook   field.String
	Linktree   field.String
	Bio        field.String // bio
	Languages  field.String
	Educations field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time
	IsDeleted  field.Bool // Is Deleted

	fieldMap map[string]field.Expr
}

func (c comerProfile) Table(newTableName string) *comerProfile {
	c.comerProfileDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comerProfile) As(alias string) *comerProfile {
	c.comerProfileDo.DO = *(c.comerProfileDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comerProfile) updateTableName(table string) *comerProfile {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.ComerID = field.NewInt64(table, "comer_id")
	c.Name = field.NewString(table, "name")
	c.Avatar = field.NewString(table, "avatar")
	c.Cover = field.NewString(table, "cover")
	c.Location = field.NewString(table, "location")
	c.TimeZone = field.NewString(table, "time_zone")
	c.Website = field.NewString(table, "website")
	c.Email = field.NewString(table, "email")
	c.Twitter = field.NewString(table, "twitter")
	c.Discord = field.NewString(table, "discord")
	c.Telegram = field.NewString(table, "telegram")
	c.Medium = field.NewString(table, "medium")
	c.Facebook = field.NewString(table, "facebook")
	c.Linktree = field.NewString(table, "linktree")
	c.Bio = field.NewString(table, "bio")
	c.Languages = field.NewString(table, "languages")
	c.Educations = field.NewString(table, "educations")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.IsDeleted = field.NewBool(table, "is_deleted")

	c.fillFieldMap()

	return c
}

func (c *comerProfile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comerProfile) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 21)
	c.fieldMap["id"] = c.ID
	c.fieldMap["comer_id"] = c.ComerID
	c.fieldMap["name"] = c.Name
	c.fieldMap["avatar"] = c.Avatar
	c.fieldMap["cover"] = c.Cover
	c.fieldMap["location"] = c.Location
	c.fieldMap["time_zone"] = c.TimeZone
	c.fieldMap["website"] = c.Website
	c.fieldMap["email"] = c.Email
	c.fieldMap["twitter"] = c.Twitter
	c.fieldMap["discord"] = c.Discord
	c.fieldMap["telegram"] = c.Telegram
	c.fieldMap["medium"] = c.Medium
	c.fieldMap["facebook"] = c.Facebook
	c.fieldMap["linktree"] = c.Linktree
	c.fieldMap["bio"] = c.Bio
	c.fieldMap["languages"] = c.Languages
	c.fieldMap["educations"] = c.Educations
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["is_deleted"] = c.IsDeleted
}

func (c comerProfile) clone(db *gorm.DB) comerProfile {
	c.comerProfileDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comerProfile) replaceDB(db *gorm.DB) comerProfile {
	c.comerProfileDo.ReplaceDB(db)
	return c
}

type comerProfileDo struct{ gen.DO }

type IComerProfileDo interface {
	gen.SubQuery
	Debug() IComerProfileDo
	WithContext(ctx context.Context) IComerProfileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IComerProfileDo
	WriteDB() IComerProfileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IComerProfileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IComerProfileDo
	Not(conds ...gen.Condition) IComerProfileDo
	Or(conds ...gen.Condition) IComerProfileDo
	Select(conds ...field.Expr) IComerProfileDo
	Where(conds ...gen.Condition) IComerProfileDo
	Order(conds ...field.Expr) IComerProfileDo
	Distinct(cols ...field.Expr) IComerProfileDo
	Omit(cols ...field.Expr) IComerProfileDo
	Join(table schema.Tabler, on ...field.Expr) IComerProfileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IComerProfileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IComerProfileDo
	Group(cols ...field.Expr) IComerProfileDo
	Having(conds ...gen.Condition) IComerProfileDo
	Limit(limit int) IComerProfileDo
	Offset(offset int) IComerProfileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IComerProfileDo
	Unscoped() IComerProfileDo
	Create(values ...*model.ComerProfile) error
	CreateInBatches(values []*model.ComerProfile, batchSize int) error
	Save(values ...*model.ComerProfile) error
	First() (*model.ComerProfile, error)
	Take() (*model.ComerProfile, error)
	Last() (*model.ComerProfile, error)
	Find() ([]*model.ComerProfile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComerProfile, err error)
	FindInBatches(result *[]*model.ComerProfile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ComerProfile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IComerProfileDo
	Assign(attrs ...field.AssignExpr) IComerProfileDo
	Joins(fields ...field.RelationField) IComerProfileDo
	Preload(fields ...field.RelationField) IComerProfileDo
	FirstOrInit() (*model.ComerProfile, error)
	FirstOrCreate() (*model.ComerProfile, error)
	FindByPage(offset int, limit int) (result []*model.ComerProfile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IComerProfileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c comerProfileDo) Debug() IComerProfileDo {
	return c.withDO(c.DO.Debug())
}

func (c comerProfileDo) WithContext(ctx context.Context) IComerProfileDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comerProfileDo) ReadDB() IComerProfileDo {
	return c.Clauses(dbresolver.Read)
}

func (c comerProfileDo) WriteDB() IComerProfileDo {
	return c.Clauses(dbresolver.Write)
}

func (c comerProfileDo) Session(config *gorm.Session) IComerProfileDo {
	return c.withDO(c.DO.Session(config))
}

func (c comerProfileDo) Clauses(conds ...clause.Expression) IComerProfileDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comerProfileDo) Returning(value interface{}, columns ...string) IComerProfileDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comerProfileDo) Not(conds ...gen.Condition) IComerProfileDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comerProfileDo) Or(conds ...gen.Condition) IComerProfileDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comerProfileDo) Select(conds ...field.Expr) IComerProfileDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comerProfileDo) Where(conds ...gen.Condition) IComerProfileDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comerProfileDo) Order(conds ...field.Expr) IComerProfileDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comerProfileDo) Distinct(cols ...field.Expr) IComerProfileDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comerProfileDo) Omit(cols ...field.Expr) IComerProfileDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comerProfileDo) Join(table schema.Tabler, on ...field.Expr) IComerProfileDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comerProfileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IComerProfileDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comerProfileDo) RightJoin(table schema.Tabler, on ...field.Expr) IComerProfileDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comerProfileDo) Group(cols ...field.Expr) IComerProfileDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comerProfileDo) Having(conds ...gen.Condition) IComerProfileDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comerProfileDo) Limit(limit int) IComerProfileDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comerProfileDo) Offset(offset int) IComerProfileDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comerProfileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IComerProfileDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comerProfileDo) Unscoped() IComerProfileDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comerProfileDo) Create(values ...*model.ComerProfile) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comerProfileDo) CreateInBatches(values []*model.ComerProfile, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comerProfileDo) Save(values ...*model.ComerProfile) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comerProfileDo) First() (*model.ComerProfile, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerProfile), nil
	}
}

func (c comerProfileDo) Take() (*model.ComerProfile, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerProfile), nil
	}
}

func (c comerProfileDo) Last() (*model.ComerProfile, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerProfile), nil
	}
}

func (c comerProfileDo) Find() ([]*model.ComerProfile, error) {
	result, err := c.DO.Find()
	return result.([]*model.ComerProfile), err
}

func (c comerProfileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComerProfile, err error) {
	buf := make([]*model.ComerProfile, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comerProfileDo) FindInBatches(result *[]*model.ComerProfile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comerProfileDo) Attrs(attrs ...field.AssignExpr) IComerProfileDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comerProfileDo) Assign(attrs ...field.AssignExpr) IComerProfileDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comerProfileDo) Joins(fields ...field.RelationField) IComerProfileDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comerProfileDo) Preload(fields ...field.RelationField) IComerProfileDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comerProfileDo) FirstOrInit() (*model.ComerProfile, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerProfile), nil
	}
}

func (c comerProfileDo) FirstOrCreate() (*model.ComerProfile, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComerProfile), nil
	}
}

func (c comerProfileDo) FindByPage(offset int, limit int) (result []*model.ComerProfile, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comerProfileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comerProfileDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comerProfileDo) Delete(models ...*model.ComerProfile) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comerProfileDo) withDO(do gen.Dao) *comerProfileDo {
	c.DO = *do.(*gen.DO)
	return c
}
