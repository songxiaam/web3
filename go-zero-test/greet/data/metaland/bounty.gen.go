// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package metaland

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"greet/data/model"
)

func newBounty(db *gorm.DB, opts ...gen.DOOption) bounty {
	_bounty := bounty{}

	_bounty.bountyDo.UseDB(db, opts...)
	_bounty.bountyDo.UseModel(&model.Bounty{})

	tableName := _bounty.bountyDo.TableName()
	_bounty.ALL = field.NewAsterisk(tableName)
	_bounty.ID = field.NewInt64(tableName, "id")
	_bounty.ChainID = field.NewInt64(tableName, "chain_id")
	_bounty.TxHash = field.NewString(tableName, "tx_hash")
	_bounty.DepositContract = field.NewString(tableName, "deposit_contract")
	_bounty.StartupID = field.NewInt64(tableName, "startup_id")
	_bounty.ComerID = field.NewInt64(tableName, "comer_id")
	_bounty.Title = field.NewString(tableName, "title")
	_bounty.ApplyCutoffDate = field.NewTime(tableName, "apply_cutoff_date")
	_bounty.DiscussionLink = field.NewString(tableName, "discussion_link")
	_bounty.DepositTokenSymbol = field.NewString(tableName, "deposit_token_symbol")
	_bounty.ApplicantDeposit = field.NewInt32(tableName, "applicant_deposit")
	_bounty.FounderDeposit = field.NewInt32(tableName, "founder_deposit")
	_bounty.Description = field.NewString(tableName, "description")
	_bounty.PaymentMode = field.NewInt32(tableName, "payment_mode")
	_bounty.Status = field.NewBool(tableName, "status")
	_bounty.TotalRewardToken = field.NewInt32(tableName, "total_reward_token")
	_bounty.CreatedAt = field.NewTime(tableName, "created_at")
	_bounty.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bounty.IsDeleted = field.NewBool(tableName, "is_deleted")

	_bounty.fillFieldMap()

	return _bounty
}

type bounty struct {
	bountyDo

	ALL                field.Asterisk
	ID                 field.Int64
	ChainID            field.Int64  // Chain ID
	TxHash             field.String // Transcation Hash
	DepositContract    field.String // Contract Address
	StartupID          field.Int64
	ComerID            field.Int64
	Title              field.String
	ApplyCutoffDate    field.Time
	DiscussionLink     field.String
	DepositTokenSymbol field.String
	ApplicantDeposit   field.Int32
	FounderDeposit     field.Int32
	Description        field.String
	PaymentMode        field.Int32
	Status             field.Bool
	TotalRewardToken   field.Int32
	CreatedAt          field.Time
	UpdatedAt          field.Time
	IsDeleted          field.Bool

	fieldMap map[string]field.Expr
}

func (b bounty) Table(newTableName string) *bounty {
	b.bountyDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bounty) As(alias string) *bounty {
	b.bountyDo.DO = *(b.bountyDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bounty) updateTableName(table string) *bounty {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.ChainID = field.NewInt64(table, "chain_id")
	b.TxHash = field.NewString(table, "tx_hash")
	b.DepositContract = field.NewString(table, "deposit_contract")
	b.StartupID = field.NewInt64(table, "startup_id")
	b.ComerID = field.NewInt64(table, "comer_id")
	b.Title = field.NewString(table, "title")
	b.ApplyCutoffDate = field.NewTime(table, "apply_cutoff_date")
	b.DiscussionLink = field.NewString(table, "discussion_link")
	b.DepositTokenSymbol = field.NewString(table, "deposit_token_symbol")
	b.ApplicantDeposit = field.NewInt32(table, "applicant_deposit")
	b.FounderDeposit = field.NewInt32(table, "founder_deposit")
	b.Description = field.NewString(table, "description")
	b.PaymentMode = field.NewInt32(table, "payment_mode")
	b.Status = field.NewBool(table, "status")
	b.TotalRewardToken = field.NewInt32(table, "total_reward_token")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.IsDeleted = field.NewBool(table, "is_deleted")

	b.fillFieldMap()

	return b
}

func (b *bounty) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bounty) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 19)
	b.fieldMap["id"] = b.ID
	b.fieldMap["chain_id"] = b.ChainID
	b.fieldMap["tx_hash"] = b.TxHash
	b.fieldMap["deposit_contract"] = b.DepositContract
	b.fieldMap["startup_id"] = b.StartupID
	b.fieldMap["comer_id"] = b.ComerID
	b.fieldMap["title"] = b.Title
	b.fieldMap["apply_cutoff_date"] = b.ApplyCutoffDate
	b.fieldMap["discussion_link"] = b.DiscussionLink
	b.fieldMap["deposit_token_symbol"] = b.DepositTokenSymbol
	b.fieldMap["applicant_deposit"] = b.ApplicantDeposit
	b.fieldMap["founder_deposit"] = b.FounderDeposit
	b.fieldMap["description"] = b.Description
	b.fieldMap["payment_mode"] = b.PaymentMode
	b.fieldMap["status"] = b.Status
	b.fieldMap["total_reward_token"] = b.TotalRewardToken
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["is_deleted"] = b.IsDeleted
}

func (b bounty) clone(db *gorm.DB) bounty {
	b.bountyDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bounty) replaceDB(db *gorm.DB) bounty {
	b.bountyDo.ReplaceDB(db)
	return b
}

type bountyDo struct{ gen.DO }

type IBountyDo interface {
	gen.SubQuery
	Debug() IBountyDo
	WithContext(ctx context.Context) IBountyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBountyDo
	WriteDB() IBountyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBountyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBountyDo
	Not(conds ...gen.Condition) IBountyDo
	Or(conds ...gen.Condition) IBountyDo
	Select(conds ...field.Expr) IBountyDo
	Where(conds ...gen.Condition) IBountyDo
	Order(conds ...field.Expr) IBountyDo
	Distinct(cols ...field.Expr) IBountyDo
	Omit(cols ...field.Expr) IBountyDo
	Join(table schema.Tabler, on ...field.Expr) IBountyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBountyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBountyDo
	Group(cols ...field.Expr) IBountyDo
	Having(conds ...gen.Condition) IBountyDo
	Limit(limit int) IBountyDo
	Offset(offset int) IBountyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyDo
	Unscoped() IBountyDo
	Create(values ...*model.Bounty) error
	CreateInBatches(values []*model.Bounty, batchSize int) error
	Save(values ...*model.Bounty) error
	First() (*model.Bounty, error)
	Take() (*model.Bounty, error)
	Last() (*model.Bounty, error)
	Find() ([]*model.Bounty, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bounty, err error)
	FindInBatches(result *[]*model.Bounty, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Bounty) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBountyDo
	Assign(attrs ...field.AssignExpr) IBountyDo
	Joins(fields ...field.RelationField) IBountyDo
	Preload(fields ...field.RelationField) IBountyDo
	FirstOrInit() (*model.Bounty, error)
	FirstOrCreate() (*model.Bounty, error)
	FindByPage(offset int, limit int) (result []*model.Bounty, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBountyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bountyDo) Debug() IBountyDo {
	return b.withDO(b.DO.Debug())
}

func (b bountyDo) WithContext(ctx context.Context) IBountyDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bountyDo) ReadDB() IBountyDo {
	return b.Clauses(dbresolver.Read)
}

func (b bountyDo) WriteDB() IBountyDo {
	return b.Clauses(dbresolver.Write)
}

func (b bountyDo) Session(config *gorm.Session) IBountyDo {
	return b.withDO(b.DO.Session(config))
}

func (b bountyDo) Clauses(conds ...clause.Expression) IBountyDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bountyDo) Returning(value interface{}, columns ...string) IBountyDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bountyDo) Not(conds ...gen.Condition) IBountyDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bountyDo) Or(conds ...gen.Condition) IBountyDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bountyDo) Select(conds ...field.Expr) IBountyDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bountyDo) Where(conds ...gen.Condition) IBountyDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bountyDo) Order(conds ...field.Expr) IBountyDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bountyDo) Distinct(cols ...field.Expr) IBountyDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bountyDo) Omit(cols ...field.Expr) IBountyDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bountyDo) Join(table schema.Tabler, on ...field.Expr) IBountyDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bountyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBountyDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bountyDo) RightJoin(table schema.Tabler, on ...field.Expr) IBountyDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bountyDo) Group(cols ...field.Expr) IBountyDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bountyDo) Having(conds ...gen.Condition) IBountyDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bountyDo) Limit(limit int) IBountyDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bountyDo) Offset(offset int) IBountyDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bountyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBountyDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bountyDo) Unscoped() IBountyDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bountyDo) Create(values ...*model.Bounty) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bountyDo) CreateInBatches(values []*model.Bounty, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bountyDo) Save(values ...*model.Bounty) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bountyDo) First() (*model.Bounty, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bounty), nil
	}
}

func (b bountyDo) Take() (*model.Bounty, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bounty), nil
	}
}

func (b bountyDo) Last() (*model.Bounty, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bounty), nil
	}
}

func (b bountyDo) Find() ([]*model.Bounty, error) {
	result, err := b.DO.Find()
	return result.([]*model.Bounty), err
}

func (b bountyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bounty, err error) {
	buf := make([]*model.Bounty, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bountyDo) FindInBatches(result *[]*model.Bounty, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bountyDo) Attrs(attrs ...field.AssignExpr) IBountyDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bountyDo) Assign(attrs ...field.AssignExpr) IBountyDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bountyDo) Joins(fields ...field.RelationField) IBountyDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bountyDo) Preload(fields ...field.RelationField) IBountyDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bountyDo) FirstOrInit() (*model.Bounty, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bounty), nil
	}
}

func (b bountyDo) FirstOrCreate() (*model.Bounty, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bounty), nil
	}
}

func (b bountyDo) FindByPage(offset int, limit int) (result []*model.Bounty, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bountyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bountyDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bountyDo) Delete(models ...*model.Bounty) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bountyDo) withDO(do gen.Dao) *bountyDo {
	b.DO = *do.(*gen.DO)
	return b
}
