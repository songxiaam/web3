// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tokenInfoFieldNames          = builder.RawFieldNames(&TokenInfo{})
	tokenInfoRows                = strings.Join(tokenInfoFieldNames, ",")
	tokenInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(tokenInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tokenInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(tokenInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tokenInfoModel interface {
		Insert(ctx context.Context, data *TokenInfo) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*TokenInfo, error)
		Update(ctx context.Context, data *TokenInfo) error
		Delete(ctx context.Context, id uint64) error
		FindList(ctx context.Context, startIndex, pageSize uint64) ([]TokenInfo, error)
		TotalCount(ctx context.Context) (uint64, error)
		Search(ctx context.Context, id uint64, symbol, chainId string, startIndex, pageSize uint64) ([]TokenInfo, error)
	}

	defaultTokenInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TokenInfo struct {
		Id           uint64         `db:"id"`
		Symbol       sql.NullString `db:"symbol"`
		Logo         sql.NullString `db:"logo"`
		Price        sql.NullString `db:"price"`
		Token        sql.NullString `db:"token"`
		ChainId      string         `db:"chain_id"`
		AbiFileExist uint64         `db:"abi_file_exist"`
		CreatedAt    sql.NullTime   `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		Decimals     int64          `db:"decimals"`
	}
)

func newTokenInfoModel(conn sqlx.SqlConn) *defaultTokenInfoModel {
	return &defaultTokenInfoModel{
		conn:  conn,
		table: "`token_info`",
	}
}

func (m *defaultTokenInfoModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTokenInfoModel) FindOne(ctx context.Context, id uint64) (*TokenInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tokenInfoRows, m.table)
	var resp TokenInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTokenInfoModel) Insert(ctx context.Context, data *TokenInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, tokenInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Symbol, data.Logo, data.Price, data.Token, data.ChainId, data.AbiFileExist, data.Decimals)
	return ret, err
}

func (m *defaultTokenInfoModel) Update(ctx context.Context, data *TokenInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tokenInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Symbol, data.Logo, data.Price, data.Token, data.ChainId, data.AbiFileExist, data.Decimals, data.Id)
	return err
}

func (m *defaultTokenInfoModel) tableName() string {
	return m.table
}

