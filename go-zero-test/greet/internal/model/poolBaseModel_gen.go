// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	poolBaseFieldNames          = builder.RawFieldNames(&PoolBase{})
	poolBaseRows                = strings.Join(poolBaseFieldNames, ",")
	poolBaseRowsExpectAutoSet   = strings.Join(stringx.Remove(poolBaseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	poolBaseRowsWithPlaceHolder = strings.Join(stringx.Remove(poolBaseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	poolBaseModel interface {
		Insert(ctx context.Context, data *PoolBase) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PoolBase, error)
		Update(ctx context.Context, data *PoolBase) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPoolBaseModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PoolBase struct {
		Id                     int64          `db:"id"`
		SettleTime             sql.NullString `db:"settle_time"`
		EndTime                sql.NullString `db:"end_time"`
		InterestRate           sql.NullString `db:"interest_rate"`
		MaxSupply              sql.NullString `db:"max_supply"`
		LendSupply             sql.NullString `db:"lend_supply"`
		BorrowSupply           sql.NullString `db:"borrow_supply"`
		MartgageRate           sql.NullString `db:"martgage_rate"`
		LendToken              sql.NullString `db:"lend_token"`
		BorrowToken            sql.NullString `db:"borrow_token"`
		State                  sql.NullString `db:"state"`
		JpCoin                 sql.NullString `db:"jp_coin"`
		SpCoin                 sql.NullString `db:"sp_coin"`
		AutoLiquidateThreshold sql.NullString `db:"auto_liquidate_threshold"`
		CreatedAt              sql.NullTime   `db:"created_at"`
		UpdatedAt              sql.NullTime   `db:"updated_at"`
		PoolId                 sql.NullInt64  `db:"pool_id"`
		BorrowTokenInfo        sql.NullString `db:"borrow_token_info"`
		LendTokenInfo          sql.NullString `db:"lend_token_info"`
		ChainId                string         `db:"chain_id"`
		LendTokenSymbol        sql.NullString `db:"lend_token_symbol"`
		BorrowTokenSymbol      sql.NullString `db:"borrow_token_symbol"`
	}
)

func newPoolBaseModel(conn sqlx.SqlConn) *defaultPoolBaseModel {
	return &defaultPoolBaseModel{
		conn:  conn,
		table: "`pool_base`",
	}
}

func (m *defaultPoolBaseModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPoolBaseModel) FindOne(ctx context.Context, id int64) (*PoolBase, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", poolBaseRows, m.table)
	var resp PoolBase
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPoolBaseModel) Insert(ctx context.Context, data *PoolBase) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, poolBaseRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SettleTime, data.EndTime, data.InterestRate, data.MaxSupply, data.LendSupply, data.BorrowSupply, data.MartgageRate, data.LendToken, data.BorrowToken, data.State, data.JpCoin, data.SpCoin, data.AutoLiquidateThreshold, data.PoolId, data.BorrowTokenInfo, data.LendTokenInfo, data.ChainId, data.LendTokenSymbol, data.BorrowTokenSymbol)
	return ret, err
}

func (m *defaultPoolBaseModel) Update(ctx context.Context, data *PoolBase) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, poolBaseRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SettleTime, data.EndTime, data.InterestRate, data.MaxSupply, data.LendSupply, data.BorrowSupply, data.MartgageRate, data.LendToken, data.BorrowToken, data.State, data.JpCoin, data.SpCoin, data.AutoLiquidateThreshold, data.PoolId, data.BorrowTokenInfo, data.LendTokenInfo, data.ChainId, data.LendTokenSymbol, data.BorrowTokenSymbol, data.Id)
	return err
}

func (m *defaultPoolBaseModel) tableName() string {
	return m.table
}
